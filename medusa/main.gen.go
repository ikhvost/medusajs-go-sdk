// Package medusa provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package medusa

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_tokenScopes   = "api_token.Scopes"
	Cookie_authScopes = "cookie_auth.Scopes"
	Jwt_tokenScopes   = "jwt_token.Scopes"
)

// Defines values for AdminShippingOptionResponsePriceType.
const (
	Calculated AdminShippingOptionResponsePriceType = "calculated"
	Flat       AdminShippingOptionResponsePriceType = "flat"
)

// Defines values for CampaignBudgetType.
const (
	CampaignBudgetTypeSpend CampaignBudgetType = "spend"
	CampaignBudgetTypeUsage CampaignBudgetType = "usage"
)

// Defines values for CreateCampaignBudgetType.
const (
	CreateCampaignBudgetTypeSpend CreateCampaignBudgetType = "spend"
	CreateCampaignBudgetTypeUsage CreateCampaignBudgetType = "usage"
)

// Defines values for CreateProductStatus.
const (
	CreateProductStatusDraft     CreateProductStatus = "draft"
	CreateProductStatusProposed  CreateProductStatus = "proposed"
	CreateProductStatusPublished CreateProductStatus = "published"
	CreateProductStatusRejected  CreateProductStatus = "rejected"
)

// Defines values for ErrorCode.
const (
	ErrorCodeApiError            ErrorCode = "api_error"
	ErrorCodeInvalidRequestError ErrorCode = "invalid_request_error"
	ErrorCodeInvalidStateError   ErrorCode = "invalid_state_error"
	ErrorCodeUnknownError        ErrorCode = "unknown_error"
)

// Defines values for ErrorType.
const (
	ErrorTypeConflict                        ErrorType = "conflict"
	ErrorTypeDatabaseError                   ErrorType = "database_error"
	ErrorTypeDuplicateError                  ErrorType = "duplicate_error"
	ErrorTypeInvalidArgument                 ErrorType = "invalid_argument"
	ErrorTypeInvalidData                     ErrorType = "invalid_data"
	ErrorTypeNotAllowed                      ErrorType = "not_allowed"
	ErrorTypeNotFound                        ErrorType = "not_found"
	ErrorTypePaymentAuthorizationError       ErrorType = "payment_authorization_error"
	ErrorTypeQueryRunnerAlreadyReleasedError ErrorType = "QueryRunnerAlreadyReleasedError"
	ErrorTypeTransactionAlreadyStartedError  ErrorType = "TransactionAlreadyStartedError"
	ErrorTypeTransactionNotStartedError      ErrorType = "TransactionNotStartedError"
	ErrorTypeUnauthorized                    ErrorType = "unauthorized"
	ErrorTypeUnexpectedState                 ErrorType = "unexpected_state"
	ErrorTypeUnknownError                    ErrorType = "unknown_error"
)

// Defines values for PostApiKeysJSONBodyType.
const (
	Publishable PostApiKeysJSONBodyType = "publishable"
	Secret      PostApiKeysJSONBodyType = "secret"
)

// Defines values for PostCampaignsJSONBodyBudgetType.
const (
	PostCampaignsJSONBodyBudgetTypeSpend PostCampaignsJSONBodyBudgetType = "spend"
	PostCampaignsJSONBodyBudgetTypeUsage PostCampaignsJSONBodyBudgetType = "usage"
)

// Defines values for PostCampaignsIdJSONBodyBudgetType.
const (
	PostCampaignsIdJSONBodyBudgetTypeSpend PostCampaignsIdJSONBodyBudgetType = "spend"
	PostCampaignsIdJSONBodyBudgetTypeUsage PostCampaignsIdJSONBodyBudgetType = "usage"
)

// Defines values for PostPriceListsJSONBodyStatus.
const (
	PostPriceListsJSONBodyStatusActive PostPriceListsJSONBodyStatus = "active"
	PostPriceListsJSONBodyStatusDraft  PostPriceListsJSONBodyStatus = "draft"
)

// Defines values for PostPriceListsJSONBodyType.
const (
	PostPriceListsJSONBodyTypeOverride PostPriceListsJSONBodyType = "override"
	PostPriceListsJSONBodyTypeSale     PostPriceListsJSONBodyType = "sale"
)

// Defines values for PostPriceListsIdJSONBodyStatus.
const (
	PostPriceListsIdJSONBodyStatusActive PostPriceListsIdJSONBodyStatus = "active"
	PostPriceListsIdJSONBodyStatusDraft  PostPriceListsIdJSONBodyStatus = "draft"
)

// Defines values for PostPriceListsIdJSONBodyType.
const (
	PostPriceListsIdJSONBodyTypeOverride PostPriceListsIdJSONBodyType = "override"
	PostPriceListsIdJSONBodyTypeSale     PostPriceListsIdJSONBodyType = "sale"
)

// Defines values for PostProductsJSONBodyStatus.
const (
	PostProductsJSONBodyStatusDraft     PostProductsJSONBodyStatus = "draft"
	PostProductsJSONBodyStatusProposed  PostProductsJSONBodyStatus = "proposed"
	PostProductsJSONBodyStatusPublished PostProductsJSONBodyStatus = "published"
	PostProductsJSONBodyStatusRejected  PostProductsJSONBodyStatus = "rejected"
)

// Defines values for PostProductsBatchJSONBodyCreateStatus.
const (
	PostProductsBatchJSONBodyCreateStatusDraft     PostProductsBatchJSONBodyCreateStatus = "draft"
	PostProductsBatchJSONBodyCreateStatusProposed  PostProductsBatchJSONBodyCreateStatus = "proposed"
	PostProductsBatchJSONBodyCreateStatusPublished PostProductsBatchJSONBodyCreateStatus = "published"
	PostProductsBatchJSONBodyCreateStatusRejected  PostProductsBatchJSONBodyCreateStatus = "rejected"
)

// Defines values for PostProductsBatchJSONBodyUpdateStatus.
const (
	PostProductsBatchJSONBodyUpdateStatusDraft     PostProductsBatchJSONBodyUpdateStatus = "draft"
	PostProductsBatchJSONBodyUpdateStatusProposed  PostProductsBatchJSONBodyUpdateStatus = "proposed"
	PostProductsBatchJSONBodyUpdateStatusPublished PostProductsBatchJSONBodyUpdateStatus = "published"
	PostProductsBatchJSONBodyUpdateStatusRejected  PostProductsBatchJSONBodyUpdateStatus = "rejected"
)

// Defines values for PostProductsIdJSONBodyStatus.
const (
	PostProductsIdJSONBodyStatusDraft     PostProductsIdJSONBodyStatus = "draft"
	PostProductsIdJSONBodyStatusProposed  PostProductsIdJSONBodyStatus = "proposed"
	PostProductsIdJSONBodyStatusPublished PostProductsIdJSONBodyStatus = "published"
	PostProductsIdJSONBodyStatusRejected  PostProductsIdJSONBodyStatus = "rejected"
)

// Defines values for PostProductsIdVariantsBatchJSONBodyCreateStatus.
const (
	PostProductsIdVariantsBatchJSONBodyCreateStatusDraft     PostProductsIdVariantsBatchJSONBodyCreateStatus = "draft"
	PostProductsIdVariantsBatchJSONBodyCreateStatusProposed  PostProductsIdVariantsBatchJSONBodyCreateStatus = "proposed"
	PostProductsIdVariantsBatchJSONBodyCreateStatusPublished PostProductsIdVariantsBatchJSONBodyCreateStatus = "published"
	PostProductsIdVariantsBatchJSONBodyCreateStatusRejected  PostProductsIdVariantsBatchJSONBodyCreateStatus = "rejected"
)

// Defines values for PostPromotionsJSONBodyApplicationMethodAllocation.
const (
	PostPromotionsJSONBodyApplicationMethodAllocationAcross PostPromotionsJSONBodyApplicationMethodAllocation = "across"
	PostPromotionsJSONBodyApplicationMethodAllocationEach   PostPromotionsJSONBodyApplicationMethodAllocation = "each"
)

// Defines values for PostPromotionsJSONBodyApplicationMethodBuyRulesOperator.
const (
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorEq  PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "eq"
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorGt  PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "gt"
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorGte PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "gte"
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorIn  PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "in"
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorLt  PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "lt"
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorLte PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "lte"
	PostPromotionsJSONBodyApplicationMethodBuyRulesOperatorNe  PostPromotionsJSONBodyApplicationMethodBuyRulesOperator = "ne"
)

// Defines values for PostPromotionsJSONBodyApplicationMethodTargetRulesOperator.
const (
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorEq  PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "eq"
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorGt  PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "gt"
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorGte PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "gte"
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorIn  PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "in"
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorLt  PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "lt"
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorLte PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "lte"
	PostPromotionsJSONBodyApplicationMethodTargetRulesOperatorNe  PostPromotionsJSONBodyApplicationMethodTargetRulesOperator = "ne"
)

// Defines values for PostPromotionsJSONBodyApplicationMethodTargetType.
const (
	PostPromotionsJSONBodyApplicationMethodTargetTypeItems           PostPromotionsJSONBodyApplicationMethodTargetType = "items"
	PostPromotionsJSONBodyApplicationMethodTargetTypeOrder           PostPromotionsJSONBodyApplicationMethodTargetType = "order"
	PostPromotionsJSONBodyApplicationMethodTargetTypeShippingMethods PostPromotionsJSONBodyApplicationMethodTargetType = "shipping_methods"
)

// Defines values for PostPromotionsJSONBodyApplicationMethodType.
const (
	PostPromotionsJSONBodyApplicationMethodTypeFixed      PostPromotionsJSONBodyApplicationMethodType = "fixed"
	PostPromotionsJSONBodyApplicationMethodTypePercentage PostPromotionsJSONBodyApplicationMethodType = "percentage"
)

// Defines values for PostPromotionsJSONBodyCampaignBudgetType.
const (
	PostPromotionsJSONBodyCampaignBudgetTypeSpend PostPromotionsJSONBodyCampaignBudgetType = "spend"
	PostPromotionsJSONBodyCampaignBudgetTypeUsage PostPromotionsJSONBodyCampaignBudgetType = "usage"
)

// Defines values for PostPromotionsJSONBodyRulesOperator.
const (
	PostPromotionsJSONBodyRulesOperatorEq  PostPromotionsJSONBodyRulesOperator = "eq"
	PostPromotionsJSONBodyRulesOperatorGt  PostPromotionsJSONBodyRulesOperator = "gt"
	PostPromotionsJSONBodyRulesOperatorGte PostPromotionsJSONBodyRulesOperator = "gte"
	PostPromotionsJSONBodyRulesOperatorIn  PostPromotionsJSONBodyRulesOperator = "in"
	PostPromotionsJSONBodyRulesOperatorLt  PostPromotionsJSONBodyRulesOperator = "lt"
	PostPromotionsJSONBodyRulesOperatorLte PostPromotionsJSONBodyRulesOperator = "lte"
	PostPromotionsJSONBodyRulesOperatorNe  PostPromotionsJSONBodyRulesOperator = "ne"
)

// Defines values for PostPromotionsJSONBodyType.
const (
	PostPromotionsJSONBodyTypeBuyget   PostPromotionsJSONBodyType = "buyget"
	PostPromotionsJSONBodyTypeStandard PostPromotionsJSONBodyType = "standard"
)

// Defines values for PostPromotionsIdJSONBodyApplicationMethodAllocation.
const (
	PostPromotionsIdJSONBodyApplicationMethodAllocationAcross PostPromotionsIdJSONBodyApplicationMethodAllocation = "across"
	PostPromotionsIdJSONBodyApplicationMethodAllocationEach   PostPromotionsIdJSONBodyApplicationMethodAllocation = "each"
)

// Defines values for PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator.
const (
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorEq  PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "eq"
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorGt  PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "gt"
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorGte PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "gte"
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorIn  PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "in"
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorLt  PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "lt"
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorLte PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "lte"
	PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperatorNe  PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator = "ne"
)

// Defines values for PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator.
const (
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorEq  PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "eq"
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorGt  PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "gt"
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorGte PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "gte"
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorIn  PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "in"
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorLt  PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "lt"
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorLte PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "lte"
	PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperatorNe  PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator = "ne"
)

// Defines values for PostPromotionsIdJSONBodyApplicationMethodTargetType.
const (
	PostPromotionsIdJSONBodyApplicationMethodTargetTypeItems           PostPromotionsIdJSONBodyApplicationMethodTargetType = "items"
	PostPromotionsIdJSONBodyApplicationMethodTargetTypeOrder           PostPromotionsIdJSONBodyApplicationMethodTargetType = "order"
	PostPromotionsIdJSONBodyApplicationMethodTargetTypeShippingMethods PostPromotionsIdJSONBodyApplicationMethodTargetType = "shipping_methods"
)

// Defines values for PostPromotionsIdJSONBodyApplicationMethodType.
const (
	PostPromotionsIdJSONBodyApplicationMethodTypeFixed      PostPromotionsIdJSONBodyApplicationMethodType = "fixed"
	PostPromotionsIdJSONBodyApplicationMethodTypePercentage PostPromotionsIdJSONBodyApplicationMethodType = "percentage"
)

// Defines values for PostPromotionsIdJSONBodyCampaignBudgetType.
const (
	PostPromotionsIdJSONBodyCampaignBudgetTypeSpend PostPromotionsIdJSONBodyCampaignBudgetType = "spend"
	PostPromotionsIdJSONBodyCampaignBudgetTypeUsage PostPromotionsIdJSONBodyCampaignBudgetType = "usage"
)

// Defines values for PostPromotionsIdJSONBodyRulesOperator.
const (
	PostPromotionsIdJSONBodyRulesOperatorEq  PostPromotionsIdJSONBodyRulesOperator = "eq"
	PostPromotionsIdJSONBodyRulesOperatorGt  PostPromotionsIdJSONBodyRulesOperator = "gt"
	PostPromotionsIdJSONBodyRulesOperatorGte PostPromotionsIdJSONBodyRulesOperator = "gte"
	PostPromotionsIdJSONBodyRulesOperatorIn  PostPromotionsIdJSONBodyRulesOperator = "in"
	PostPromotionsIdJSONBodyRulesOperatorLt  PostPromotionsIdJSONBodyRulesOperator = "lt"
	PostPromotionsIdJSONBodyRulesOperatorLte PostPromotionsIdJSONBodyRulesOperator = "lte"
	PostPromotionsIdJSONBodyRulesOperatorNe  PostPromotionsIdJSONBodyRulesOperator = "ne"
)

// Defines values for PostPromotionsIdJSONBodyType.
const (
	PostPromotionsIdJSONBodyTypeBuyget   PostPromotionsIdJSONBodyType = "buyget"
	PostPromotionsIdJSONBodyTypeStandard PostPromotionsIdJSONBodyType = "standard"
)

// Defines values for PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator.
const (
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorEq  PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "eq"
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorGt  PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "gt"
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorGte PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "gte"
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorIn  PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "in"
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorLt  PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "lt"
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorLte PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "lte"
	PostPromotionsIdBuyRulesBatchJSONBodyCreateOperatorNe  PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator = "ne"
)

// Defines values for PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator.
const (
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorEq  PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "eq"
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorGt  PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "gt"
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorGte PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "gte"
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorIn  PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "in"
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorLt  PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "lt"
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorLte PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "lte"
	PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperatorNe  PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator = "ne"
)

// Defines values for PostPromotionsIdRulesBatchJSONBodyCreateOperator.
const (
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorEq  PostPromotionsIdRulesBatchJSONBodyCreateOperator = "eq"
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorGt  PostPromotionsIdRulesBatchJSONBodyCreateOperator = "gt"
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorGte PostPromotionsIdRulesBatchJSONBodyCreateOperator = "gte"
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorIn  PostPromotionsIdRulesBatchJSONBodyCreateOperator = "in"
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorLt  PostPromotionsIdRulesBatchJSONBodyCreateOperator = "lt"
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorLte PostPromotionsIdRulesBatchJSONBodyCreateOperator = "lte"
	PostPromotionsIdRulesBatchJSONBodyCreateOperatorNe  PostPromotionsIdRulesBatchJSONBodyCreateOperator = "ne"
)

// Defines values for PostPromotionsIdRulesBatchJSONBodyUpdateOperator.
const (
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorEq  PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "eq"
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorGt  PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "gt"
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorGte PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "gte"
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorIn  PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "in"
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorLt  PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "lt"
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorLte PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "lte"
	PostPromotionsIdRulesBatchJSONBodyUpdateOperatorNe  PostPromotionsIdRulesBatchJSONBodyUpdateOperator = "ne"
)

// Defines values for PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator.
const (
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorEq  PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "eq"
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorGt  PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "gt"
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorGte PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "gte"
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorIn  PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "in"
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorLt  PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "lt"
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorLte PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "lte"
	PostPromotionsIdTargetRulesBatchJSONBodyCreateOperatorNe  PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator = "ne"
)

// Defines values for PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator.
const (
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorEq  PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "eq"
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorGt  PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "gt"
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorGte PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "gte"
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorIn  PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "in"
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorLt  PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "lt"
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorLte PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "lte"
	PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperatorNe  PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator = "ne"
)

// Defines values for PostShippingOptionsIdRulesBatchJSONBodyCreateOperator.
const (
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorEq  PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "eq"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorGt  PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "gt"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorGte PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "gte"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorIn  PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "in"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorLt  PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "lt"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorLte PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "lte"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorNe  PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "ne"
	PostShippingOptionsIdRulesBatchJSONBodyCreateOperatorNin PostShippingOptionsIdRulesBatchJSONBodyCreateOperator = "nin"
)

// Defines values for PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator.
const (
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorEq  PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "eq"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorGt  PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "gt"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorGte PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "gte"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorIn  PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "in"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorLt  PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "lt"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorLte PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "lte"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorNe  PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "ne"
	PostShippingOptionsIdRulesBatchJSONBodyUpdateOperatorNin PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator = "nin"
)

// Defines values for PostTaxRegionsJSONBodyDefaultTaxRateIsCombinable.
const (
	False PostTaxRegionsJSONBodyDefaultTaxRateIsCombinable = "false"
	True  PostTaxRegionsJSONBodyDefaultTaxRateIsCombinable = "true"
)

// Defines values for PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyAction.
const (
	PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyActionCompensate PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyAction = "compensate"
	PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyActionInvoke     PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyAction = "invoke"
)

// Defines values for PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyAction.
const (
	PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyActionCompensate PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyAction = "compensate"
	PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyActionInvoke     PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyAction = "invoke"
)

// AdminCustomerListResponse SUMMARY
type AdminCustomerListResponse struct {
	// Count The customer's count.
	Count float32 `json:"count"`

	// Customers The customer's customers.
	Customers []CustomerResponse `json:"customers"`

	// Limit The customer's limit.
	Limit float32 `json:"limit"`

	// Offset The customer's offset.
	Offset float32 `json:"offset"`
}

// AdminCustomerResponse SUMMARY
type AdminCustomerResponse struct {
	// Customer The customer's details.
	Customer CustomerResponse `json:"customer"`
}

// AdminFulfillmentProviderResponse The shipping option's provider.
type AdminFulfillmentProviderResponse struct {
	// CreatedAt The provider's created at.
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt The provider's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// Id The provider's ID.
	Id string `json:"id"`

	// Metadata The provider's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The provider's name.
	Name string `json:"name"`

	// UpdatedAt The provider's updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

// AdminFulfillmentSetResponse SUMMARY
type AdminFulfillmentSetResponse struct {
	// FulfillmentSet The fulfillment set's parent.
	FulfillmentSet FulfillmentSetResponse `json:"fulfillment_set"`
}

// AdminFulfillmentSetsDeleteResponse SUMMARY
type AdminFulfillmentSetsDeleteResponse struct {
	// Deleted The fulfillment set's deleted.
	Deleted bool `json:"deleted"`

	// Id The fulfillment set's ID.
	Id string `json:"id"`

	// Object The fulfillment set's object.
	Object string `json:"object"`
}

// AdminGeoZoneResponse The geo zone's geo zones.
type AdminGeoZoneResponse = map[string]interface{}

// AdminPriceSetPriceResponse The price's prices.
type AdminPriceSetPriceResponse struct {
	// Amount The price's amount.
	Amount float32 `json:"amount"`

	// CreatedAt The price's created at.
	CreatedAt string `json:"created_at"`

	// CurrencyCode The price's currency code.
	CurrencyCode string `json:"currency_code"`

	// Id The price's ID.
	Id string `json:"id"`

	// UpdatedAt The price's updated at.
	UpdatedAt string `json:"updated_at"`
}

// AdminProductCategoryListResponse SUMMARY
type AdminProductCategoryListResponse struct {
	// Count The product category's count.
	Count float32 `json:"count"`

	// Limit The product category's limit.
	Limit float32 `json:"limit"`

	// Offset The product category's offset.
	Offset float32 `json:"offset"`

	// ProductCategories The product category's product categories.
	ProductCategories []ProductCategoryResponse `json:"product_categories"`
}

// AdminProductCategoryResponse SUMMARY
type AdminProductCategoryResponse struct {
	// ProductCategory The product category's details.
	ProductCategory ProductCategoryResponse `json:"product_category"`
}

// AdminServiceZoneDeleteResponse SUMMARY
type AdminServiceZoneDeleteResponse struct {
	// Deleted The fulfillment set's deleted.
	Deleted bool `json:"deleted"`

	// Id The fulfillment set's ID.
	Id string `json:"id"`

	// Object The fulfillment set's object.
	Object string `json:"object"`

	// Parent The fulfillment set's parent.
	Parent FulfillmentSetResponse `json:"parent"`
}

// AdminServiceZoneResponse SUMMARY
type AdminServiceZoneResponse struct {
	// ServiceZone The service zone's service zones.
	ServiceZone ServiceZoneResponse `json:"service_zone"`
}

// AdminShippingOptionDeleteResponse SUMMARY
type AdminShippingOptionDeleteResponse struct {
	// Deleted The shipping option's deleted.
	Deleted bool `json:"deleted"`

	// Id The shipping option's ID.
	Id string `json:"id"`

	// Object The shipping option's object.
	Object string `json:"object"`
}

// AdminShippingOptionListResponse SUMMARY
type AdminShippingOptionListResponse struct {
	// Count The shipping option's count.
	Count float32 `json:"count"`

	// Limit The shipping option's limit.
	Limit float32 `json:"limit"`

	// Offset The shipping option's offset.
	Offset float32 `json:"offset"`

	// ShippingOptions The shipping option's shipping options.
	ShippingOptions []AdminShippingOptionResponse `json:"shipping_options"`
}

// AdminShippingOptionResponse The shipping option's details.
type AdminShippingOptionResponse struct {
	// CreatedAt The shipping option's created at.
	CreatedAt time.Time `json:"created_at"`

	// Data The shipping option's data.
	Data map[string]interface{} `json:"data"`

	// DeletedAt The shipping option's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// Id The shipping option's ID.
	Id string `json:"id"`

	// Metadata The shipping option's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The shipping option's name.
	Name      string                               `json:"name"`
	PriceType AdminShippingOptionResponsePriceType `json:"price_type"`

	// Prices The shipping option's prices.
	Prices []AdminPriceSetPriceResponse `json:"prices"`

	// Provider The shipping option's provider.
	Provider AdminFulfillmentProviderResponse `json:"provider"`

	// ProviderId The shipping option's provider id.
	ProviderId string `json:"provider_id"`

	// Rules The shipping option's rules.
	Rules []AdminShippingOptionRuleResponse `json:"rules"`

	// ServiceZone SUMMARY
	ServiceZone AdminServiceZoneResponse `json:"service_zone"`

	// ServiceZoneId The shipping option's service zone id.
	ServiceZoneId string `json:"service_zone_id"`

	// ShippingOptionTypeId The shipping option's shipping option type id.
	ShippingOptionTypeId string `json:"shipping_option_type_id"`

	// ShippingProfile SUMMARY
	ShippingProfile AdminShippingProfileResponse `json:"shipping_profile"`

	// ShippingProfileId The shipping option's shipping profile id.
	ShippingProfileId string `json:"shipping_profile_id"`

	// Type The shipping option's type.
	Type AdminShippingOptionTypeResponse `json:"type"`

	// UpdatedAt The shipping option's updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

// AdminShippingOptionResponsePriceType defines model for AdminShippingOptionResponse.PriceType.
type AdminShippingOptionResponsePriceType string

// AdminShippingOptionRetrieveResponse SUMMARY
type AdminShippingOptionRetrieveResponse struct {
	// ShippingOption The shipping option's details.
	ShippingOption AdminShippingOptionResponse `json:"shipping_option"`
}

// AdminShippingOptionRuleResponse The rule's rules.
type AdminShippingOptionRuleResponse struct {
	// Attribute The rule's attribute.
	Attribute string `json:"attribute"`

	// CreatedAt The rule's created at.
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt The rule's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// Id The rule's ID.
	Id string `json:"id"`

	// Operator The rule's operator.
	Operator string `json:"operator"`

	// ShippingOptionId The rule's shipping option id.
	ShippingOptionId string `json:"shipping_option_id"`

	// UpdatedAt The rule's updated at.
	UpdatedAt time.Time `json:"updated_at"`

	// Value The rule's value.
	Value map[string]interface{} `json:"value"`
}

// AdminShippingOptionTypeResponse The shipping option's type.
type AdminShippingOptionTypeResponse struct {
	// Code The type's code.
	Code string `json:"code"`

	// CreatedAt The type's created at.
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt The type's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// Description The type's description.
	Description string `json:"description"`

	// Id The type's ID.
	Id string `json:"id"`

	// Label The type's label.
	Label string `json:"label"`

	// ShippingOptionId The type's shipping option id.
	ShippingOptionId string `json:"shipping_option_id"`

	// UpdatedAt The type's updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

// AdminShippingProfileDeleteResponse SUMMARY
type AdminShippingProfileDeleteResponse struct {
	// Deleted The shipping profile's deleted.
	Deleted bool `json:"deleted"`

	// Id The shipping profile's ID.
	Id string `json:"id"`

	// Object The shipping profile's object.
	Object string `json:"object"`
}

// AdminShippingProfileResponse SUMMARY
type AdminShippingProfileResponse struct {
	// ShippingProfile The shipping profile's details.
	ShippingProfile ShippingProfileResponse `json:"shipping_profile"`
}

// AdminShippingProfilesResponse SUMMARY
type AdminShippingProfilesResponse struct {
	// Count The shipping profile's count.
	Count float32 `json:"count"`

	// Limit The shipping profile's limit.
	Limit float32 `json:"limit"`

	// Offset The shipping profile's offset.
	Offset float32 `json:"offset"`

	// ShippingProfiles The shipping profile's shipping profiles.
	ShippingProfiles []ShippingProfileResponse `json:"shipping_profiles"`
}

// ApplicationMethod The promotion's application method.
type ApplicationMethod = map[string]interface{}

// Campaign The promotion's campaign.
type Campaign = map[string]interface{}

// CampaignBudget The campaign's budget.
type CampaignBudget struct {
	// Limit The budget's limit.
	Limit *float32            `json:"limit,omitempty"`
	Type  *CampaignBudgetType `json:"type,omitempty"`
}

// CampaignBudgetType defines model for CampaignBudget.Type.
type CampaignBudgetType string

// CreateAddress The cart's shipping address.
type CreateAddress struct {
	// Address1 The shipping address's address 1.
	Address1 *string `json:"address_1,omitempty"`

	// Address2 The shipping address's address 2.
	Address2 *string `json:"address_2,omitempty"`

	// City The shipping address's city.
	City *string `json:"city,omitempty"`

	// Company The shipping address's company.
	Company *string `json:"company,omitempty"`

	// CountryCode The shipping address's country code.
	CountryCode *string `json:"country_code,omitempty"`

	// CustomerId The shipping address's customer id.
	CustomerId *string `json:"customer_id,omitempty"`

	// FirstName The shipping address's first name.
	FirstName *string `json:"first_name,omitempty"`

	// LastName The shipping address's last name.
	LastName *string `json:"last_name,omitempty"`

	// Metadata The shipping address's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Phone The shipping address's phone.
	Phone *string `json:"phone,omitempty"`

	// PostalCode The shipping address's postal code.
	PostalCode *string `json:"postal_code,omitempty"`

	// Province The shipping address's province.
	Province *string `json:"province,omitempty"`
}

// CreateCampaign The promotion's campaign.
type CreateCampaign struct {
	// Budget The campaign's budget.
	Budget *CreateCampaignBudget `json:"budget,omitempty"`

	// CampaignIdentifier The campaign's campaign identifier.
	CampaignIdentifier string `json:"campaign_identifier"`

	// Currency The campaign's currency.
	Currency *string `json:"currency,omitempty"`

	// Description The campaign's description.
	Description *string `json:"description,omitempty"`

	// EndsAt The campaign's ends at.
	EndsAt time.Time `json:"ends_at"`

	// Name The campaign's name.
	Name string `json:"name"`

	// Promotions The campaign's promotions.
	Promotions *[]struct {
		// Id The promotion's ID.
		Id string `json:"id"`
	} `json:"promotions,omitempty"`

	// StartsAt The campaign's starts at.
	StartsAt time.Time `json:"starts_at"`
}

// CreateCampaignBudget The campaign's budget.
type CreateCampaignBudget struct {
	// Limit The budget's limit.
	Limit float32                  `json:"limit"`
	Type  CreateCampaignBudgetType `json:"type"`

	// Used The budget's used.
	Used *float32 `json:"used,omitempty"`
}

// CreateCampaignBudgetType defines model for CreateCampaignBudget.Type.
type CreateCampaignBudgetType string

// CreateCartAddress The cart's billing address.
type CreateCartAddress struct {
	// Address1 The billing address's address 1.
	Address1 *string `json:"address_1,omitempty"`

	// Address2 The billing address's address 2.
	Address2 *string `json:"address_2,omitempty"`

	// City The billing address's city.
	City *string `json:"city,omitempty"`

	// Company The billing address's company.
	Company *string `json:"company,omitempty"`

	// CountryCode The billing address's country code.
	CountryCode *string `json:"country_code,omitempty"`

	// FirstName The billing address's first name.
	FirstName *string `json:"first_name,omitempty"`

	// LastName The billing address's last name.
	LastName *string `json:"last_name,omitempty"`

	// Metadata The billing address's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Phone The billing address's phone.
	Phone *string `json:"phone,omitempty"`

	// PostalCode The billing address's postal code.
	PostalCode *string `json:"postal_code,omitempty"`

	// Province The billing address's province.
	Province *string `json:"province,omitempty"`
}

// CreateCartCreateLineItem The item's items.
type CreateCartCreateLineItem struct {
	// CompareAtUnitPrice The item's compare at unit price.
	CompareAtUnitPrice *string `json:"compare_at_unit_price,omitempty"`

	// IsDiscountable The item's is discountable.
	IsDiscountable *bool `json:"is_discountable,omitempty"`

	// IsGiftcard The item's is giftcard.
	IsGiftcard *bool `json:"is_giftcard,omitempty"`

	// IsTaxInclusive The item's is tax inclusive.
	IsTaxInclusive *bool `json:"is_tax_inclusive,omitempty"`

	// Metadata The item's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// ProductCollection The item's product collection.
	ProductCollection *string `json:"product_collection,omitempty"`

	// ProductDescription The item's product description.
	ProductDescription *string `json:"product_description,omitempty"`

	// ProductHandle The item's product handle.
	ProductHandle *string `json:"product_handle,omitempty"`

	// ProductId The item's product id.
	ProductId *string `json:"product_id,omitempty"`

	// ProductSubtitle The item's product subtitle.
	ProductSubtitle *string `json:"product_subtitle,omitempty"`

	// ProductTitle The item's product title.
	ProductTitle *string `json:"product_title,omitempty"`

	// ProductType The item's product type.
	ProductType *string `json:"product_type,omitempty"`

	// Quantity The item's quantity.
	Quantity string `json:"quantity"`

	// RequiresShipping The item's requires shipping.
	RequiresShipping *bool `json:"requires_shipping,omitempty"`

	// Subtitle The item's subtitle.
	Subtitle *string `json:"subtitle,omitempty"`

	// Thumbnail The item's thumbnail.
	Thumbnail *string `json:"thumbnail,omitempty"`

	// Title The item's title.
	Title *string `json:"title,omitempty"`

	// UnitPrice The item's unit price.
	UnitPrice *string `json:"unit_price,omitempty"`

	// VariantBarcode The item's variant barcode.
	VariantBarcode *string `json:"variant_barcode,omitempty"`

	// VariantId The item's variant id.
	VariantId string `json:"variant_id"`

	// VariantOptionValues The item's variant option values.
	VariantOptionValues *map[string]interface{} `json:"variant_option_values,omitempty"`

	// VariantSku The item's variant sku.
	VariantSku *string `json:"variant_sku,omitempty"`

	// VariantTitle The item's variant title.
	VariantTitle *string `json:"variant_title,omitempty"`
}

// CreateCartWorkflowInput SUMMARY
type CreateCartWorkflowInput struct {
	BillingAddress *CreateCartWorkflowInput_BillingAddress `json:"billing_address,omitempty"`

	// BillingAddressId The cart's billing address id.
	BillingAddressId *string `json:"billing_address_id,omitempty"`

	// CurrencyCode The cart's currency code.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// CustomerId The cart's customer id.
	CustomerId *string `json:"customer_id,omitempty"`

	// Email The cart's email.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Items The cart's items.
	Items *[]CreateCartCreateLineItem `json:"items,omitempty"`

	// Metadata The cart's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// PromoCodes The cart's promo codes.
	PromoCodes *[]string `json:"promo_codes,omitempty"`

	// RegionId The cart's region id.
	RegionId *string `json:"region_id,omitempty"`

	// SalesChannelId The cart's sales channel id.
	SalesChannelId  *string                                  `json:"sales_channel_id,omitempty"`
	ShippingAddress *CreateCartWorkflowInput_ShippingAddress `json:"shipping_address,omitempty"`

	// ShippingAddressId The cart's shipping address id.
	ShippingAddressId *string `json:"shipping_address_id,omitempty"`
}

// CreateCartWorkflowInputBillingAddress0 The cart's billing address.
type CreateCartWorkflowInputBillingAddress0 = string

// CreateCartWorkflowInput_BillingAddress defines model for CreateCartWorkflowInput.BillingAddress.
type CreateCartWorkflowInput_BillingAddress struct {
	union json.RawMessage
}

// CreateCartWorkflowInputShippingAddress0 The cart's shipping address.
type CreateCartWorkflowInputShippingAddress0 = string

// CreateCartWorkflowInput_ShippingAddress defines model for CreateCartWorkflowInput.ShippingAddress.
type CreateCartWorkflowInput_ShippingAddress struct {
	union json.RawMessage
}

// CreateProduct SUMMARY
type CreateProduct struct {
	// CategoryIds The upload's category ids.
	CategoryIds *[]string `json:"category_ids,omitempty"`

	// CollectionId The upload's collection id.
	CollectionId *string `json:"collection_id,omitempty"`

	// Description The upload's description.
	Description *string `json:"description,omitempty"`

	// Discountable The upload's discountable.
	Discountable *bool `json:"discountable,omitempty"`

	// Handle The upload's handle.
	Handle *string `json:"handle,omitempty"`

	// Height The upload's height.
	Height *float32 `json:"height,omitempty"`

	// HsCode The upload's hs code.
	HsCode *string `json:"hs_code,omitempty"`

	// Images The upload's images.
	Images *[]UpsertProductImage `json:"images,omitempty"`

	// IsGiftcard The upload's is giftcard.
	IsGiftcard *bool `json:"is_giftcard,omitempty"`

	// Length The upload's length.
	Length *float32 `json:"length,omitempty"`

	// Material The upload's material.
	Material *string `json:"material,omitempty"`

	// Metadata The upload's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// MidCode The upload's mid code.
	MidCode *string `json:"mid_code,omitempty"`

	// Options The upload's options.
	Options *[]CreateProductOption `json:"options,omitempty"`

	// OriginCountry The upload's origin country.
	OriginCountry *string              `json:"origin_country,omitempty"`
	Status        *CreateProductStatus `json:"status,omitempty"`

	// Subtitle The upload's subtitle.
	Subtitle *string `json:"subtitle,omitempty"`

	// Tags The upload's tags.
	Tags *[]UpsertProductTag `json:"tags,omitempty"`

	// Thumbnail The upload's thumbnail.
	Thumbnail *string `json:"thumbnail,omitempty"`

	// Title The upload's title.
	Title string `json:"title"`

	// TypeId The upload's type id.
	TypeId *string `json:"type_id,omitempty"`

	// Variants The upload's variants.
	Variants *[]CreateProductVariant `json:"variants,omitempty"`

	// Weight The upload's weight.
	Weight *float32 `json:"weight,omitempty"`

	// Width The upload's width.
	Width *float32 `json:"width,omitempty"`
}

// CreateProductStatus defines model for CreateProduct.Status.
type CreateProductStatus string

// CreateProductOption The option's options.
type CreateProductOption struct {
	// ProductId The option's product id.
	ProductId *string `json:"product_id,omitempty"`

	// Title The option's title.
	Title string `json:"title"`

	// Values The option's values.
	Values []string `json:"values"`
}

// CreateProductType The product's type.
type CreateProductType struct {
	// Id The type's ID.
	Id *string `json:"id,omitempty"`

	// Metadata The type's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Value The type's value.
	Value string `json:"value"`
}

// CreateProductVariant The variant's variants.
type CreateProductVariant struct {
	// AllowBackorder The variant's allow backorder.
	AllowBackorder *bool `json:"allow_backorder,omitempty"`

	// Barcode The variant's barcode.
	Barcode *string `json:"barcode,omitempty"`

	// Ean The variant's ean.
	Ean *string `json:"ean,omitempty"`

	// Height The variant's height.
	Height *float32 `json:"height,omitempty"`

	// HsCode The variant's hs code.
	HsCode *string `json:"hs_code,omitempty"`

	// InventoryQuantity The variant's inventory quantity.
	InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

	// Length The variant's length.
	Length *float32 `json:"length,omitempty"`

	// ManageInventory The variant's manage inventory.
	ManageInventory *bool `json:"manage_inventory,omitempty"`

	// Material The variant's material.
	Material *string `json:"material,omitempty"`

	// Metadata The variant's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// MidCode The variant's mid code.
	MidCode *string `json:"mid_code,omitempty"`

	// Options The variant's options.
	Options *map[string]interface{} `json:"options,omitempty"`

	// OriginCountry The variant's origin country.
	OriginCountry *string `json:"origin_country,omitempty"`

	// ProductId The variant's product id.
	ProductId *string `json:"product_id,omitempty"`

	// Sku The variant's sku.
	Sku *string `json:"sku,omitempty"`

	// Title The variant's title.
	Title string `json:"title"`

	// Upc The variant's upc.
	Upc *string `json:"upc,omitempty"`

	// Weight The variant's weight.
	Weight *float32 `json:"weight,omitempty"`

	// Width The variant's width.
	Width *float32 `json:"width,omitempty"`
}

// CreateUser SUMMARY
type CreateUser struct {
	// AvatarUrl The user's avatar url.
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Email The user's email.
	Email openapi_types.Email `json:"email"`

	// FirstName The user's first name.
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name.
	LastName *string `json:"last_name,omitempty"`

	// Metadata The user's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Customer The context's customer.
type Customer struct {
	// Addresses The customer's addresses.
	Addresses *[]CustomerAddress `json:"addresses,omitempty"`

	// CompanyName The customer's company name.
	CompanyName *string             `json:"company_name,omitempty"`
	CreatedAt   *Customer_CreatedAt `json:"created_at,omitempty"`

	// CreatedBy The customer's created by.
	CreatedBy *string `json:"created_by,omitempty"`

	// DefaultBillingAddressId The customer's default billing address id.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty"`

	// DefaultShippingAddressId The customer's default shipping address id.
	DefaultShippingAddressId *string             `json:"default_shipping_address_id,omitempty"`
	DeletedAt                *Customer_DeletedAt `json:"deleted_at,omitempty"`

	// Email The customer's email.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName The customer's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Groups The customer's groups.
	Groups *[]map[string]interface{} `json:"groups,omitempty"`

	// HasAccount The customer's has account.
	HasAccount *bool `json:"has_account,omitempty"`

	// Id The customer's ID.
	Id *string `json:"id,omitempty"`

	// LastName The customer's last name.
	LastName *string `json:"last_name,omitempty"`

	// Metadata The customer's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Phone The customer's phone.
	Phone     *string             `json:"phone,omitempty"`
	UpdatedAt *Customer_UpdatedAt `json:"updated_at,omitempty"`
}

// CustomerCreatedAt0 The customer's created at.
type CustomerCreatedAt0 = string

// CustomerCreatedAt1 The customer's created at.
type CustomerCreatedAt1 = time.Time

// Customer_CreatedAt defines model for Customer.CreatedAt.
type Customer_CreatedAt struct {
	union json.RawMessage
}

// CustomerDeletedAt0 The customer's deleted at.
type CustomerDeletedAt0 = string

// CustomerDeletedAt1 The customer's deleted at.
type CustomerDeletedAt1 = time.Time

// Customer_DeletedAt defines model for Customer.DeletedAt.
type Customer_DeletedAt struct {
	union json.RawMessage
}

// CustomerUpdatedAt0 The customer's updated at.
type CustomerUpdatedAt0 = string

// CustomerUpdatedAt1 The customer's updated at.
type CustomerUpdatedAt1 = time.Time

// Customer_UpdatedAt defines model for Customer.UpdatedAt.
type Customer_UpdatedAt struct {
	union json.RawMessage
}

// CustomerAddress The address's addresses.
type CustomerAddress = map[string]interface{}

// CustomerAddressResponse The address's addresses.
type CustomerAddressResponse struct {
	// Address1 The address's address 1.
	Address1 string `json:"address_1"`

	// Address2 The address's address 2.
	Address2 string `json:"address_2"`

	// AddressName The address's address name.
	AddressName string `json:"address_name"`

	// City The address's city.
	City string `json:"city"`

	// Company The address's company.
	Company string `json:"company"`

	// CountryCode The address's country code.
	CountryCode string `json:"country_code"`

	// CreatedAt The address's created at.
	CreatedAt string `json:"created_at"`

	// CustomerId The address's customer id.
	CustomerId string `json:"customer_id"`

	// FirstName The address's first name.
	FirstName string `json:"first_name"`

	// Id The address's ID.
	Id string `json:"id"`

	// IsDefaultBilling The address's is default billing.
	IsDefaultBilling bool `json:"is_default_billing"`

	// IsDefaultShipping The address's is default shipping.
	IsDefaultShipping bool `json:"is_default_shipping"`

	// LastName The address's last name.
	LastName string `json:"last_name"`

	// Metadata The address's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Phone The address's phone.
	Phone string `json:"phone"`

	// PostalCode The address's postal code.
	PostalCode string `json:"postal_code"`

	// Province The address's province.
	Province string `json:"province"`

	// UpdatedAt The address's updated at.
	UpdatedAt string `json:"updated_at"`
}

// CustomerGroupResponse The group's groups.
type CustomerGroupResponse struct {
	// CreatedAt The group's created at.
	CreatedAt string `json:"created_at"`

	// Customers The group's customers.
	Customers []map[string]interface{} `json:"customers"`

	// Id The group's ID.
	Id string `json:"id"`

	// Metadata The group's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The group's name.
	Name string `json:"name"`

	// UpdatedAt The group's updated at.
	UpdatedAt string `json:"updated_at"`
}

// CustomerResponse The customer's details.
type CustomerResponse struct {
	// Addresses The customer's addresses.
	Addresses []CustomerAddressResponse `json:"addresses"`

	// CompanyName The customer's company name.
	CompanyName string                      `json:"company_name"`
	CreatedAt   *CustomerResponse_CreatedAt `json:"created_at,omitempty"`

	// CreatedBy The customer's created by.
	CreatedBy *string `json:"created_by,omitempty"`

	// DefaultBillingAddressId The customer's default billing address id.
	DefaultBillingAddressId string `json:"default_billing_address_id"`

	// DefaultShippingAddressId The customer's default shipping address id.
	DefaultShippingAddressId string                      `json:"default_shipping_address_id"`
	DeletedAt                *CustomerResponse_DeletedAt `json:"deleted_at,omitempty"`

	// Email The customer's email.
	Email openapi_types.Email `json:"email"`

	// FirstName The customer's first name.
	FirstName string `json:"first_name"`

	// Groups The customer's groups.
	Groups *[]CustomerGroupResponse `json:"groups,omitempty"`

	// HasAccount The customer's has account.
	HasAccount bool `json:"has_account"`

	// Id The customer's ID.
	Id string `json:"id"`

	// LastName The customer's last name.
	LastName string `json:"last_name"`

	// Metadata The customer's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Phone The customer's phone.
	Phone     *string                     `json:"phone,omitempty"`
	UpdatedAt *CustomerResponse_UpdatedAt `json:"updated_at,omitempty"`
}

// CustomerResponseCreatedAt0 The customer's created at.
type CustomerResponseCreatedAt0 = string

// CustomerResponseCreatedAt1 The customer's created at.
type CustomerResponseCreatedAt1 = time.Time

// CustomerResponse_CreatedAt defines model for CustomerResponse.CreatedAt.
type CustomerResponse_CreatedAt struct {
	union json.RawMessage
}

// CustomerResponseDeletedAt0 The customer's deleted at.
type CustomerResponseDeletedAt0 = string

// CustomerResponseDeletedAt1 The customer's deleted at.
type CustomerResponseDeletedAt1 = time.Time

// CustomerResponse_DeletedAt defines model for CustomerResponse.DeletedAt.
type CustomerResponse_DeletedAt struct {
	union json.RawMessage
}

// CustomerResponseUpdatedAt0 The customer's updated at.
type CustomerResponseUpdatedAt0 = string

// CustomerResponseUpdatedAt1 The customer's updated at.
type CustomerResponseUpdatedAt1 = time.Time

// CustomerResponse_UpdatedAt defines model for CustomerResponse.UpdatedAt.
type CustomerResponse_UpdatedAt struct {
	union json.RawMessage
}

// Error defines model for Error.
type Error struct {
	// Code A slug code to indicate the type of the error.
	Code *ErrorCode `json:"code,omitempty"`

	// Message Description of the error that occurred.
	Message *string `json:"message,omitempty"`

	// Type A slug indicating the type of the error.
	Type *ErrorType `json:"type,omitempty"`
}

// ErrorCode A slug code to indicate the type of the error.
type ErrorCode string

// ErrorType A slug indicating the type of the error.
type ErrorType string

// FulfillmentSetResponse The fulfillment set's parent.
type FulfillmentSetResponse struct {
	// CreatedAt The parent's created at.
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt The parent's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// Id The parent's ID.
	Id string `json:"id"`

	// Metadata The parent's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The parent's name.
	Name string `json:"name"`

	// ServiceZones The parent's service zones.
	ServiceZones []ServiceZoneResponse `json:"service_zones"`

	// Type The parent's type.
	Type string `json:"type"`

	// UpdatedAt The parent's updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

// MultipleErrors defines model for MultipleErrors.
type MultipleErrors struct {
	// Errors Array of errors
	Errors  *[]Error `json:"errors,omitempty"`
	Message *string  `json:"message,omitempty"`
}

// ProductCategoryResponse The product category's details.
type ProductCategoryResponse struct {
	// CategoryChildren The product category's category children.
	CategoryChildren []map[string]interface{}          `json:"category_children"`
	CreatedAt        ProductCategoryResponse_CreatedAt `json:"created_at"`

	// Description The product category's description.
	Description string `json:"description"`

	// Handle The product category's handle.
	Handle string `json:"handle"`

	// Id The product category's ID.
	Id string `json:"id"`

	// IsActive The product category's is active.
	IsActive bool `json:"is_active"`

	// IsInternal The product category's is internal.
	IsInternal bool `json:"is_internal"`

	// Name The product category's name.
	Name           string                 `json:"name"`
	ParentCategory map[string]interface{} `json:"parent_category"`

	// ParentCategoryId The product category's parent category id.
	ParentCategoryId string `json:"parent_category_id"`

	// Rank The product category's rank.
	Rank      float32                           `json:"rank"`
	UpdatedAt ProductCategoryResponse_UpdatedAt `json:"updated_at"`
}

// ProductCategoryResponseCreatedAt0 The product category's created at.
type ProductCategoryResponseCreatedAt0 = string

// ProductCategoryResponseCreatedAt1 The product category's created at.
type ProductCategoryResponseCreatedAt1 = time.Time

// ProductCategoryResponse_CreatedAt defines model for ProductCategoryResponse.CreatedAt.
type ProductCategoryResponse_CreatedAt struct {
	union json.RawMessage
}

// ProductCategoryResponseUpdatedAt0 The product category's updated at.
type ProductCategoryResponseUpdatedAt0 = string

// ProductCategoryResponseUpdatedAt1 The product category's updated at.
type ProductCategoryResponseUpdatedAt1 = time.Time

// ProductCategoryResponse_UpdatedAt defines model for ProductCategoryResponse.UpdatedAt.
type ProductCategoryResponse_UpdatedAt struct {
	union json.RawMessage
}

// Promotion The promotion's promotions.
type Promotion struct {
	// Id The promotion's ID.
	Id string `json:"id"`
}

// ServiceZoneResponse The service zone's service zones.
type ServiceZoneResponse struct {
	// CreatedAt The service zone's created at.
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt The service zone's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// GeoZones The service zone's geo zones.
	GeoZones []AdminGeoZoneResponse `json:"geo_zones"`

	// Id The service zone's ID.
	Id string `json:"id"`

	// Metadata The service zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The service zone's name.
	Name string `json:"name"`

	// UpdatedAt The service zone's updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

// ShippingProfileResponse The shipping profile's details.
type ShippingProfileResponse struct {
	// CreatedAt The shipping profile's created at.
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt The shipping profile's deleted at.
	DeletedAt time.Time `json:"deleted_at"`

	// Id The shipping profile's ID.
	Id string `json:"id"`

	// Metadata The shipping profile's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The shipping profile's name.
	Name string `json:"name"`

	// Type The shipping profile's type.
	Type string `json:"type"`

	// UpdatedAt The shipping profile's updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

// StorePostPaymentCollectionsPaymentSessionReq SUMMARY
type StorePostPaymentCollectionsPaymentSessionReq struct {
	// Context The payment collection's context.
	Context *struct {
		// BillingAddress The context's billing address.
		BillingAddress *struct {
			// Address1 The billing address's address 1.
			Address1 *string `json:"address_1,omitempty"`

			// Address2 The billing address's address 2.
			Address2 *string `json:"address_2,omitempty"`

			// City The billing address's city.
			City *string `json:"city,omitempty"`

			// Company The billing address's company.
			Company *string `json:"company,omitempty"`

			// CountryCode The billing address's country code.
			CountryCode *string                                                                        `json:"country_code,omitempty"`
			CreatedAt   *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt `json:"created_at,omitempty"`
			DeletedAt   *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt `json:"deleted_at,omitempty"`

			// Id The billing address's ID.
			Id *string `json:"id,omitempty"`

			// Metadata The billing address's metadata.
			Metadata *map[string]interface{} `json:"metadata,omitempty"`

			// Phone The billing address's phone.
			Phone *string `json:"phone,omitempty"`

			// PostalCode The billing address's postal code.
			PostalCode *string `json:"postal_code,omitempty"`

			// Province The billing address's province.
			Province  *string                                                                        `json:"province,omitempty"`
			UpdatedAt *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt `json:"updated_at,omitempty"`
		} `json:"billing_address,omitempty"`

		// Customer The context's customer.
		Customer *struct {
			// Addresses The customer's addresses.
			Addresses *[]CustomerAddress `json:"addresses,omitempty"`

			// CompanyName The customer's company name.
			CompanyName *string                                                                  `json:"company_name,omitempty"`
			CreatedAt   *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt `json:"created_at,omitempty"`

			// CreatedBy The customer's created by.
			CreatedBy *string `json:"created_by,omitempty"`

			// DefaultBillingAddressId The customer's default billing address id.
			DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty"`

			// DefaultShippingAddressId The customer's default shipping address id.
			DefaultShippingAddressId *string                                                                  `json:"default_shipping_address_id,omitempty"`
			DeletedAt                *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt `json:"deleted_at,omitempty"`

			// Email The customer's email.
			Email *openapi_types.Email `json:"email,omitempty"`

			// FirstName The customer's first name.
			FirstName *string `json:"first_name,omitempty"`

			// Groups The customer's groups.
			Groups *[]map[string]interface{} `json:"groups,omitempty"`

			// HasAccount The customer's has account.
			HasAccount *bool `json:"has_account,omitempty"`

			// Id The customer's ID.
			Id *string `json:"id,omitempty"`

			// LastName The customer's last name.
			LastName *string `json:"last_name,omitempty"`

			// Metadata The customer's metadata.
			Metadata *map[string]interface{} `json:"metadata,omitempty"`

			// Phone The customer's phone.
			Phone     *string                                                                  `json:"phone,omitempty"`
			UpdatedAt *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt `json:"updated_at,omitempty"`
		} `json:"customer,omitempty"`

		// Email The context's email.
		Email *openapi_types.Email `json:"email,omitempty"`

		// Extra The context's extra.
		Extra *map[string]interface{} `json:"extra,omitempty"`

		// ResourceId The context's resource id.
		ResourceId *string `json:"resource_id,omitempty"`
	} `json:"context,omitempty"`

	// Data The payment collection's data.
	Data *map[string]interface{} `json:"data,omitempty"`

	// ProviderId The payment collection's provider id.
	ProviderId string `json:"provider_id"`
}

// StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0 The billing address's created at.
type StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0 = string

// StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1 The billing address's created at.
type StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1 = time.Time

// StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt defines model for StorePostPaymentCollectionsPaymentSessionReq.Context.BillingAddress.CreatedAt.
type StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt struct {
	union json.RawMessage
}

// StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0 The billing address's deleted at.
type StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0 = string

// StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1 The billing address's deleted at.
type StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1 = time.Time

// StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt defines model for StorePostPaymentCollectionsPaymentSessionReq.Context.BillingAddress.DeletedAt.
type StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt struct {
	union json.RawMessage
}

// StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0 The billing address's updated at.
type StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0 = string

// StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1 The billing address's updated at.
type StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1 = time.Time

// StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt defines model for StorePostPaymentCollectionsPaymentSessionReq.Context.BillingAddress.UpdatedAt.
type StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt struct {
	union json.RawMessage
}

// StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0 The customer's created at.
type StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0 = string

// StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1 The customer's created at.
type StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1 = time.Time

// StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt defines model for StorePostPaymentCollectionsPaymentSessionReq.Context.Customer.CreatedAt.
type StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt struct {
	union json.RawMessage
}

// StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0 The customer's deleted at.
type StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0 = string

// StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1 The customer's deleted at.
type StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1 = time.Time

// StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt defines model for StorePostPaymentCollectionsPaymentSessionReq.Context.Customer.DeletedAt.
type StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt struct {
	union json.RawMessage
}

// StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0 The customer's updated at.
type StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0 = string

// StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1 The customer's updated at.
type StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1 = time.Time

// StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt defines model for StorePostPaymentCollectionsPaymentSessionReq.Context.Customer.UpdatedAt.
type StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt struct {
	union json.RawMessage
}

// StoreProductCategoryListResponse SUMMARY
type StoreProductCategoryListResponse struct {
	// Count The product category's count.
	Count float32 `json:"count"`

	// Limit The product category's limit.
	Limit float32 `json:"limit"`

	// Offset The product category's offset.
	Offset float32 `json:"offset"`

	// ProductCategories The product category's product categories.
	ProductCategories []ProductCategoryResponse `json:"product_categories"`
}

// StoreProductCategoryResponse SUMMARY
type StoreProductCategoryResponse struct {
	// ProductCategory The product category's details.
	ProductCategory ProductCategoryResponse `json:"product_category"`
}

// UpdateAddress The cart's shipping address.
type UpdateAddress struct {
	// Address1 The shipping address's address 1.
	Address1 *string `json:"address_1,omitempty"`

	// Address2 The shipping address's address 2.
	Address2 *string `json:"address_2,omitempty"`

	// City The shipping address's city.
	City *string `json:"city,omitempty"`

	// Company The shipping address's company.
	Company *string `json:"company,omitempty"`

	// CountryCode The shipping address's country code.
	CountryCode *string `json:"country_code,omitempty"`

	// CustomerId The shipping address's customer id.
	CustomerId *string `json:"customer_id,omitempty"`

	// FirstName The shipping address's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Id The shipping address's ID.
	Id string `json:"id"`

	// LastName The shipping address's last name.
	LastName *string `json:"last_name,omitempty"`

	// Metadata The shipping address's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Phone The shipping address's phone.
	Phone *string `json:"phone,omitempty"`

	// PostalCode The shipping address's postal code.
	PostalCode *string `json:"postal_code,omitempty"`

	// Province The shipping address's province.
	Province *string `json:"province,omitempty"`
}

// UpdateCartData SUMMARY
type UpdateCartData struct {
	BillingAddress *UpdateCartData_BillingAddress `json:"billing_address,omitempty"`

	// BillingAddressId The cart's billing address id.
	BillingAddressId *string `json:"billing_address_id,omitempty"`

	// CurrencyCode The cart's currency code.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// CustomerId The cart's customer id.
	CustomerId *string `json:"customer_id,omitempty"`

	// Email The cart's email.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Metadata The cart's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// RegionId The cart's region id.
	RegionId *string `json:"region_id,omitempty"`

	// SalesChannelId The cart's sales channel id.
	SalesChannelId  *string                         `json:"sales_channel_id,omitempty"`
	ShippingAddress *UpdateCartData_ShippingAddress `json:"shipping_address,omitempty"`

	// ShippingAddressId The cart's shipping address id.
	ShippingAddressId *string `json:"shipping_address_id,omitempty"`
}

// UpdateCartData_BillingAddress defines model for UpdateCartData.BillingAddress.
type UpdateCartData_BillingAddress struct {
	union json.RawMessage
}

// UpdateCartData_ShippingAddress defines model for UpdateCartData.ShippingAddress.
type UpdateCartData_ShippingAddress struct {
	union json.RawMessage
}

// UpsertProductImage The image's images.
type UpsertProductImage struct {
	// Id The image's ID.
	Id *string `json:"id,omitempty"`

	// Metadata The image's metadata.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Url The image's url.
	Url *string `json:"url,omitempty"`
}

// UpsertProductTag The tag's tags.
type UpsertProductTag struct {
	// Id The tag's ID.
	Id *string `json:"id,omitempty"`

	// Value The tag's value.
	Value *string `json:"value,omitempty"`
}

// N400Error defines model for 400_error.
type N400Error struct {
	union json.RawMessage
}

// N500Error defines model for 500_error.
type N500Error = Error

// DefaultError defines model for default_error.
type DefaultError = Error

// InvalidRequestError defines model for invalid_request_error.
type InvalidRequestError = Error

// InvalidStateError defines model for invalid_state_error.
type InvalidStateError = Error

// NotFoundError defines model for not_found_error.
type NotFoundError = Error

// GetApiKeysJSONBody defines parameters for GetApiKeys.
type GetApiKeysJSONBody = interface{}

// GetApiKeysParams defines parameters for GetApiKeys.
type GetApiKeysParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostApiKeysJSONBody defines parameters for PostApiKeys.
type PostApiKeysJSONBody struct {
	// Title The api key's title.
	Title string                  `json:"title"`
	Type  PostApiKeysJSONBodyType `json:"type"`
}

// PostApiKeysParams defines parameters for PostApiKeys.
type PostApiKeysParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostApiKeysJSONBodyType defines parameters for PostApiKeys.
type PostApiKeysJSONBodyType string

// DeleteApiKeysIdJSONBody defines parameters for DeleteApiKeysId.
type DeleteApiKeysIdJSONBody = interface{}

// DeleteApiKeysIdParams defines parameters for DeleteApiKeysId.
type DeleteApiKeysIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetApiKeysIdJSONBody defines parameters for GetApiKeysId.
type GetApiKeysIdJSONBody = interface{}

// GetApiKeysIdParams defines parameters for GetApiKeysId.
type GetApiKeysIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostApiKeysIdJSONBody defines parameters for PostApiKeysId.
type PostApiKeysIdJSONBody struct {
	// Title The api key's title.
	Title string `json:"title"`
}

// PostApiKeysIdParams defines parameters for PostApiKeysId.
type PostApiKeysIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostApiKeysIdRevokeJSONBody defines parameters for PostApiKeysIdRevoke.
type PostApiKeysIdRevokeJSONBody struct {
	// RevokeIn The api key's revoke in.
	RevokeIn float32 `json:"revoke_in"`
}

// PostApiKeysIdRevokeParams defines parameters for PostApiKeysIdRevoke.
type PostApiKeysIdRevokeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostApiKeysIdSalesChannelsJSONBody defines parameters for PostApiKeysIdSalesChannels.
type PostApiKeysIdSalesChannelsJSONBody struct {
	// Add The api key's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The api key's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostApiKeysIdSalesChannelsParams defines parameters for PostApiKeysIdSalesChannels.
type PostApiKeysIdSalesChannelsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCampaignsJSONBody defines parameters for GetCampaigns.
type GetCampaignsJSONBody = interface{}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCampaignsJSONBody defines parameters for PostCampaigns.
type PostCampaignsJSONBody struct {
	// Budget The campaign's budget.
	Budget struct {
		// Limit The budget's limit.
		Limit float32                         `json:"limit"`
		Type  PostCampaignsJSONBodyBudgetType `json:"type"`
	} `json:"budget"`

	// CampaignIdentifier The campaign's campaign identifier.
	CampaignIdentifier string `json:"campaign_identifier"`

	// Currency The campaign's currency.
	Currency string `json:"currency"`

	// Description The campaign's description.
	Description string `json:"description"`

	// EndsAt The campaign's ends at.
	EndsAt time.Time `json:"ends_at"`

	// Name The campaign's name.
	Name string `json:"name"`

	// Promotions The campaign's promotions.
	Promotions []struct {
		// Id The promotion's ID.
		Id string `json:"id"`
	} `json:"promotions"`

	// StartsAt The campaign's starts at.
	StartsAt time.Time `json:"starts_at"`
}

// PostCampaignsParams defines parameters for PostCampaigns.
type PostCampaignsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCampaignsJSONBodyBudgetType defines parameters for PostCampaigns.
type PostCampaignsJSONBodyBudgetType string

// DeleteCampaignsIdJSONBody defines parameters for DeleteCampaignsId.
type DeleteCampaignsIdJSONBody = interface{}

// DeleteCampaignsIdParams defines parameters for DeleteCampaignsId.
type DeleteCampaignsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCampaignsIdJSONBody defines parameters for GetCampaignsId.
type GetCampaignsIdJSONBody = interface{}

// GetCampaignsIdParams defines parameters for GetCampaignsId.
type GetCampaignsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCampaignsIdJSONBody defines parameters for PostCampaignsId.
type PostCampaignsIdJSONBody struct {
	// Budget The campaign's budget.
	Budget struct {
		// Limit The budget's limit.
		Limit float32                           `json:"limit"`
		Type  PostCampaignsIdJSONBodyBudgetType `json:"type"`
	} `json:"budget"`

	// CampaignIdentifier The campaign's campaign identifier.
	CampaignIdentifier string `json:"campaign_identifier"`

	// Currency The campaign's currency.
	Currency string `json:"currency"`

	// Description The campaign's description.
	Description string `json:"description"`

	// EndsAt The campaign's ends at.
	EndsAt string `json:"ends_at"`

	// Name The campaign's name.
	Name string `json:"name"`

	// Promotions The campaign's promotions.
	Promotions []struct {
		// Id The promotion's ID.
		Id string `json:"id"`
	} `json:"promotions"`

	// StartsAt The campaign's starts at.
	StartsAt string `json:"starts_at"`
}

// PostCampaignsIdParams defines parameters for PostCampaignsId.
type PostCampaignsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCampaignsIdJSONBodyBudgetType defines parameters for PostCampaignsId.
type PostCampaignsIdJSONBodyBudgetType string

// GetCollectionsJSONBody defines parameters for GetCollections.
type GetCollectionsJSONBody = interface{}

// GetCollectionsParams defines parameters for GetCollections.
type GetCollectionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCollectionsJSONBody defines parameters for PostCollections.
type PostCollectionsJSONBody struct {
	// Handle The collection's handle.
	Handle string `json:"handle"`

	// Metadata The collection's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Title The collection's title.
	Title string `json:"title"`
}

// PostCollectionsParams defines parameters for PostCollections.
type PostCollectionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteCollectionsIdJSONBody defines parameters for DeleteCollectionsId.
type DeleteCollectionsIdJSONBody = interface{}

// DeleteCollectionsIdParams defines parameters for DeleteCollectionsId.
type DeleteCollectionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCollectionsIdJSONBody defines parameters for GetCollectionsId.
type GetCollectionsIdJSONBody = interface{}

// GetCollectionsIdParams defines parameters for GetCollectionsId.
type GetCollectionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCollectionsIdJSONBody defines parameters for PostCollectionsId.
type PostCollectionsIdJSONBody struct {
	// Handle The collection's handle.
	Handle string `json:"handle"`

	// Metadata The collection's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Title The collection's title.
	Title string `json:"title"`
}

// PostCollectionsIdParams defines parameters for PostCollectionsId.
type PostCollectionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCollectionsIdProductsJSONBody defines parameters for PostCollectionsIdProducts.
type PostCollectionsIdProductsJSONBody struct {
	// Add The collection's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The collection's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostCollectionsIdProductsParams defines parameters for PostCollectionsIdProducts.
type PostCollectionsIdProductsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCurrenciesJSONBody defines parameters for GetCurrencies.
type GetCurrenciesJSONBody = interface{}

// GetCurrenciesParams defines parameters for GetCurrencies.
type GetCurrenciesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCurrenciesCodeJSONBody defines parameters for GetCurrenciesCode.
type GetCurrenciesCodeJSONBody = interface{}

// GetCurrenciesCodeParams defines parameters for GetCurrenciesCode.
type GetCurrenciesCodeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCustomerGroupsJSONBody defines parameters for GetCustomerGroups.
type GetCustomerGroupsJSONBody = interface{}

// GetCustomerGroupsParams defines parameters for GetCustomerGroups.
type GetCustomerGroupsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomerGroupsJSONBody defines parameters for PostCustomerGroups.
type PostCustomerGroupsJSONBody struct {
	// Name The customer group's name.
	Name string `json:"name"`
}

// PostCustomerGroupsParams defines parameters for PostCustomerGroups.
type PostCustomerGroupsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteCustomerGroupsIdJSONBody defines parameters for DeleteCustomerGroupsId.
type DeleteCustomerGroupsIdJSONBody = interface{}

// DeleteCustomerGroupsIdParams defines parameters for DeleteCustomerGroupsId.
type DeleteCustomerGroupsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCustomerGroupsIdJSONBody defines parameters for GetCustomerGroupsId.
type GetCustomerGroupsIdJSONBody = interface{}

// GetCustomerGroupsIdParams defines parameters for GetCustomerGroupsId.
type GetCustomerGroupsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomerGroupsIdJSONBody defines parameters for PostCustomerGroupsId.
type PostCustomerGroupsIdJSONBody struct {
	// Name The customer group's name.
	Name string `json:"name"`
}

// PostCustomerGroupsIdParams defines parameters for PostCustomerGroupsId.
type PostCustomerGroupsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomerGroupsIdCustomersJSONBody defines parameters for PostCustomerGroupsIdCustomers.
type PostCustomerGroupsIdCustomersJSONBody struct {
	// Add The customer group's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The customer group's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostCustomerGroupsIdCustomersParams defines parameters for PostCustomerGroupsIdCustomers.
type PostCustomerGroupsIdCustomersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCustomersJSONBody defines parameters for GetCustomers.
type GetCustomersJSONBody = interface{}

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomersJSONBody defines parameters for PostCustomers.
type PostCustomersJSONBody struct {
	// CompanyName The customer's company name.
	CompanyName string `json:"company_name"`

	// Email The customer's email.
	Email openapi_types.Email `json:"email"`

	// FirstName The customer's first name.
	FirstName string `json:"first_name"`

	// LastName The customer's last name.
	LastName string `json:"last_name"`

	// Metadata The customer's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Phone The customer's phone.
	Phone string `json:"phone"`
}

// PostCustomersParams defines parameters for PostCustomers.
type PostCustomersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteCustomersIdJSONBody defines parameters for DeleteCustomersId.
type DeleteCustomersIdJSONBody = interface{}

// DeleteCustomersIdParams defines parameters for DeleteCustomersId.
type DeleteCustomersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCustomersIdJSONBody defines parameters for GetCustomersId.
type GetCustomersIdJSONBody = interface{}

// GetCustomersIdParams defines parameters for GetCustomersId.
type GetCustomersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomersIdJSONBody defines parameters for PostCustomersId.
type PostCustomersIdJSONBody struct {
	// CompanyName The customer's company name.
	CompanyName string `json:"company_name"`

	// Email The customer's email.
	Email openapi_types.Email `json:"email"`

	// FirstName The customer's first name.
	FirstName string `json:"first_name"`

	// LastName The customer's last name.
	LastName string `json:"last_name"`

	// Metadata The customer's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Phone The customer's phone.
	Phone string `json:"phone"`
}

// PostCustomersIdParams defines parameters for PostCustomersId.
type PostCustomersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCustomersIdAddressesJSONBody defines parameters for GetCustomersIdAddresses.
type GetCustomersIdAddressesJSONBody = interface{}

// GetCustomersIdAddressesParams defines parameters for GetCustomersIdAddresses.
type GetCustomersIdAddressesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomersIdAddressesJSONBody defines parameters for PostCustomersIdAddresses.
type PostCustomersIdAddressesJSONBody struct {
	// Address1 The customer's address 1.
	Address1 string `json:"address_1"`

	// Address2 The customer's address 2.
	Address2 string `json:"address_2"`

	// AddressName The customer's address name.
	AddressName string `json:"address_name"`

	// City The customer's city.
	City string `json:"city"`

	// Company The customer's company.
	Company string `json:"company"`

	// CountryCode The customer's country code.
	CountryCode string `json:"country_code"`

	// FirstName The customer's first name.
	FirstName string `json:"first_name"`

	// IsDefaultBilling The customer's is default billing.
	IsDefaultBilling bool `json:"is_default_billing"`

	// IsDefaultShipping The customer's is default shipping.
	IsDefaultShipping bool `json:"is_default_shipping"`

	// LastName The customer's last name.
	LastName string `json:"last_name"`

	// Metadata The customer's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Phone The customer's phone.
	Phone string `json:"phone"`

	// PostalCode The customer's postal code.
	PostalCode string `json:"postal_code"`

	// Province The customer's province.
	Province string `json:"province"`
}

// PostCustomersIdAddressesParams defines parameters for PostCustomersIdAddresses.
type PostCustomersIdAddressesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteCustomersIdAddressesAddressIdJSONBody defines parameters for DeleteCustomersIdAddressesAddressId.
type DeleteCustomersIdAddressesAddressIdJSONBody = interface{}

// DeleteCustomersIdAddressesAddressIdParams defines parameters for DeleteCustomersIdAddressesAddressId.
type DeleteCustomersIdAddressesAddressIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetCustomersIdAddressesAddressIdJSONBody defines parameters for GetCustomersIdAddressesAddressId.
type GetCustomersIdAddressesAddressIdJSONBody = interface{}

// GetCustomersIdAddressesAddressIdParams defines parameters for GetCustomersIdAddressesAddressId.
type GetCustomersIdAddressesAddressIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostCustomersIdAddressesAddressIdJSONBody defines parameters for PostCustomersIdAddressesAddressId.
type PostCustomersIdAddressesAddressIdJSONBody struct {
	// Address1 The customer's address 1.
	Address1 string `json:"address_1"`

	// Address2 The customer's address 2.
	Address2 string `json:"address_2"`

	// AddressName The customer's address name.
	AddressName string `json:"address_name"`

	// City The customer's city.
	City string `json:"city"`

	// Company The customer's company.
	Company string `json:"company"`

	// CountryCode The customer's country code.
	CountryCode string `json:"country_code"`

	// FirstName The customer's first name.
	FirstName string `json:"first_name"`

	// IsDefaultBilling The customer's is default billing.
	IsDefaultBilling bool `json:"is_default_billing"`

	// IsDefaultShipping The customer's is default shipping.
	IsDefaultShipping bool `json:"is_default_shipping"`

	// LastName The customer's last name.
	LastName string `json:"last_name"`

	// Metadata The customer's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Phone The customer's phone.
	Phone string `json:"phone"`

	// PostalCode The customer's postal code.
	PostalCode string `json:"postal_code"`

	// Province The customer's province.
	Province string `json:"province"`
}

// PostCustomersIdAddressesAddressIdParams defines parameters for PostCustomersIdAddressesAddressId.
type PostCustomersIdAddressesAddressIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetDraftOrdersJSONBody defines parameters for GetDraftOrders.
type GetDraftOrdersJSONBody = interface{}

// GetDraftOrdersParams defines parameters for GetDraftOrders.
type GetDraftOrdersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostDraftOrdersJSONBody defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBody struct {
	// BillingAddress The draft order's billing address.
	BillingAddress struct {
		// Address1 The billing address's address 1.
		Address1 string `json:"address_1"`

		// Address2 The billing address's address 2.
		Address2 string `json:"address_2"`

		// City The billing address's city.
		City string `json:"city"`

		// Company The billing address's company.
		Company string `json:"company"`

		// CountryCode The billing address's country code.
		CountryCode string `json:"country_code"`

		// FirstName The billing address's first name.
		FirstName string `json:"first_name"`

		// LastName The billing address's last name.
		LastName string `json:"last_name"`

		// Metadata The billing address's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// Phone The billing address's phone.
		Phone string `json:"phone"`

		// PostalCode The billing address's postal code.
		PostalCode string `json:"postal_code"`

		// Province The billing address's province.
		Province string `json:"province"`
	} `json:"billing_address"`

	// CurrencyCode The draft order's currency code.
	CurrencyCode string `json:"currency_code"`

	// CustomerId The draft order's customer id.
	CustomerId string `json:"customer_id"`

	// Email The draft order's email.
	Email openapi_types.Email `json:"email"`

	// Items The draft order's items.
	Items []struct {
		// Barcode The item's barcode.
		Barcode string `json:"barcode"`

		// Metadata The item's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// Quantity The item's quantity.
		Quantity float32 `json:"quantity"`

		// Sku The item's sku.
		Sku string `json:"sku"`

		// Title The item's title.
		Title     string                                  `json:"title"`
		UnitPrice PostDraftOrdersJSONBody_Items_UnitPrice `json:"unit_price"`

		// VariantId The item's variant id.
		VariantId string `json:"variant_id"`
	} `json:"items"`

	// Metadata The draft order's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// NoNotificationOrder The draft order's no notification order.
	NoNotificationOrder bool `json:"no_notification_order"`

	// PromoCodes The draft order's promo codes.
	PromoCodes []string `json:"promo_codes"`

	// RegionId The draft order's region id.
	RegionId string `json:"region_id"`

	// SalesChannelId The draft order's sales channel id.
	SalesChannelId string `json:"sales_channel_id"`

	// ShippingAddress The draft order's shipping address.
	ShippingAddress struct {
		// Address1 The shipping address's address 1.
		Address1 string `json:"address_1"`

		// Address2 The shipping address's address 2.
		Address2 string `json:"address_2"`

		// City The shipping address's city.
		City string `json:"city"`

		// Company The shipping address's company.
		Company string `json:"company"`

		// CountryCode The shipping address's country code.
		CountryCode string `json:"country_code"`

		// FirstName The shipping address's first name.
		FirstName string `json:"first_name"`

		// LastName The shipping address's last name.
		LastName string `json:"last_name"`

		// Metadata The shipping address's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// Phone The shipping address's phone.
		Phone string `json:"phone"`

		// PostalCode The shipping address's postal code.
		PostalCode string `json:"postal_code"`

		// Province The shipping address's province.
		Province string `json:"province"`
	} `json:"shipping_address"`

	// ShippingMethods The draft order's shipping methods.
	ShippingMethods []struct {
		Amount PostDraftOrdersJSONBody_ShippingMethods_Amount `json:"amount"`

		// Data The shipping method's data.
		Data map[string]interface{} `json:"data"`

		// Name The shipping method's name.
		Name string `json:"name"`

		// OptionId The shipping method's option id.
		OptionId string `json:"option_id"`

		// OrderId The shipping method's order id.
		OrderId string `json:"order_id"`

		// ShippingMethodId The shipping method's shipping method id.
		ShippingMethodId string `json:"shipping_method_id"`
	} `json:"shipping_methods"`

	// Status The draft order's status.
	Status bool `json:"status"`
}

// PostDraftOrdersParams defines parameters for PostDraftOrders.
type PostDraftOrdersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostDraftOrdersJSONBodyItemsUnitPrice0 defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBodyItemsUnitPrice0 = string

// PostDraftOrdersJSONBodyItemsUnitPrice1 defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBodyItemsUnitPrice1 = float32

// PostDraftOrdersJSONBodyItemsUnitPrice2 defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBodyItemsUnitPrice2 struct {
	// Precision The unit price's precision.
	Precision float32 `json:"precision"`

	// Value The unit price's value.
	Value string `json:"value"`
}

// PostDraftOrdersJSONBody_Items_UnitPrice defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBody_Items_UnitPrice struct {
	union json.RawMessage
}

// PostDraftOrdersJSONBodyShippingMethodsAmount0 defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBodyShippingMethodsAmount0 = string

// PostDraftOrdersJSONBodyShippingMethodsAmount1 defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBodyShippingMethodsAmount1 = float32

// PostDraftOrdersJSONBodyShippingMethodsAmount2 defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBodyShippingMethodsAmount2 struct {
	// Precision The amount's precision.
	Precision float32 `json:"precision"`

	// Value The amount's value.
	Value string `json:"value"`
}

// PostDraftOrdersJSONBody_ShippingMethods_Amount defines parameters for PostDraftOrders.
type PostDraftOrdersJSONBody_ShippingMethods_Amount struct {
	union json.RawMessage
}

// GetDraftOrdersIdJSONBody defines parameters for GetDraftOrdersId.
type GetDraftOrdersIdJSONBody = interface{}

// GetDraftOrdersIdParams defines parameters for GetDraftOrdersId.
type GetDraftOrdersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetFulfillmentProvidersJSONBody defines parameters for GetFulfillmentProviders.
type GetFulfillmentProvidersJSONBody struct {
	// Fields The fulfillment provider's fields.
	Fields string `json:"fields"`
}

// GetFulfillmentProvidersParams defines parameters for GetFulfillmentProviders.
type GetFulfillmentProvidersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteFulfillmentSetsIdJSONBody defines parameters for DeleteFulfillmentSetsId.
type DeleteFulfillmentSetsIdJSONBody = interface{}

// DeleteFulfillmentSetsIdParams defines parameters for DeleteFulfillmentSetsId.
type DeleteFulfillmentSetsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostFulfillmentSetsIdServiceZonesJSONBody defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesJSONBody struct {
	// GeoZones The fulfillment set's geo zones.
	GeoZones []PostFulfillmentSetsIdServiceZonesJSONBody_GeoZones_Item `json:"geo_zones"`

	// Name The fulfillment set's name.
	Name string `json:"name"`
}

// PostFulfillmentSetsIdServiceZonesParams defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones0 defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones0 struct {
	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones1 defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones1 struct {
	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// ProvinceCode The geo zone's province code.
	ProvinceCode string `json:"province_code"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones2 defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones2 struct {
	// City The geo zone's city.
	City string `json:"city"`

	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// ProvinceCode The geo zone's province code.
	ProvinceCode string `json:"province_code"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones3 defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesJSONBodyGeoZones3 struct {
	// City The geo zone's city.
	City string `json:"city"`

	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// PostalExpression The geo zone's postal expression.
	PostalExpression map[string]interface{} `json:"postal_expression"`

	// ProvinceCode The geo zone's province code.
	ProvinceCode string `json:"province_code"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesJSONBody_GeoZones_Item defines parameters for PostFulfillmentSetsIdServiceZones.
type PostFulfillmentSetsIdServiceZonesJSONBody_GeoZones_Item struct {
	union json.RawMessage
}

// DeleteFulfillmentSetsIdServiceZonesZoneIdJSONBody defines parameters for DeleteFulfillmentSetsIdServiceZonesZoneId.
type DeleteFulfillmentSetsIdServiceZonesZoneIdJSONBody = interface{}

// DeleteFulfillmentSetsIdServiceZonesZoneIdParams defines parameters for DeleteFulfillmentSetsIdServiceZonesZoneId.
type DeleteFulfillmentSetsIdServiceZonesZoneIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetFulfillmentSetsIdServiceZonesZoneIdJSONBody defines parameters for GetFulfillmentSetsIdServiceZonesZoneId.
type GetFulfillmentSetsIdServiceZonesZoneIdJSONBody = interface{}

// GetFulfillmentSetsIdServiceZonesZoneIdParams defines parameters for GetFulfillmentSetsIdServiceZonesZoneId.
type GetFulfillmentSetsIdServiceZonesZoneIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdJSONBody defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONBody struct {
	// GeoZones The fulfillment set's geo zones.
	GeoZones []PostFulfillmentSetsIdServiceZonesZoneIdJSONBody_GeoZones_Item `json:"geo_zones"`

	// Name The fulfillment set's name.
	Name string `json:"name"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdParams defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones0 defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones0 struct {
	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Id The geo zone's ID.
	Id string `json:"id"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones1 defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones1 struct {
	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Id The geo zone's ID.
	Id string `json:"id"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// ProvinceCode The geo zone's province code.
	ProvinceCode string `json:"province_code"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones2 defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones2 struct {
	// City The geo zone's city.
	City string `json:"city"`

	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Id The geo zone's ID.
	Id string `json:"id"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// ProvinceCode The geo zone's province code.
	ProvinceCode string `json:"province_code"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones3 defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONBodyGeoZones3 struct {
	// City The geo zone's city.
	City string `json:"city"`

	// CountryCode The geo zone's country code.
	CountryCode string `json:"country_code"`

	// Id The geo zone's ID.
	Id string `json:"id"`

	// Metadata The geo zone's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// PostalExpression The geo zone's postal expression.
	PostalExpression map[string]interface{} `json:"postal_expression"`

	// ProvinceCode The geo zone's province code.
	ProvinceCode string `json:"province_code"`

	// Type The geo zone's type.
	Type string `json:"type"`
}

// PostFulfillmentSetsIdServiceZonesZoneIdJSONBody_GeoZones_Item defines parameters for PostFulfillmentSetsIdServiceZonesZoneId.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONBody_GeoZones_Item struct {
	union json.RawMessage
}

// PostFulfillmentsJSONBody defines parameters for PostFulfillments.
type PostFulfillmentsJSONBody struct {
	// DeliveryAddress The fulfillment's delivery address.
	DeliveryAddress struct {
		// Address1 The delivery address's address 1.
		Address1 string `json:"address_1"`

		// Address2 The delivery address's address 2.
		Address2 string `json:"address_2"`

		// City The delivery address's city.
		City string `json:"city"`

		// Company The delivery address's company.
		Company string `json:"company"`

		// CountryCode The delivery address's country code.
		CountryCode string `json:"country_code"`

		// FirstName The delivery address's first name.
		FirstName string `json:"first_name"`

		// LastName The delivery address's last name.
		LastName string `json:"last_name"`

		// Metadata The delivery address's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// Phone The delivery address's phone.
		Phone string `json:"phone"`

		// PostalCode The delivery address's postal code.
		PostalCode string `json:"postal_code"`

		// Province The delivery address's province.
		Province string `json:"province"`
	} `json:"delivery_address"`

	// Items The fulfillment's items.
	Items []struct {
		// Barcode The item's barcode.
		Barcode string `json:"barcode"`

		// InventoryItemId The item's inventory item id.
		InventoryItemId string `json:"inventory_item_id"`

		// LineItemId The item's line item id.
		LineItemId string `json:"line_item_id"`

		// Quantity The item's quantity.
		Quantity float32 `json:"quantity"`

		// Sku The item's sku.
		Sku string `json:"sku"`

		// Title The item's title.
		Title string `json:"title"`
	} `json:"items"`

	// Labels The fulfillment's labels.
	Labels []struct {
		// LabelUrl The label's label url.
		LabelUrl string `json:"label_url"`

		// TrackingNumber The label's tracking number.
		TrackingNumber string `json:"tracking_number"`

		// TrackingUrl The label's tracking url.
		TrackingUrl string `json:"tracking_url"`
	} `json:"labels"`

	// LocationId The fulfillment's location id.
	LocationId string `json:"location_id"`

	// Metadata The fulfillment's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Order The fulfillment's order.
	Order map[string]interface{} `json:"order"`

	// ProviderId The fulfillment's provider id.
	ProviderId string `json:"provider_id"`
}

// PostFulfillmentsParams defines parameters for PostFulfillments.
type PostFulfillmentsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostFulfillmentsIdCancelJSONBody defines parameters for PostFulfillmentsIdCancel.
type PostFulfillmentsIdCancelJSONBody = map[string]interface{}

// PostFulfillmentsIdCancelParams defines parameters for PostFulfillmentsIdCancel.
type PostFulfillmentsIdCancelParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostFulfillmentsIdShipmentJSONBody defines parameters for PostFulfillmentsIdShipment.
type PostFulfillmentsIdShipmentJSONBody struct {
	// Labels The fulfillment's labels.
	Labels []struct {
		// LabelUrl The label's label url.
		LabelUrl string `json:"label_url"`

		// TrackingNumber The label's tracking number.
		TrackingNumber string `json:"tracking_number"`

		// TrackingUrl The label's tracking url.
		TrackingUrl string `json:"tracking_url"`
	} `json:"labels"`
}

// PostFulfillmentsIdShipmentParams defines parameters for PostFulfillmentsIdShipment.
type PostFulfillmentsIdShipmentParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetInventoryItemsJSONBody defines parameters for GetInventoryItems.
type GetInventoryItemsJSONBody = interface{}

// GetInventoryItemsParams defines parameters for GetInventoryItems.
type GetInventoryItemsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInventoryItemsJSONBody defines parameters for PostInventoryItems.
type PostInventoryItemsJSONBody struct {
	// Description The inventory item's description.
	Description string `json:"description"`

	// Height The inventory item's height.
	Height float32 `json:"height"`

	// HsCode The inventory item's hs code.
	HsCode string `json:"hs_code"`

	// Length The inventory item's length.
	Length float32 `json:"length"`

	// Material The inventory item's material.
	Material string `json:"material"`

	// Metadata The inventory item's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// MidCode The inventory item's mid code.
	MidCode string `json:"mid_code"`

	// OriginCountry The inventory item's origin country.
	OriginCountry string `json:"origin_country"`

	// RequiresShipping The inventory item's requires shipping.
	RequiresShipping bool `json:"requires_shipping"`

	// Sku The inventory item's sku.
	Sku string `json:"sku"`

	// Thumbnail The inventory item's thumbnail.
	Thumbnail string `json:"thumbnail"`

	// Title The inventory item's title.
	Title string `json:"title"`

	// Weight The inventory item's weight.
	Weight float32 `json:"weight"`

	// Width The inventory item's width.
	Width float32 `json:"width"`
}

// PostInventoryItemsParams defines parameters for PostInventoryItems.
type PostInventoryItemsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteInventoryItemsIdJSONBody defines parameters for DeleteInventoryItemsId.
type DeleteInventoryItemsIdJSONBody = interface{}

// DeleteInventoryItemsIdParams defines parameters for DeleteInventoryItemsId.
type DeleteInventoryItemsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetInventoryItemsIdJSONBody defines parameters for GetInventoryItemsId.
type GetInventoryItemsIdJSONBody struct {
	// Fields The inventory item's fields.
	Fields string `json:"fields"`
}

// GetInventoryItemsIdParams defines parameters for GetInventoryItemsId.
type GetInventoryItemsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInventoryItemsIdJSONBody defines parameters for PostInventoryItemsId.
type PostInventoryItemsIdJSONBody struct {
	// Description The inventory item's description.
	Description string `json:"description"`

	// Height The inventory item's height.
	Height float32 `json:"height"`

	// HsCode The inventory item's hs code.
	HsCode string `json:"hs_code"`

	// Length The inventory item's length.
	Length float32 `json:"length"`

	// Material The inventory item's material.
	Material string `json:"material"`

	// Metadata The inventory item's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// MidCode The inventory item's mid code.
	MidCode string `json:"mid_code"`

	// OriginCountry The inventory item's origin country.
	OriginCountry string `json:"origin_country"`

	// RequiresShipping The inventory item's requires shipping.
	RequiresShipping bool `json:"requires_shipping"`

	// Sku The inventory item's sku.
	Sku string `json:"sku"`

	// Thumbnail The inventory item's thumbnail.
	Thumbnail string `json:"thumbnail"`

	// Title The inventory item's title.
	Title string `json:"title"`

	// Weight The inventory item's weight.
	Weight float32 `json:"weight"`

	// Width The inventory item's width.
	Width float32 `json:"width"`
}

// PostInventoryItemsIdParams defines parameters for PostInventoryItemsId.
type PostInventoryItemsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetInventoryItemsIdLocationLevelsJSONBody defines parameters for GetInventoryItemsIdLocationLevels.
type GetInventoryItemsIdLocationLevelsJSONBody = interface{}

// GetInventoryItemsIdLocationLevelsParams defines parameters for GetInventoryItemsIdLocationLevels.
type GetInventoryItemsIdLocationLevelsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInventoryItemsIdLocationLevelsJSONBody defines parameters for PostInventoryItemsIdLocationLevels.
type PostInventoryItemsIdLocationLevelsJSONBody struct {
	// IncomingQuantity The inventory item's incoming quantity.
	IncomingQuantity float32 `json:"incoming_quantity"`

	// LocationId The inventory item's location id.
	LocationId string `json:"location_id"`

	// StockedQuantity The inventory item's stocked quantity.
	StockedQuantity float32 `json:"stocked_quantity"`
}

// PostInventoryItemsIdLocationLevelsParams defines parameters for PostInventoryItemsIdLocationLevels.
type PostInventoryItemsIdLocationLevelsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInventoryItemsIdLocationLevelsBatchJSONBody defines parameters for PostInventoryItemsIdLocationLevelsBatch.
type PostInventoryItemsIdLocationLevelsBatchJSONBody struct {
	// Create The inventory item's create.
	Create *[]struct {
		// IncomingQuantity The create's incoming quantity.
		IncomingQuantity float32 `json:"incoming_quantity"`

		// LocationId The create's location id.
		LocationId string `json:"location_id"`

		// StockedQuantity The create's stocked quantity.
		StockedQuantity float32 `json:"stocked_quantity"`
	} `json:"create,omitempty"`

	// Delete The inventory item's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The inventory item's update.
	Update *[]struct {
		// IncomingQuantity The update's incoming quantity.
		IncomingQuantity float32 `json:"incoming_quantity"`

		// StockedQuantity The update's stocked quantity.
		StockedQuantity float32 `json:"stocked_quantity"`
	} `json:"update,omitempty"`
}

// PostInventoryItemsIdLocationLevelsBatchParams defines parameters for PostInventoryItemsIdLocationLevelsBatch.
type PostInventoryItemsIdLocationLevelsBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteInventoryItemsIdLocationLevelsLocationIdJSONBody defines parameters for DeleteInventoryItemsIdLocationLevelsLocationId.
type DeleteInventoryItemsIdLocationLevelsLocationIdJSONBody = interface{}

// DeleteInventoryItemsIdLocationLevelsLocationIdParams defines parameters for DeleteInventoryItemsIdLocationLevelsLocationId.
type DeleteInventoryItemsIdLocationLevelsLocationIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInventoryItemsIdLocationLevelsLocationIdJSONBody defines parameters for PostInventoryItemsIdLocationLevelsLocationId.
type PostInventoryItemsIdLocationLevelsLocationIdJSONBody struct {
	// IncomingQuantity The inventory item's incoming quantity.
	IncomingQuantity float32 `json:"incoming_quantity"`

	// StockedQuantity The inventory item's stocked quantity.
	StockedQuantity float32 `json:"stocked_quantity"`
}

// PostInventoryItemsIdLocationLevelsLocationIdParams defines parameters for PostInventoryItemsIdLocationLevelsLocationId.
type PostInventoryItemsIdLocationLevelsLocationIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetInvitesJSONBody defines parameters for GetInvites.
type GetInvitesJSONBody = interface{}

// GetInvitesParams defines parameters for GetInvites.
type GetInvitesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInvitesJSONBody defines parameters for PostInvites.
type PostInvitesJSONBody struct {
	// Email The invite's email.
	Email openapi_types.Email `json:"email"`
}

// PostInvitesParams defines parameters for PostInvites.
type PostInvitesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInvitesAcceptJSONBody defines parameters for PostInvitesAccept.
type PostInvitesAcceptJSONBody struct {
	// Email The invite's email.
	Email openapi_types.Email `json:"email"`

	// FirstName The invite's first name.
	FirstName string `json:"first_name"`

	// LastName The invite's last name.
	LastName string `json:"last_name"`
}

// PostInvitesAcceptParams defines parameters for PostInvitesAccept.
type PostInvitesAcceptParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteInvitesIdJSONBody defines parameters for DeleteInvitesId.
type DeleteInvitesIdJSONBody = interface{}

// DeleteInvitesIdParams defines parameters for DeleteInvitesId.
type DeleteInvitesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetInvitesIdJSONBody defines parameters for GetInvitesId.
type GetInvitesIdJSONBody = interface{}

// GetInvitesIdParams defines parameters for GetInvitesId.
type GetInvitesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostInvitesIdResendJSONBody defines parameters for PostInvitesIdResend.
type PostInvitesIdResendJSONBody = interface{}

// PostInvitesIdResendParams defines parameters for PostInvitesIdResend.
type PostInvitesIdResendParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetOrdersJSONBody defines parameters for GetOrders.
type GetOrdersJSONBody = interface{}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetOrdersIdJSONBody defines parameters for GetOrdersId.
type GetOrdersIdJSONBody = interface{}

// GetOrdersIdParams defines parameters for GetOrdersId.
type GetOrdersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPaymentsJSONBody defines parameters for GetPayments.
type GetPaymentsJSONBody = interface{}

// GetPaymentsParams defines parameters for GetPayments.
type GetPaymentsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPaymentsPaymentProvidersJSONBody defines parameters for GetPaymentsPaymentProviders.
type GetPaymentsPaymentProvidersJSONBody = interface{}

// GetPaymentsPaymentProvidersParams defines parameters for GetPaymentsPaymentProviders.
type GetPaymentsPaymentProvidersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPaymentsIdJSONBody defines parameters for GetPaymentsId.
type GetPaymentsIdJSONBody struct {
	// Fields The payment's fields.
	Fields string `json:"fields"`
}

// GetPaymentsIdParams defines parameters for GetPaymentsId.
type GetPaymentsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPaymentsIdCaptureJSONBody defines parameters for PostPaymentsIdCapture.
type PostPaymentsIdCaptureJSONBody struct {
	// Amount The payment's amount.
	Amount float32 `json:"amount"`
}

// PostPaymentsIdCaptureParams defines parameters for PostPaymentsIdCapture.
type PostPaymentsIdCaptureParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPaymentsIdRefundJSONBody defines parameters for PostPaymentsIdRefund.
type PostPaymentsIdRefundJSONBody struct {
	// Amount The payment's amount.
	Amount float32 `json:"amount"`
}

// PostPaymentsIdRefundParams defines parameters for PostPaymentsIdRefund.
type PostPaymentsIdRefundParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPriceListsJSONBody defines parameters for GetPriceLists.
type GetPriceListsJSONBody = interface{}

// GetPriceListsParams defines parameters for GetPriceLists.
type GetPriceListsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPriceListsJSONBody defines parameters for PostPriceLists.
type PostPriceListsJSONBody struct {
	// Description The price list's description.
	Description string `json:"description"`

	// EndsAt The price list's ends at.
	EndsAt string `json:"ends_at"`

	// Prices The price list's prices.
	Prices []struct {
		// Amount The price's amount.
		Amount float32 `json:"amount"`

		// CurrencyCode The price's currency code.
		CurrencyCode string `json:"currency_code"`

		// MaxQuantity The price's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// MinQuantity The price's min quantity.
		MinQuantity float32 `json:"min_quantity"`

		// Rules The price's rules.
		Rules map[string]interface{} `json:"rules"`

		// VariantId The price's variant id.
		VariantId string `json:"variant_id"`
	} `json:"prices"`

	// Rules The price list's rules.
	Rules map[string]interface{} `json:"rules"`

	// StartsAt The price list's starts at.
	StartsAt string                       `json:"starts_at"`
	Status   PostPriceListsJSONBodyStatus `json:"status"`

	// Title The price list's title.
	Title string                     `json:"title"`
	Type  PostPriceListsJSONBodyType `json:"type"`
}

// PostPriceListsParams defines parameters for PostPriceLists.
type PostPriceListsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPriceListsJSONBodyStatus defines parameters for PostPriceLists.
type PostPriceListsJSONBodyStatus string

// PostPriceListsJSONBodyType defines parameters for PostPriceLists.
type PostPriceListsJSONBodyType string

// DeletePriceListsIdJSONBody defines parameters for DeletePriceListsId.
type DeletePriceListsIdJSONBody = interface{}

// DeletePriceListsIdParams defines parameters for DeletePriceListsId.
type DeletePriceListsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPriceListsIdJSONBody defines parameters for GetPriceListsId.
type GetPriceListsIdJSONBody = interface{}

// GetPriceListsIdParams defines parameters for GetPriceListsId.
type GetPriceListsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPriceListsIdJSONBody defines parameters for PostPriceListsId.
type PostPriceListsIdJSONBody struct {
	// Description The price list's description.
	Description string `json:"description"`

	// EndsAt The price list's ends at.
	EndsAt string `json:"ends_at"`

	// Rules The price list's rules.
	Rules map[string]interface{} `json:"rules"`

	// StartsAt The price list's starts at.
	StartsAt string                         `json:"starts_at"`
	Status   PostPriceListsIdJSONBodyStatus `json:"status"`

	// Title The price list's title.
	Title string                       `json:"title"`
	Type  PostPriceListsIdJSONBodyType `json:"type"`
}

// PostPriceListsIdParams defines parameters for PostPriceListsId.
type PostPriceListsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPriceListsIdJSONBodyStatus defines parameters for PostPriceListsId.
type PostPriceListsIdJSONBodyStatus string

// PostPriceListsIdJSONBodyType defines parameters for PostPriceListsId.
type PostPriceListsIdJSONBodyType string

// PostPriceListsIdPricesBatchJSONBody defines parameters for PostPriceListsIdPricesBatch.
type PostPriceListsIdPricesBatchJSONBody struct {
	// Create The price list's create.
	Create *[]struct {
		// Amount The create's amount.
		Amount float32 `json:"amount"`

		// CurrencyCode The create's currency code.
		CurrencyCode string `json:"currency_code"`

		// MaxQuantity The create's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// MinQuantity The create's min quantity.
		MinQuantity float32 `json:"min_quantity"`

		// Rules The create's rules.
		Rules map[string]interface{} `json:"rules"`

		// VariantId The create's variant id.
		VariantId string `json:"variant_id"`
	} `json:"create,omitempty"`

	// Delete The price list's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The price list's update.
	Update *[]struct {
		// Amount The update's amount.
		Amount float32 `json:"amount"`

		// CurrencyCode The update's currency code.
		CurrencyCode string `json:"currency_code"`

		// Id The update's ID.
		Id string `json:"id"`

		// MaxQuantity The update's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// MinQuantity The update's min quantity.
		MinQuantity float32 `json:"min_quantity"`

		// Rules The update's rules.
		Rules map[string]interface{} `json:"rules"`

		// VariantId The update's variant id.
		VariantId string `json:"variant_id"`
	} `json:"update,omitempty"`
}

// PostPriceListsIdPricesBatchParams defines parameters for PostPriceListsIdPricesBatch.
type PostPriceListsIdPricesBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPriceListsIdProductsJSONBody defines parameters for PostPriceListsIdProducts.
type PostPriceListsIdProductsJSONBody struct {
	// Add The price list's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The price list's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostPriceListsIdProductsParams defines parameters for PostPriceListsIdProducts.
type PostPriceListsIdProductsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPricingRuleTypesJSONBody defines parameters for GetPricingRuleTypes.
type GetPricingRuleTypesJSONBody struct {
	// Expand The pricing's expand.
	Expand *string `json:"expand,omitempty"`

	// Fields The pricing's fields.
	Fields *string `json:"fields,omitempty"`

	// Limit The pricing's limit.
	Limit *float32 `json:"limit,omitempty"`

	// Offset The pricing's offset.
	Offset *float32 `json:"offset,omitempty"`

	// Order The pricing's order.
	Order *string `json:"order,omitempty"`

	// RuleAttribute The pricing's rule attribute.
	RuleAttribute *[]string `json:"rule_attribute,omitempty"`
}

// GetPricingRuleTypesParams defines parameters for GetPricingRuleTypes.
type GetPricingRuleTypesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPricingRuleTypesJSONBody defines parameters for PostPricingRuleTypes.
type PostPricingRuleTypesJSONBody struct {
	// DefaultPriority The pricing's default priority.
	DefaultPriority float32 `json:"default_priority"`

	// Name The pricing's name.
	Name string `json:"name"`

	// RuleAttribute The pricing's rule attribute.
	RuleAttribute string `json:"rule_attribute"`
}

// PostPricingRuleTypesParams defines parameters for PostPricingRuleTypes.
type PostPricingRuleTypesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeletePricingRuleTypesIdJSONBody defines parameters for DeletePricingRuleTypesId.
type DeletePricingRuleTypesIdJSONBody = interface{}

// DeletePricingRuleTypesIdParams defines parameters for DeletePricingRuleTypesId.
type DeletePricingRuleTypesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPricingRuleTypesIdJSONBody defines parameters for GetPricingRuleTypesId.
type GetPricingRuleTypesIdJSONBody struct {
	// Fields The pricing's fields.
	Fields string `json:"fields"`
}

// GetPricingRuleTypesIdParams defines parameters for GetPricingRuleTypesId.
type GetPricingRuleTypesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPricingRuleTypesIdJSONBody defines parameters for PostPricingRuleTypesId.
type PostPricingRuleTypesIdJSONBody struct {
	// DefaultPriority The pricing's default priority.
	DefaultPriority float32 `json:"default_priority"`

	// Name The pricing's name.
	Name string `json:"name"`

	// RuleAttribute The pricing's rule attribute.
	RuleAttribute string `json:"rule_attribute"`
}

// PostPricingRuleTypesIdParams defines parameters for PostPricingRuleTypesId.
type PostPricingRuleTypesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductCategoriesJSONBody defines parameters for GetProductCategories.
type GetProductCategoriesJSONBody = interface{}

// GetProductCategoriesParams defines parameters for GetProductCategories.
type GetProductCategoriesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductCategoriesJSONBody defines parameters for PostProductCategories.
type PostProductCategoriesJSONBody struct {
	// Description The product category's description.
	Description string `json:"description"`

	// Handle The product category's handle.
	Handle string `json:"handle"`

	// IsActive The product category's is active.
	IsActive bool `json:"is_active"`

	// IsInternal The product category's is internal.
	IsInternal bool `json:"is_internal"`

	// Metadata The product category's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The product category's name.
	Name string `json:"name"`

	// ParentCategoryId The product category's parent category id.
	ParentCategoryId string `json:"parent_category_id"`

	// Rank The product category's rank.
	Rank float32 `json:"rank"`
}

// PostProductCategoriesParams defines parameters for PostProductCategories.
type PostProductCategoriesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductCategoriesIdJSONBody defines parameters for GetProductCategoriesId.
type GetProductCategoriesIdJSONBody struct {
	// Fields The product category's fields.
	Fields string `json:"fields"`

	// IncludeAncestorsTree The product category's include ancestors tree.
	IncludeAncestorsTree bool `json:"include_ancestors_tree"`

	// IncludeDescendantsTree The product category's include descendants tree.
	IncludeDescendantsTree bool `json:"include_descendants_tree"`
}

// GetProductCategoriesIdParams defines parameters for GetProductCategoriesId.
type GetProductCategoriesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductCategoriesIdJSONBody defines parameters for PostProductCategoriesId.
type PostProductCategoriesIdJSONBody struct {
	// Description The product category's description.
	Description string `json:"description"`

	// Handle The product category's handle.
	Handle string `json:"handle"`

	// IsActive The product category's is active.
	IsActive bool `json:"is_active"`

	// IsInternal The product category's is internal.
	IsInternal bool `json:"is_internal"`

	// Metadata The product category's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The product category's name.
	Name string `json:"name"`

	// ParentCategoryId The product category's parent category id.
	ParentCategoryId string `json:"parent_category_id"`

	// Rank The product category's rank.
	Rank float32 `json:"rank"`
}

// PostProductCategoriesIdParams defines parameters for PostProductCategoriesId.
type PostProductCategoriesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductCategoriesIdProductsJSONBody defines parameters for PostProductCategoriesIdProducts.
type PostProductCategoriesIdProductsJSONBody struct {
	// Add The product category's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The product category's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostProductCategoriesIdProductsParams defines parameters for PostProductCategoriesIdProducts.
type PostProductCategoriesIdProductsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductTypesJSONBody defines parameters for GetProductTypes.
type GetProductTypesJSONBody = interface{}

// GetProductTypesParams defines parameters for GetProductTypes.
type GetProductTypesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductTypesJSONBody defines parameters for PostProductTypes.
type PostProductTypesJSONBody struct {
	// Metadata The product type's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Value The product type's value.
	Value string `json:"value"`
}

// PostProductTypesParams defines parameters for PostProductTypes.
type PostProductTypesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteProductTypesIdJSONBody defines parameters for DeleteProductTypesId.
type DeleteProductTypesIdJSONBody = interface{}

// DeleteProductTypesIdParams defines parameters for DeleteProductTypesId.
type DeleteProductTypesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductTypesIdJSONBody defines parameters for GetProductTypesId.
type GetProductTypesIdJSONBody struct {
	// Fields The product type's fields.
	Fields string `json:"fields"`
}

// GetProductTypesIdParams defines parameters for GetProductTypesId.
type GetProductTypesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductTypesIdJSONBody defines parameters for PostProductTypesId.
type PostProductTypesIdJSONBody struct {
	// Metadata The product type's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Value The product type's value.
	Value string `json:"value"`
}

// PostProductTypesIdParams defines parameters for PostProductTypesId.
type PostProductTypesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductsJSONBody defines parameters for GetProducts.
type GetProductsJSONBody = interface{}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsJSONBody defines parameters for PostProducts.
type PostProductsJSONBody struct {
	// Categories The product's categories.
	Categories []struct {
		// Id The category's ID.
		Id string `json:"id"`
	} `json:"categories"`

	// CollectionId The product's collection id.
	CollectionId string `json:"collection_id"`

	// Description The product's description.
	Description string `json:"description"`

	// Discountable The product's discountable.
	Discountable bool `json:"discountable"`

	// Handle The product's handle.
	Handle string `json:"handle"`

	// Height The product's height.
	Height float32 `json:"height"`

	// HsCode The product's hs code.
	HsCode string `json:"hs_code"`

	// Images The product's images.
	Images []struct {
		// Url The image's url.
		Url string `json:"url"`
	} `json:"images"`

	// IsGiftcard The product's is giftcard.
	IsGiftcard bool `json:"is_giftcard"`

	// Length The product's length.
	Length float32 `json:"length"`

	// Material The product's material.
	Material string `json:"material"`

	// Metadata The product's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// MidCode The product's mid code.
	MidCode string `json:"mid_code"`

	// Options The product's options.
	Options []struct {
		// Title The option's title.
		Title string `json:"title"`

		// Values The option's values.
		Values []string `json:"values"`
	} `json:"options"`

	// OriginCountry The product's origin country.
	OriginCountry string `json:"origin_country"`

	// SalesChannels The product's sales channels.
	SalesChannels []struct {
		// Id The sales channel's ID.
		Id string `json:"id"`
	} `json:"sales_channels"`
	Status PostProductsJSONBodyStatus `json:"status"`

	// Subtitle The product's subtitle.
	Subtitle string `json:"subtitle"`

	// Tags The product's tags.
	Tags []struct {
		// Id The tag's ID.
		Id string `json:"id"`

		// Value The tag's value.
		Value string `json:"value"`
	} `json:"tags"`

	// Thumbnail The product's thumbnail.
	Thumbnail string `json:"thumbnail"`

	// Title The product's title.
	Title string `json:"title"`

	// TypeId The product's type id.
	TypeId string `json:"type_id"`

	// Variants The product's variants.
	Variants []struct {
		// AllowBackorder The variant's allow backorder.
		AllowBackorder bool `json:"allow_backorder"`

		// Barcode The variant's barcode.
		Barcode string `json:"barcode"`

		// Ean The variant's ean.
		Ean string `json:"ean"`

		// Height The variant's height.
		Height float32 `json:"height"`

		// HsCode The variant's hs code.
		HsCode string `json:"hs_code"`

		// InventoryQuantity The variant's inventory quantity.
		InventoryQuantity float32 `json:"inventory_quantity"`

		// Length The variant's length.
		Length float32 `json:"length"`

		// ManageInventory The variant's manage inventory.
		ManageInventory bool `json:"manage_inventory"`

		// Material The variant's material.
		Material string `json:"material"`

		// Metadata The variant's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// MidCode The variant's mid code.
		MidCode string `json:"mid_code"`

		// Options The variant's options.
		Options map[string]interface{} `json:"options"`

		// OriginCountry The variant's origin country.
		OriginCountry string `json:"origin_country"`

		// Prices The variant's prices.
		Prices []struct {
			// Amount The price's amount.
			Amount float32 `json:"amount"`

			// CurrencyCode The price's currency code.
			CurrencyCode string `json:"currency_code"`

			// MaxQuantity The price's max quantity.
			MaxQuantity float32 `json:"max_quantity"`

			// MinQuantity The price's min quantity.
			MinQuantity float32 `json:"min_quantity"`
		} `json:"prices"`

		// Sku The variant's sku.
		Sku string `json:"sku"`

		// Title The variant's title.
		Title string `json:"title"`

		// Upc The variant's upc.
		Upc string `json:"upc"`

		// VariantRank The variant's variant rank.
		VariantRank float32 `json:"variant_rank"`

		// Weight The variant's weight.
		Weight float32 `json:"weight"`

		// Width The variant's width.
		Width float32 `json:"width"`
	} `json:"variants"`

	// Weight The product's weight.
	Weight float32 `json:"weight"`

	// Width The product's width.
	Width float32 `json:"width"`
}

// PostProductsParams defines parameters for PostProducts.
type PostProductsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsJSONBodyStatus defines parameters for PostProducts.
type PostProductsJSONBodyStatus string

// PostProductsBatchJSONBody defines parameters for PostProductsBatch.
type PostProductsBatchJSONBody struct {
	// Create The product's create.
	Create *[]struct {
		// Categories The create's categories.
		Categories []struct {
			// Id The category's ID.
			Id string `json:"id"`
		} `json:"categories"`

		// CollectionId The create's collection id.
		CollectionId string `json:"collection_id"`

		// Description The create's description.
		Description string `json:"description"`

		// Discountable The create's discountable.
		Discountable bool `json:"discountable"`

		// Handle The create's handle.
		Handle string `json:"handle"`

		// Height The create's height.
		Height float32 `json:"height"`

		// HsCode The create's hs code.
		HsCode string `json:"hs_code"`

		// Images The create's images.
		Images []struct {
			// Url The image's url.
			Url string `json:"url"`
		} `json:"images"`

		// IsGiftcard The create's is giftcard.
		IsGiftcard bool `json:"is_giftcard"`

		// Length The create's length.
		Length float32 `json:"length"`

		// Material The create's material.
		Material string `json:"material"`

		// Metadata The create's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// MidCode The create's mid code.
		MidCode string `json:"mid_code"`

		// Options The create's options.
		Options []struct {
			// Title The option's title.
			Title string `json:"title"`

			// Values The option's values.
			Values []string `json:"values"`
		} `json:"options"`

		// OriginCountry The create's origin country.
		OriginCountry string `json:"origin_country"`

		// SalesChannels The create's sales channels.
		SalesChannels []struct {
			// Id The sales channel's ID.
			Id string `json:"id"`
		} `json:"sales_channels"`
		Status PostProductsBatchJSONBodyCreateStatus `json:"status"`

		// Subtitle The create's subtitle.
		Subtitle string `json:"subtitle"`

		// Tags The create's tags.
		Tags []struct {
			// Id The tag's ID.
			Id string `json:"id"`

			// Value The tag's value.
			Value string `json:"value"`
		} `json:"tags"`

		// Thumbnail The create's thumbnail.
		Thumbnail string `json:"thumbnail"`

		// Title The create's title.
		Title string `json:"title"`

		// TypeId The create's type id.
		TypeId string `json:"type_id"`

		// Variants The create's variants.
		Variants []struct {
			// AllowBackorder The variant's allow backorder.
			AllowBackorder bool `json:"allow_backorder"`

			// Barcode The variant's barcode.
			Barcode string `json:"barcode"`

			// Ean The variant's ean.
			Ean string `json:"ean"`

			// Height The variant's height.
			Height float32 `json:"height"`

			// HsCode The variant's hs code.
			HsCode string `json:"hs_code"`

			// InventoryQuantity The variant's inventory quantity.
			InventoryQuantity float32 `json:"inventory_quantity"`

			// Length The variant's length.
			Length float32 `json:"length"`

			// ManageInventory The variant's manage inventory.
			ManageInventory bool `json:"manage_inventory"`

			// Material The variant's material.
			Material string `json:"material"`

			// Metadata The variant's metadata.
			Metadata map[string]interface{} `json:"metadata"`

			// MidCode The variant's mid code.
			MidCode string `json:"mid_code"`

			// Options The variant's options.
			Options map[string]interface{} `json:"options"`

			// OriginCountry The variant's origin country.
			OriginCountry string `json:"origin_country"`

			// Prices The variant's prices.
			Prices []map[string]interface{} `json:"prices"`

			// Sku The variant's sku.
			Sku string `json:"sku"`

			// Title The variant's title.
			Title string `json:"title"`

			// Upc The variant's upc.
			Upc string `json:"upc"`

			// VariantRank The variant's variant rank.
			VariantRank float32 `json:"variant_rank"`

			// Weight The variant's weight.
			Weight float32 `json:"weight"`

			// Width The variant's width.
			Width float32 `json:"width"`
		} `json:"variants"`

		// Weight The create's weight.
		Weight float32 `json:"weight"`

		// Width The create's width.
		Width float32 `json:"width"`
	} `json:"create,omitempty"`

	// Delete The product's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The product's update.
	Update *[]struct {
		// Categories The update's categories.
		Categories []struct {
			// Id The category's ID.
			Id string `json:"id"`
		} `json:"categories"`

		// CollectionId The update's collection id.
		CollectionId string `json:"collection_id"`

		// Description The update's description.
		Description string `json:"description"`

		// Discountable The update's discountable.
		Discountable bool `json:"discountable"`

		// Handle The update's handle.
		Handle string `json:"handle"`

		// Height The update's height.
		Height float32 `json:"height"`

		// HsCode The update's hs code.
		HsCode string `json:"hs_code"`

		// Id The update's ID.
		Id string `json:"id"`

		// Images The update's images.
		Images []struct {
			// Url The image's url.
			Url string `json:"url"`
		} `json:"images"`

		// Length The update's length.
		Length float32 `json:"length"`

		// Material The update's material.
		Material string `json:"material"`

		// Metadata The update's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// MidCode The update's mid code.
		MidCode string `json:"mid_code"`

		// Options The update's options.
		Options []struct {
			// Id The option's ID.
			Id string `json:"id"`

			// Title The option's title.
			Title string `json:"title"`

			// Values The option's values.
			Values []string `json:"values"`
		} `json:"options"`

		// OriginCountry The update's origin country.
		OriginCountry string `json:"origin_country"`

		// SalesChannels The update's sales channels.
		SalesChannels []struct {
			// Id The sales channel's ID.
			Id string `json:"id"`
		} `json:"sales_channels"`
		Status PostProductsBatchJSONBodyUpdateStatus `json:"status"`

		// Subtitle The update's subtitle.
		Subtitle string `json:"subtitle"`

		// Tags The update's tags.
		Tags []struct {
			// Id The tag's ID.
			Id string `json:"id"`

			// Value The tag's value.
			Value string `json:"value"`
		} `json:"tags"`

		// Thumbnail The update's thumbnail.
		Thumbnail string `json:"thumbnail"`

		// Title The update's title.
		Title string `json:"title"`

		// TypeId The update's type id.
		TypeId string `json:"type_id"`

		// Variants The update's variants.
		Variants []struct {
			// AllowBackorder The variant's allow backorder.
			AllowBackorder bool `json:"allow_backorder"`

			// Barcode The variant's barcode.
			Barcode string `json:"barcode"`

			// Ean The variant's ean.
			Ean string `json:"ean"`

			// Height The variant's height.
			Height float32 `json:"height"`

			// HsCode The variant's hs code.
			HsCode string `json:"hs_code"`

			// Id The variant's ID.
			Id string `json:"id"`

			// InventoryQuantity The variant's inventory quantity.
			InventoryQuantity float32 `json:"inventory_quantity"`

			// Length The variant's length.
			Length float32 `json:"length"`

			// ManageInventory The variant's manage inventory.
			ManageInventory bool `json:"manage_inventory"`

			// Material The variant's material.
			Material string `json:"material"`

			// Metadata The variant's metadata.
			Metadata map[string]interface{} `json:"metadata"`

			// MidCode The variant's mid code.
			MidCode string `json:"mid_code"`

			// Options The variant's options.
			Options map[string]interface{} `json:"options"`

			// OriginCountry The variant's origin country.
			OriginCountry string `json:"origin_country"`

			// Prices The variant's prices.
			Prices []map[string]interface{} `json:"prices"`

			// Sku The variant's sku.
			Sku string `json:"sku"`

			// Title The variant's title.
			Title string `json:"title"`

			// Upc The variant's upc.
			Upc string `json:"upc"`

			// VariantRank The variant's variant rank.
			VariantRank float32 `json:"variant_rank"`

			// Weight The variant's weight.
			Weight float32 `json:"weight"`

			// Width The variant's width.
			Width float32 `json:"width"`
		} `json:"variants"`

		// Weight The update's weight.
		Weight float32 `json:"weight"`

		// Width The update's width.
		Width float32 `json:"width"`
	} `json:"update,omitempty"`
}

// PostProductsBatchParams defines parameters for PostProductsBatch.
type PostProductsBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsBatchJSONBodyCreateStatus defines parameters for PostProductsBatch.
type PostProductsBatchJSONBodyCreateStatus string

// PostProductsBatchJSONBodyUpdateStatus defines parameters for PostProductsBatch.
type PostProductsBatchJSONBodyUpdateStatus string

// DeleteProductsIdJSONBody defines parameters for DeleteProductsId.
type DeleteProductsIdJSONBody = interface{}

// DeleteProductsIdParams defines parameters for DeleteProductsId.
type DeleteProductsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductsIdJSONBody defines parameters for GetProductsId.
type GetProductsIdJSONBody = interface{}

// GetProductsIdParams defines parameters for GetProductsId.
type GetProductsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdJSONBody defines parameters for PostProductsId.
type PostProductsIdJSONBody struct {
	// Categories The product's categories.
	Categories []struct {
		// Id The category's ID.
		Id string `json:"id"`
	} `json:"categories"`

	// CollectionId The product's collection id.
	CollectionId string `json:"collection_id"`

	// Description The product's description.
	Description string `json:"description"`

	// Discountable The product's discountable.
	Discountable bool `json:"discountable"`

	// Handle The product's handle.
	Handle string `json:"handle"`

	// Height The product's height.
	Height float32 `json:"height"`

	// HsCode The product's hs code.
	HsCode string `json:"hs_code"`

	// Images The product's images.
	Images []struct {
		// Url The image's url.
		Url string `json:"url"`
	} `json:"images"`

	// Length The product's length.
	Length float32 `json:"length"`

	// Material The product's material.
	Material string `json:"material"`

	// Metadata The product's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// MidCode The product's mid code.
	MidCode string `json:"mid_code"`

	// Options The product's options.
	Options []struct {
		// Id The option's ID.
		Id string `json:"id"`

		// Title The option's title.
		Title string `json:"title"`

		// Values The option's values.
		Values []string `json:"values"`
	} `json:"options"`

	// OriginCountry The product's origin country.
	OriginCountry string `json:"origin_country"`

	// SalesChannels The product's sales channels.
	SalesChannels []struct {
		// Id The sales channel's ID.
		Id string `json:"id"`
	} `json:"sales_channels"`
	Status PostProductsIdJSONBodyStatus `json:"status"`

	// Subtitle The product's subtitle.
	Subtitle string `json:"subtitle"`

	// Tags The product's tags.
	Tags []struct {
		// Id The tag's ID.
		Id string `json:"id"`

		// Value The tag's value.
		Value string `json:"value"`
	} `json:"tags"`

	// Thumbnail The product's thumbnail.
	Thumbnail string `json:"thumbnail"`

	// Title The product's title.
	Title string `json:"title"`

	// TypeId The product's type id.
	TypeId string `json:"type_id"`

	// Variants The product's variants.
	Variants []struct {
		// AllowBackorder The variant's allow backorder.
		AllowBackorder bool `json:"allow_backorder"`

		// Barcode The variant's barcode.
		Barcode string `json:"barcode"`

		// Ean The variant's ean.
		Ean string `json:"ean"`

		// Height The variant's height.
		Height float32 `json:"height"`

		// HsCode The variant's hs code.
		HsCode string `json:"hs_code"`

		// Id The variant's ID.
		Id string `json:"id"`

		// InventoryQuantity The variant's inventory quantity.
		InventoryQuantity float32 `json:"inventory_quantity"`

		// Length The variant's length.
		Length float32 `json:"length"`

		// ManageInventory The variant's manage inventory.
		ManageInventory bool `json:"manage_inventory"`

		// Material The variant's material.
		Material string `json:"material"`

		// Metadata The variant's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// MidCode The variant's mid code.
		MidCode string `json:"mid_code"`

		// Options The variant's options.
		Options map[string]interface{} `json:"options"`

		// OriginCountry The variant's origin country.
		OriginCountry string `json:"origin_country"`

		// Prices The variant's prices.
		Prices []struct {
			// Amount The price's amount.
			Amount float32 `json:"amount"`

			// CurrencyCode The price's currency code.
			CurrencyCode string `json:"currency_code"`

			// Id The price's ID.
			Id string `json:"id"`

			// MaxQuantity The price's max quantity.
			MaxQuantity float32 `json:"max_quantity"`

			// MinQuantity The price's min quantity.
			MinQuantity float32 `json:"min_quantity"`
		} `json:"prices"`

		// Sku The variant's sku.
		Sku string `json:"sku"`

		// Title The variant's title.
		Title string `json:"title"`

		// Upc The variant's upc.
		Upc string `json:"upc"`

		// VariantRank The variant's variant rank.
		VariantRank float32 `json:"variant_rank"`

		// Weight The variant's weight.
		Weight float32 `json:"weight"`

		// Width The variant's width.
		Width float32 `json:"width"`
	} `json:"variants"`

	// Weight The product's weight.
	Weight float32 `json:"weight"`

	// Width The product's width.
	Width float32 `json:"width"`
}

// PostProductsIdParams defines parameters for PostProductsId.
type PostProductsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdJSONBodyStatus defines parameters for PostProductsId.
type PostProductsIdJSONBodyStatus string

// GetProductsIdOptionsJSONBody defines parameters for GetProductsIdOptions.
type GetProductsIdOptionsJSONBody = interface{}

// GetProductsIdOptionsParams defines parameters for GetProductsIdOptions.
type GetProductsIdOptionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdOptionsJSONBody defines parameters for PostProductsIdOptions.
type PostProductsIdOptionsJSONBody struct {
	// Title The product's title.
	Title string `json:"title"`

	// Values The product's values.
	Values []string `json:"values"`
}

// PostProductsIdOptionsParams defines parameters for PostProductsIdOptions.
type PostProductsIdOptionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteProductsIdOptionsOptionIdJSONBody defines parameters for DeleteProductsIdOptionsOptionId.
type DeleteProductsIdOptionsOptionIdJSONBody = interface{}

// DeleteProductsIdOptionsOptionIdParams defines parameters for DeleteProductsIdOptionsOptionId.
type DeleteProductsIdOptionsOptionIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductsIdOptionsOptionIdJSONBody defines parameters for GetProductsIdOptionsOptionId.
type GetProductsIdOptionsOptionIdJSONBody = interface{}

// GetProductsIdOptionsOptionIdParams defines parameters for GetProductsIdOptionsOptionId.
type GetProductsIdOptionsOptionIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdOptionsOptionIdJSONBody defines parameters for PostProductsIdOptionsOptionId.
type PostProductsIdOptionsOptionIdJSONBody struct {
	// Id The product's ID.
	Id string `json:"id"`

	// Title The product's title.
	Title string `json:"title"`

	// Values The product's values.
	Values []string `json:"values"`
}

// PostProductsIdOptionsOptionIdParams defines parameters for PostProductsIdOptionsOptionId.
type PostProductsIdOptionsOptionIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductsIdVariantsJSONBody defines parameters for GetProductsIdVariants.
type GetProductsIdVariantsJSONBody = interface{}

// GetProductsIdVariantsParams defines parameters for GetProductsIdVariants.
type GetProductsIdVariantsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdVariantsJSONBody defines parameters for PostProductsIdVariants.
type PostProductsIdVariantsJSONBody struct {
	// AllowBackorder The product's allow backorder.
	AllowBackorder bool `json:"allow_backorder"`

	// Barcode The product's barcode.
	Barcode string `json:"barcode"`

	// Ean The product's ean.
	Ean string `json:"ean"`

	// Height The product's height.
	Height float32 `json:"height"`

	// HsCode The product's hs code.
	HsCode string `json:"hs_code"`

	// InventoryQuantity The product's inventory quantity.
	InventoryQuantity float32 `json:"inventory_quantity"`

	// Length The product's length.
	Length float32 `json:"length"`

	// ManageInventory The product's manage inventory.
	ManageInventory bool `json:"manage_inventory"`

	// Material The product's material.
	Material string `json:"material"`

	// Metadata The product's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// MidCode The product's mid code.
	MidCode string `json:"mid_code"`

	// Options The product's options.
	Options map[string]interface{} `json:"options"`

	// OriginCountry The product's origin country.
	OriginCountry string `json:"origin_country"`

	// Prices The product's prices.
	Prices []struct {
		// Amount The price's amount.
		Amount float32 `json:"amount"`

		// CurrencyCode The price's currency code.
		CurrencyCode string `json:"currency_code"`

		// MaxQuantity The price's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// MinQuantity The price's min quantity.
		MinQuantity float32 `json:"min_quantity"`
	} `json:"prices"`

	// Sku The product's sku.
	Sku string `json:"sku"`

	// Title The product's title.
	Title string `json:"title"`

	// Upc The product's upc.
	Upc string `json:"upc"`

	// VariantRank The product's variant rank.
	VariantRank float32 `json:"variant_rank"`

	// Weight The product's weight.
	Weight float32 `json:"weight"`

	// Width The product's width.
	Width float32 `json:"width"`
}

// PostProductsIdVariantsParams defines parameters for PostProductsIdVariants.
type PostProductsIdVariantsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdVariantsBatchJSONBody defines parameters for PostProductsIdVariantsBatch.
type PostProductsIdVariantsBatchJSONBody struct {
	// Create The product's create.
	Create *[]struct {
		// Categories The create's categories.
		Categories []struct {
			// Id The category's ID.
			Id string `json:"id"`
		} `json:"categories"`

		// CollectionId The create's collection id.
		CollectionId string `json:"collection_id"`

		// Description The create's description.
		Description string `json:"description"`

		// Discountable The create's discountable.
		Discountable bool `json:"discountable"`

		// Handle The create's handle.
		Handle string `json:"handle"`

		// Height The create's height.
		Height float32 `json:"height"`

		// HsCode The create's hs code.
		HsCode string `json:"hs_code"`

		// Images The create's images.
		Images []struct {
			// Url The image's url.
			Url string `json:"url"`
		} `json:"images"`

		// IsGiftcard The create's is giftcard.
		IsGiftcard bool `json:"is_giftcard"`

		// Length The create's length.
		Length float32 `json:"length"`

		// Material The create's material.
		Material string `json:"material"`

		// Metadata The create's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// MidCode The create's mid code.
		MidCode string `json:"mid_code"`

		// Options The create's options.
		Options []struct {
			// Title The option's title.
			Title string `json:"title"`

			// Values The option's values.
			Values []string `json:"values"`
		} `json:"options"`

		// OriginCountry The create's origin country.
		OriginCountry string `json:"origin_country"`

		// SalesChannels The create's sales channels.
		SalesChannels []struct {
			// Id The sales channel's ID.
			Id string `json:"id"`
		} `json:"sales_channels"`
		Status PostProductsIdVariantsBatchJSONBodyCreateStatus `json:"status"`

		// Subtitle The create's subtitle.
		Subtitle string `json:"subtitle"`

		// Tags The create's tags.
		Tags []struct {
			// Id The tag's ID.
			Id string `json:"id"`

			// Value The tag's value.
			Value string `json:"value"`
		} `json:"tags"`

		// Thumbnail The create's thumbnail.
		Thumbnail string `json:"thumbnail"`

		// Title The create's title.
		Title string `json:"title"`

		// TypeId The create's type id.
		TypeId string `json:"type_id"`

		// Variants The create's variants.
		Variants []struct {
			// AllowBackorder The variant's allow backorder.
			AllowBackorder bool `json:"allow_backorder"`

			// Barcode The variant's barcode.
			Barcode string `json:"barcode"`

			// Ean The variant's ean.
			Ean string `json:"ean"`

			// Height The variant's height.
			Height float32 `json:"height"`

			// HsCode The variant's hs code.
			HsCode string `json:"hs_code"`

			// InventoryQuantity The variant's inventory quantity.
			InventoryQuantity float32 `json:"inventory_quantity"`

			// Length The variant's length.
			Length float32 `json:"length"`

			// ManageInventory The variant's manage inventory.
			ManageInventory bool `json:"manage_inventory"`

			// Material The variant's material.
			Material string `json:"material"`

			// Metadata The variant's metadata.
			Metadata map[string]interface{} `json:"metadata"`

			// MidCode The variant's mid code.
			MidCode string `json:"mid_code"`

			// Options The variant's options.
			Options map[string]interface{} `json:"options"`

			// OriginCountry The variant's origin country.
			OriginCountry string `json:"origin_country"`

			// Prices The variant's prices.
			Prices []map[string]interface{} `json:"prices"`

			// Sku The variant's sku.
			Sku string `json:"sku"`

			// Title The variant's title.
			Title string `json:"title"`

			// Upc The variant's upc.
			Upc string `json:"upc"`

			// VariantRank The variant's variant rank.
			VariantRank float32 `json:"variant_rank"`

			// Weight The variant's weight.
			Weight float32 `json:"weight"`

			// Width The variant's width.
			Width float32 `json:"width"`
		} `json:"variants"`

		// Weight The create's weight.
		Weight float32 `json:"weight"`

		// Width The create's width.
		Width float32 `json:"width"`
	} `json:"create,omitempty"`

	// Delete The product's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The product's update.
	Update *[]struct {
		// AllowBackorder The update's allow backorder.
		AllowBackorder bool `json:"allow_backorder"`

		// Barcode The update's barcode.
		Barcode string `json:"barcode"`

		// Ean The update's ean.
		Ean string `json:"ean"`

		// Height The update's height.
		Height float32 `json:"height"`

		// HsCode The update's hs code.
		HsCode string `json:"hs_code"`

		// Id The update's ID.
		Id string `json:"id"`

		// InventoryQuantity The update's inventory quantity.
		InventoryQuantity float32 `json:"inventory_quantity"`

		// Length The update's length.
		Length float32 `json:"length"`

		// ManageInventory The update's manage inventory.
		ManageInventory bool `json:"manage_inventory"`

		// Material The update's material.
		Material string `json:"material"`

		// Metadata The update's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// MidCode The update's mid code.
		MidCode string `json:"mid_code"`

		// Options The update's options.
		Options map[string]interface{} `json:"options"`

		// OriginCountry The update's origin country.
		OriginCountry string `json:"origin_country"`

		// Prices The update's prices.
		Prices []struct {
			// Amount The price's amount.
			Amount float32 `json:"amount"`

			// CurrencyCode The price's currency code.
			CurrencyCode string `json:"currency_code"`

			// Id The price's ID.
			Id string `json:"id"`

			// MaxQuantity The price's max quantity.
			MaxQuantity float32 `json:"max_quantity"`

			// MinQuantity The price's min quantity.
			MinQuantity float32 `json:"min_quantity"`
		} `json:"prices"`

		// Sku The update's sku.
		Sku string `json:"sku"`

		// Title The update's title.
		Title string `json:"title"`

		// Upc The update's upc.
		Upc string `json:"upc"`

		// VariantRank The update's variant rank.
		VariantRank float32 `json:"variant_rank"`

		// Weight The update's weight.
		Weight float32 `json:"weight"`

		// Width The update's width.
		Width float32 `json:"width"`
	} `json:"update,omitempty"`
}

// PostProductsIdVariantsBatchParams defines parameters for PostProductsIdVariantsBatch.
type PostProductsIdVariantsBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdVariantsBatchJSONBodyCreateStatus defines parameters for PostProductsIdVariantsBatch.
type PostProductsIdVariantsBatchJSONBodyCreateStatus string

// DeleteProductsIdVariantsVariantIdJSONBody defines parameters for DeleteProductsIdVariantsVariantId.
type DeleteProductsIdVariantsVariantIdJSONBody = interface{}

// DeleteProductsIdVariantsVariantIdParams defines parameters for DeleteProductsIdVariantsVariantId.
type DeleteProductsIdVariantsVariantIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetProductsIdVariantsVariantIdJSONBody defines parameters for GetProductsIdVariantsVariantId.
type GetProductsIdVariantsVariantIdJSONBody = interface{}

// GetProductsIdVariantsVariantIdParams defines parameters for GetProductsIdVariantsVariantId.
type GetProductsIdVariantsVariantIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostProductsIdVariantsVariantIdJSONBody defines parameters for PostProductsIdVariantsVariantId.
type PostProductsIdVariantsVariantIdJSONBody struct {
	// AllowBackorder The product's allow backorder.
	AllowBackorder bool `json:"allow_backorder"`

	// Barcode The product's barcode.
	Barcode string `json:"barcode"`

	// Ean The product's ean.
	Ean string `json:"ean"`

	// Height The product's height.
	Height float32 `json:"height"`

	// HsCode The product's hs code.
	HsCode string `json:"hs_code"`

	// Id The product's ID.
	Id string `json:"id"`

	// InventoryQuantity The product's inventory quantity.
	InventoryQuantity float32 `json:"inventory_quantity"`

	// Length The product's length.
	Length float32 `json:"length"`

	// ManageInventory The product's manage inventory.
	ManageInventory bool `json:"manage_inventory"`

	// Material The product's material.
	Material string `json:"material"`

	// Metadata The product's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// MidCode The product's mid code.
	MidCode string `json:"mid_code"`

	// Options The product's options.
	Options map[string]interface{} `json:"options"`

	// OriginCountry The product's origin country.
	OriginCountry string `json:"origin_country"`

	// Prices The product's prices.
	Prices []struct {
		// Amount The price's amount.
		Amount float32 `json:"amount"`

		// CurrencyCode The price's currency code.
		CurrencyCode string `json:"currency_code"`

		// Id The price's ID.
		Id string `json:"id"`

		// MaxQuantity The price's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// MinQuantity The price's min quantity.
		MinQuantity float32 `json:"min_quantity"`
	} `json:"prices"`

	// Sku The product's sku.
	Sku string `json:"sku"`

	// Title The product's title.
	Title string `json:"title"`

	// Upc The product's upc.
	Upc string `json:"upc"`

	// VariantRank The product's variant rank.
	VariantRank float32 `json:"variant_rank"`

	// Weight The product's weight.
	Weight float32 `json:"weight"`

	// Width The product's width.
	Width float32 `json:"width"`
}

// PostProductsIdVariantsVariantIdParams defines parameters for PostProductsIdVariantsVariantId.
type PostProductsIdVariantsVariantIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPromotionsJSONBody defines parameters for GetPromotions.
type GetPromotionsJSONBody = interface{}

// GetPromotionsParams defines parameters for GetPromotions.
type GetPromotionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsJSONBody defines parameters for PostPromotions.
type PostPromotionsJSONBody struct {
	// ApplicationMethod The promotion's application method.
	ApplicationMethod struct {
		Allocation PostPromotionsJSONBodyApplicationMethodAllocation `json:"allocation"`

		// ApplyToQuantity The application method's apply to quantity.
		ApplyToQuantity float32 `json:"apply_to_quantity"`

		// BuyRules The application method's buy rules.
		BuyRules []struct {
			// Attribute The buy rule's attribute.
			Attribute string `json:"attribute"`

			// Description The buy rule's description.
			Description string                                                  `json:"description"`
			Operator    PostPromotionsJSONBodyApplicationMethodBuyRulesOperator `json:"operator"`

			// Values The buy rule's values.
			Values []string `json:"values"`
		} `json:"buy_rules"`

		// BuyRulesMinQuantity The application method's buy rules min quantity.
		BuyRulesMinQuantity float32 `json:"buy_rules_min_quantity"`

		// Description The application method's description.
		Description string `json:"description"`

		// MaxQuantity The application method's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// TargetRules The application method's target rules.
		TargetRules []struct {
			// Attribute The target rule's attribute.
			Attribute string `json:"attribute"`

			// Description The target rule's description.
			Description string                                                     `json:"description"`
			Operator    PostPromotionsJSONBodyApplicationMethodTargetRulesOperator `json:"operator"`

			// Values The target rule's values.
			Values []string `json:"values"`
		} `json:"target_rules"`
		TargetType PostPromotionsJSONBodyApplicationMethodTargetType `json:"target_type"`
		Type       PostPromotionsJSONBodyApplicationMethodType       `json:"type"`

		// Value The application method's value.
		Value float32 `json:"value"`
	} `json:"application_method"`

	// Campaign The promotion's campaign.
	Campaign struct {
		// Budget The campaign's budget.
		Budget struct {
			// Limit The budget's limit.
			Limit float32                                  `json:"limit"`
			Type  PostPromotionsJSONBodyCampaignBudgetType `json:"type"`
		} `json:"budget"`

		// CampaignIdentifier The campaign's campaign identifier.
		CampaignIdentifier string `json:"campaign_identifier"`

		// Currency The campaign's currency.
		Currency string `json:"currency"`

		// Description The campaign's description.
		Description string `json:"description"`

		// EndsAt The campaign's ends at.
		EndsAt time.Time `json:"ends_at"`

		// Name The campaign's name.
		Name string `json:"name"`

		// Promotions The campaign's promotions.
		Promotions []struct {
			// Id The promotion's ID.
			Id string `json:"id"`
		} `json:"promotions"`

		// StartsAt The campaign's starts at.
		StartsAt time.Time `json:"starts_at"`
	} `json:"campaign"`

	// CampaignId The promotion's campaign id.
	CampaignId string `json:"campaign_id"`

	// Code The promotion's code.
	Code string `json:"code"`

	// IsAutomatic The promotion's is automatic.
	IsAutomatic bool `json:"is_automatic"`

	// Rules The promotion's rules.
	Rules []struct {
		// Attribute The rule's attribute.
		Attribute string `json:"attribute"`

		// Description The rule's description.
		Description string                              `json:"description"`
		Operator    PostPromotionsJSONBodyRulesOperator `json:"operator"`

		// Values The rule's values.
		Values []string `json:"values"`
	} `json:"rules"`
	Type PostPromotionsJSONBodyType `json:"type"`
}

// PostPromotionsParams defines parameters for PostPromotions.
type PostPromotionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsJSONBodyApplicationMethodAllocation defines parameters for PostPromotions.
type PostPromotionsJSONBodyApplicationMethodAllocation string

// PostPromotionsJSONBodyApplicationMethodBuyRulesOperator defines parameters for PostPromotions.
type PostPromotionsJSONBodyApplicationMethodBuyRulesOperator string

// PostPromotionsJSONBodyApplicationMethodTargetRulesOperator defines parameters for PostPromotions.
type PostPromotionsJSONBodyApplicationMethodTargetRulesOperator string

// PostPromotionsJSONBodyApplicationMethodTargetType defines parameters for PostPromotions.
type PostPromotionsJSONBodyApplicationMethodTargetType string

// PostPromotionsJSONBodyApplicationMethodType defines parameters for PostPromotions.
type PostPromotionsJSONBodyApplicationMethodType string

// PostPromotionsJSONBodyCampaignBudgetType defines parameters for PostPromotions.
type PostPromotionsJSONBodyCampaignBudgetType string

// PostPromotionsJSONBodyRulesOperator defines parameters for PostPromotions.
type PostPromotionsJSONBodyRulesOperator string

// PostPromotionsJSONBodyType defines parameters for PostPromotions.
type PostPromotionsJSONBodyType string

// GetPromotionsRuleAttributeOptionsRuleTypeJSONBody defines parameters for GetPromotionsRuleAttributeOptionsRuleType.
type GetPromotionsRuleAttributeOptionsRuleTypeJSONBody = interface{}

// GetPromotionsRuleAttributeOptionsRuleTypeParams defines parameters for GetPromotionsRuleAttributeOptionsRuleType.
type GetPromotionsRuleAttributeOptionsRuleTypeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPromotionsRuleOperatorOptionsJSONBody defines parameters for GetPromotionsRuleOperatorOptions.
type GetPromotionsRuleOperatorOptionsJSONBody = interface{}

// GetPromotionsRuleOperatorOptionsParams defines parameters for GetPromotionsRuleOperatorOptions.
type GetPromotionsRuleOperatorOptionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONBody defines parameters for GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId.
type GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONBody = interface{}

// GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams defines parameters for GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId.
type GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeletePromotionsIdJSONBody defines parameters for DeletePromotionsId.
type DeletePromotionsIdJSONBody = interface{}

// DeletePromotionsIdParams defines parameters for DeletePromotionsId.
type DeletePromotionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetPromotionsIdJSONBody defines parameters for GetPromotionsId.
type GetPromotionsIdJSONBody struct {
	// Fields The promotion's fields.
	Fields string `json:"fields"`
}

// GetPromotionsIdParams defines parameters for GetPromotionsId.
type GetPromotionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsIdJSONBody defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBody struct {
	// ApplicationMethod The promotion's application method.
	ApplicationMethod struct {
		Allocation PostPromotionsIdJSONBodyApplicationMethodAllocation `json:"allocation"`

		// ApplyToQuantity The application method's apply to quantity.
		ApplyToQuantity float32 `json:"apply_to_quantity"`

		// BuyRules The application method's buy rules.
		BuyRules []struct {
			// Attribute The buy rule's attribute.
			Attribute string `json:"attribute"`

			// Description The buy rule's description.
			Description string                                                    `json:"description"`
			Operator    PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator `json:"operator"`

			// Values The buy rule's values.
			Values []string `json:"values"`
		} `json:"buy_rules"`

		// BuyRulesMinQuantity The application method's buy rules min quantity.
		BuyRulesMinQuantity float32 `json:"buy_rules_min_quantity"`

		// Description The application method's description.
		Description string `json:"description"`

		// MaxQuantity The application method's max quantity.
		MaxQuantity float32 `json:"max_quantity"`

		// TargetRules The application method's target rules.
		TargetRules []struct {
			// Attribute The target rule's attribute.
			Attribute string `json:"attribute"`

			// Description The target rule's description.
			Description string                                                       `json:"description"`
			Operator    PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator `json:"operator"`

			// Values The target rule's values.
			Values []string `json:"values"`
		} `json:"target_rules"`
		TargetType PostPromotionsIdJSONBodyApplicationMethodTargetType `json:"target_type"`
		Type       PostPromotionsIdJSONBodyApplicationMethodType       `json:"type"`

		// Value The application method's value.
		Value string `json:"value"`
	} `json:"application_method"`

	// Campaign The promotion's campaign.
	Campaign struct {
		// Budget The campaign's budget.
		Budget struct {
			// Limit The budget's limit.
			Limit float32                                    `json:"limit"`
			Type  PostPromotionsIdJSONBodyCampaignBudgetType `json:"type"`
		} `json:"budget"`

		// CampaignIdentifier The campaign's campaign identifier.
		CampaignIdentifier string `json:"campaign_identifier"`

		// Currency The campaign's currency.
		Currency string `json:"currency"`

		// Description The campaign's description.
		Description string `json:"description"`

		// EndsAt The campaign's ends at.
		EndsAt string `json:"ends_at"`

		// Name The campaign's name.
		Name string `json:"name"`

		// Promotions The campaign's promotions.
		Promotions []struct {
			// Id The promotion's ID.
			Id string `json:"id"`
		} `json:"promotions"`

		// StartsAt The campaign's starts at.
		StartsAt string `json:"starts_at"`
	} `json:"campaign"`

	// CampaignId The promotion's campaign id.
	CampaignId string `json:"campaign_id"`

	// Code The promotion's code.
	Code string `json:"code"`

	// IsAutomatic The promotion's is automatic.
	IsAutomatic bool `json:"is_automatic"`

	// Rules The promotion's rules.
	Rules []struct {
		// Attribute The rule's attribute.
		Attribute string `json:"attribute"`

		// Description The rule's description.
		Description string                                `json:"description"`
		Operator    PostPromotionsIdJSONBodyRulesOperator `json:"operator"`

		// Values The rule's values.
		Values []string `json:"values"`
	} `json:"rules"`
	Type PostPromotionsIdJSONBodyType `json:"type"`
}

// PostPromotionsIdParams defines parameters for PostPromotionsId.
type PostPromotionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsIdJSONBodyApplicationMethodAllocation defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyApplicationMethodAllocation string

// PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyApplicationMethodBuyRulesOperator string

// PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyApplicationMethodTargetRulesOperator string

// PostPromotionsIdJSONBodyApplicationMethodTargetType defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyApplicationMethodTargetType string

// PostPromotionsIdJSONBodyApplicationMethodType defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyApplicationMethodType string

// PostPromotionsIdJSONBodyCampaignBudgetType defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyCampaignBudgetType string

// PostPromotionsIdJSONBodyRulesOperator defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyRulesOperator string

// PostPromotionsIdJSONBodyType defines parameters for PostPromotionsId.
type PostPromotionsIdJSONBodyType string

// PostPromotionsIdBuyRulesBatchJSONBody defines parameters for PostPromotionsIdBuyRulesBatch.
type PostPromotionsIdBuyRulesBatchJSONBody struct {
	// Create The promotion's create.
	Create *[]struct {
		// Attribute The create's attribute.
		Attribute string `json:"attribute"`

		// Description The create's description.
		Description string                                              `json:"description"`
		Operator    PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator `json:"operator"`

		// Values The create's values.
		Values []string `json:"values"`
	} `json:"create,omitempty"`

	// Delete The promotion's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The promotion's update.
	Update *[]struct {
		// Attribute The update's attribute.
		Attribute string `json:"attribute"`

		// Description The update's description.
		Description string `json:"description"`

		// Id The update's ID.
		Id       string                                              `json:"id"`
		Operator PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator `json:"operator"`

		// Values The update's values.
		Values []string `json:"values"`
	} `json:"update,omitempty"`
}

// PostPromotionsIdBuyRulesBatchParams defines parameters for PostPromotionsIdBuyRulesBatch.
type PostPromotionsIdBuyRulesBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator defines parameters for PostPromotionsIdBuyRulesBatch.
type PostPromotionsIdBuyRulesBatchJSONBodyCreateOperator string

// PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator defines parameters for PostPromotionsIdBuyRulesBatch.
type PostPromotionsIdBuyRulesBatchJSONBodyUpdateOperator string

// PostPromotionsIdRulesBatchJSONBody defines parameters for PostPromotionsIdRulesBatch.
type PostPromotionsIdRulesBatchJSONBody struct {
	// Create The promotion's create.
	Create *[]struct {
		// Attribute The create's attribute.
		Attribute string `json:"attribute"`

		// Description The create's description.
		Description string                                           `json:"description"`
		Operator    PostPromotionsIdRulesBatchJSONBodyCreateOperator `json:"operator"`

		// Values The create's values.
		Values []string `json:"values"`
	} `json:"create,omitempty"`

	// Delete The promotion's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The promotion's update.
	Update *[]struct {
		// Attribute The update's attribute.
		Attribute string `json:"attribute"`

		// Description The update's description.
		Description string `json:"description"`

		// Id The update's ID.
		Id       string                                           `json:"id"`
		Operator PostPromotionsIdRulesBatchJSONBodyUpdateOperator `json:"operator"`

		// Values The update's values.
		Values []string `json:"values"`
	} `json:"update,omitempty"`
}

// PostPromotionsIdRulesBatchParams defines parameters for PostPromotionsIdRulesBatch.
type PostPromotionsIdRulesBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsIdRulesBatchJSONBodyCreateOperator defines parameters for PostPromotionsIdRulesBatch.
type PostPromotionsIdRulesBatchJSONBodyCreateOperator string

// PostPromotionsIdRulesBatchJSONBodyUpdateOperator defines parameters for PostPromotionsIdRulesBatch.
type PostPromotionsIdRulesBatchJSONBodyUpdateOperator string

// PostPromotionsIdTargetRulesBatchJSONBody defines parameters for PostPromotionsIdTargetRulesBatch.
type PostPromotionsIdTargetRulesBatchJSONBody struct {
	// Create The promotion's create.
	Create *[]struct {
		// Attribute The create's attribute.
		Attribute string `json:"attribute"`

		// Description The create's description.
		Description string                                                 `json:"description"`
		Operator    PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator `json:"operator"`

		// Values The create's values.
		Values []string `json:"values"`
	} `json:"create,omitempty"`

	// Delete The promotion's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The promotion's update.
	Update *[]struct {
		// Attribute The update's attribute.
		Attribute string `json:"attribute"`

		// Description The update's description.
		Description string `json:"description"`

		// Id The update's ID.
		Id       string                                                 `json:"id"`
		Operator PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator `json:"operator"`

		// Values The update's values.
		Values []string `json:"values"`
	} `json:"update,omitempty"`
}

// PostPromotionsIdTargetRulesBatchParams defines parameters for PostPromotionsIdTargetRulesBatch.
type PostPromotionsIdTargetRulesBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator defines parameters for PostPromotionsIdTargetRulesBatch.
type PostPromotionsIdTargetRulesBatchJSONBodyCreateOperator string

// PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator defines parameters for PostPromotionsIdTargetRulesBatch.
type PostPromotionsIdTargetRulesBatchJSONBodyUpdateOperator string

// GetPromotionsIdRuleTypeJSONBody defines parameters for GetPromotionsIdRuleType.
type GetPromotionsIdRuleTypeJSONBody = interface{}

// GetPromotionsIdRuleTypeParams defines parameters for GetPromotionsIdRuleType.
type GetPromotionsIdRuleTypeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetRegionsJSONBody defines parameters for GetRegions.
type GetRegionsJSONBody = interface{}

// GetRegionsParams defines parameters for GetRegions.
type GetRegionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostRegionsJSONBody defines parameters for PostRegions.
type PostRegionsJSONBody struct {
	// AutomaticTaxes The region's automatic taxes.
	AutomaticTaxes bool `json:"automatic_taxes"`

	// Countries The region's countries.
	Countries []string `json:"countries"`

	// CurrencyCode The region's currency code.
	CurrencyCode string `json:"currency_code"`

	// Metadata The region's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The region's name.
	Name string `json:"name"`

	// PaymentProviders The region's payment providers.
	PaymentProviders []string `json:"payment_providers"`
}

// PostRegionsParams defines parameters for PostRegions.
type PostRegionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteRegionsIdJSONBody defines parameters for DeleteRegionsId.
type DeleteRegionsIdJSONBody = interface{}

// DeleteRegionsIdParams defines parameters for DeleteRegionsId.
type DeleteRegionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetRegionsIdJSONBody defines parameters for GetRegionsId.
type GetRegionsIdJSONBody struct {
	// Fields The region's fields.
	Fields string `json:"fields"`
}

// GetRegionsIdParams defines parameters for GetRegionsId.
type GetRegionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostRegionsIdJSONBody defines parameters for PostRegionsId.
type PostRegionsIdJSONBody struct {
	// AutomaticTaxes The region's automatic taxes.
	AutomaticTaxes bool `json:"automatic_taxes"`

	// Countries The region's countries.
	Countries []string `json:"countries"`

	// CurrencyCode The region's currency code.
	CurrencyCode string `json:"currency_code"`

	// Metadata The region's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The region's name.
	Name string `json:"name"`

	// PaymentProviders The region's payment providers.
	PaymentProviders []string `json:"payment_providers"`
}

// PostRegionsIdParams defines parameters for PostRegionsId.
type PostRegionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetReservationsJSONBody defines parameters for GetReservations.
type GetReservationsJSONBody struct {
	// CreatedAt The reservation's created at.
	CreatedAt struct {
		Contains interface{} `json:"$contains"`
		Eq       interface{} `json:"$eq"`
		Gt       interface{} `json:"$gt"`
		Gte      interface{} `json:"$gte"`
		Ilike    interface{} `json:"$ilike"`
		In       interface{} `json:"$in"`
		Like     interface{} `json:"$like"`
		Lt       interface{} `json:"$lt"`
		Lte      interface{} `json:"$lte"`
		Ne       interface{} `json:"$ne"`
		Nin      interface{} `json:"$nin"`
		Re       interface{} `json:"$re"`
	} `json:"created_at"`
	CreatedBy GetReservationsJSONBody_CreatedBy `json:"created_by"`

	// DeletedAt The reservation's deleted at.
	DeletedAt struct {
		Contains interface{} `json:"$contains"`
		Eq       interface{} `json:"$eq"`
		Gt       interface{} `json:"$gt"`
		Gte      interface{} `json:"$gte"`
		Ilike    interface{} `json:"$ilike"`
		In       interface{} `json:"$in"`
		Like     interface{} `json:"$like"`
		Lt       interface{} `json:"$lt"`
		Lte      interface{} `json:"$lte"`
		Ne       interface{} `json:"$ne"`
		Nin      interface{} `json:"$nin"`
		Re       interface{} `json:"$re"`
	} `json:"deleted_at"`
	Description GetReservationsJSONBody_Description `json:"description"`

	// Fields The reservation's fields.
	Fields          string                                  `json:"fields"`
	InventoryItemId GetReservationsJSONBody_InventoryItemId `json:"inventory_item_id"`

	// Limit The reservation's limit.
	Limit      float32                            `json:"limit"`
	LineItemId GetReservationsJSONBody_LineItemId `json:"line_item_id"`
	LocationId GetReservationsJSONBody_LocationId `json:"location_id"`

	// Offset The reservation's offset.
	Offset float32 `json:"offset"`

	// Order The reservation's order.
	Order string `json:"order"`

	// Quantity The reservation's quantity.
	Quantity struct {
		Contains interface{} `json:"$contains"`
		Eq       interface{} `json:"$eq"`
		Gt       interface{} `json:"$gt"`
		Gte      interface{} `json:"$gte"`
		Ilike    interface{} `json:"$ilike"`
		In       interface{} `json:"$in"`
		Like     interface{} `json:"$like"`
		Lt       interface{} `json:"$lt"`
		Lte      interface{} `json:"$lte"`
		Ne       interface{} `json:"$ne"`
		Nin      interface{} `json:"$nin"`
		Re       interface{} `json:"$re"`
	} `json:"quantity"`

	// UpdatedAt The reservation's updated at.
	UpdatedAt struct {
		Contains interface{} `json:"$contains"`
		Eq       interface{} `json:"$eq"`
		Gt       interface{} `json:"$gt"`
		Gte      interface{} `json:"$gte"`
		Ilike    interface{} `json:"$ilike"`
		In       interface{} `json:"$in"`
		Like     interface{} `json:"$like"`
		Lt       interface{} `json:"$lt"`
		Lte      interface{} `json:"$lte"`
		Ne       interface{} `json:"$ne"`
		Nin      interface{} `json:"$nin"`
		Re       interface{} `json:"$re"`
	} `json:"updated_at"`
}

// GetReservationsParams defines parameters for GetReservations.
type GetReservationsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetReservationsJSONBodyCreatedBy0 defines parameters for GetReservations.
type GetReservationsJSONBodyCreatedBy0 = string

// GetReservationsJSONBodyCreatedBy1 defines parameters for GetReservations.
type GetReservationsJSONBodyCreatedBy1 = []string

// GetReservationsJSONBody_CreatedBy defines parameters for GetReservations.
type GetReservationsJSONBody_CreatedBy struct {
	union json.RawMessage
}

// GetReservationsJSONBodyDescription0 defines parameters for GetReservations.
type GetReservationsJSONBodyDescription0 = string

// GetReservationsJSONBodyDescription1 defines parameters for GetReservations.
type GetReservationsJSONBodyDescription1 struct {
	Contains interface{} `json:"$contains"`
	Eq       interface{} `json:"$eq"`
	Gt       interface{} `json:"$gt"`
	Gte      interface{} `json:"$gte"`
	Ilike    interface{} `json:"$ilike"`
	In       interface{} `json:"$in"`
	Like     interface{} `json:"$like"`
	Lt       interface{} `json:"$lt"`
	Lte      interface{} `json:"$lte"`
	Ne       interface{} `json:"$ne"`
	Nin      interface{} `json:"$nin"`
	Re       interface{} `json:"$re"`
}

// GetReservationsJSONBody_Description defines parameters for GetReservations.
type GetReservationsJSONBody_Description struct {
	union json.RawMessage
}

// GetReservationsJSONBodyInventoryItemId0 defines parameters for GetReservations.
type GetReservationsJSONBodyInventoryItemId0 = string

// GetReservationsJSONBodyInventoryItemId1 defines parameters for GetReservations.
type GetReservationsJSONBodyInventoryItemId1 = []string

// GetReservationsJSONBody_InventoryItemId defines parameters for GetReservations.
type GetReservationsJSONBody_InventoryItemId struct {
	union json.RawMessage
}

// GetReservationsJSONBodyLineItemId0 defines parameters for GetReservations.
type GetReservationsJSONBodyLineItemId0 = string

// GetReservationsJSONBodyLineItemId1 defines parameters for GetReservations.
type GetReservationsJSONBodyLineItemId1 = []string

// GetReservationsJSONBody_LineItemId defines parameters for GetReservations.
type GetReservationsJSONBody_LineItemId struct {
	union json.RawMessage
}

// GetReservationsJSONBodyLocationId0 defines parameters for GetReservations.
type GetReservationsJSONBodyLocationId0 = string

// GetReservationsJSONBodyLocationId1 defines parameters for GetReservations.
type GetReservationsJSONBodyLocationId1 = []string

// GetReservationsJSONBody_LocationId defines parameters for GetReservations.
type GetReservationsJSONBody_LocationId struct {
	union json.RawMessage
}

// PostReservationsJSONBody defines parameters for PostReservations.
type PostReservationsJSONBody struct {
	// Description The reservation's description.
	Description string `json:"description"`

	// InventoryItemId The reservation's inventory item id.
	InventoryItemId string `json:"inventory_item_id"`

	// LineItemId The reservation's line item id.
	LineItemId string `json:"line_item_id"`

	// LocationId The reservation's location id.
	LocationId string `json:"location_id"`

	// Metadata The reservation's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Quantity The reservation's quantity.
	Quantity float32 `json:"quantity"`
}

// PostReservationsParams defines parameters for PostReservations.
type PostReservationsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteReservationsIdJSONBody defines parameters for DeleteReservationsId.
type DeleteReservationsIdJSONBody = interface{}

// DeleteReservationsIdParams defines parameters for DeleteReservationsId.
type DeleteReservationsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetReservationsIdJSONBody defines parameters for GetReservationsId.
type GetReservationsIdJSONBody struct {
	// Fields The reservation's fields.
	Fields string `json:"fields"`
}

// GetReservationsIdParams defines parameters for GetReservationsId.
type GetReservationsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostReservationsIdJSONBody defines parameters for PostReservationsId.
type PostReservationsIdJSONBody struct {
	// Description The reservation's description.
	Description string `json:"description"`

	// LocationId The reservation's location id.
	LocationId string `json:"location_id"`

	// Metadata The reservation's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Quantity The reservation's quantity.
	Quantity float32 `json:"quantity"`
}

// PostReservationsIdParams defines parameters for PostReservationsId.
type PostReservationsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetSalesChannelsJSONBody defines parameters for GetSalesChannels.
type GetSalesChannelsJSONBody = interface{}

// GetSalesChannelsParams defines parameters for GetSalesChannels.
type GetSalesChannelsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostSalesChannelsJSONBody defines parameters for PostSalesChannels.
type PostSalesChannelsJSONBody struct {
	// Description The sales channel's description.
	Description string `json:"description"`

	// IsDisabled The sales channel's is disabled.
	IsDisabled bool `json:"is_disabled"`

	// Metadata The sales channel's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The sales channel's name.
	Name string `json:"name"`
}

// PostSalesChannelsParams defines parameters for PostSalesChannels.
type PostSalesChannelsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteSalesChannelsIdJSONBody defines parameters for DeleteSalesChannelsId.
type DeleteSalesChannelsIdJSONBody = interface{}

// DeleteSalesChannelsIdParams defines parameters for DeleteSalesChannelsId.
type DeleteSalesChannelsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetSalesChannelsIdJSONBody defines parameters for GetSalesChannelsId.
type GetSalesChannelsIdJSONBody struct {
	// Fields The sales channel's fields.
	Fields string `json:"fields"`
}

// GetSalesChannelsIdParams defines parameters for GetSalesChannelsId.
type GetSalesChannelsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostSalesChannelsIdJSONBody defines parameters for PostSalesChannelsId.
type PostSalesChannelsIdJSONBody struct {
	// Description The sales channel's description.
	Description string `json:"description"`

	// IsDisabled The sales channel's is disabled.
	IsDisabled bool `json:"is_disabled"`

	// Metadata The sales channel's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The sales channel's name.
	Name string `json:"name"`
}

// PostSalesChannelsIdParams defines parameters for PostSalesChannelsId.
type PostSalesChannelsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostSalesChannelsIdProductsJSONBody defines parameters for PostSalesChannelsIdProducts.
type PostSalesChannelsIdProductsJSONBody struct {
	// Add The sales channel's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The sales channel's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostSalesChannelsIdProductsParams defines parameters for PostSalesChannelsIdProducts.
type PostSalesChannelsIdProductsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetShippingOptionsJSONBody defines parameters for GetShippingOptions.
type GetShippingOptionsJSONBody struct {
	// Fields The shipping option's fields.
	Fields string `json:"fields"`

	// Limit The shipping option's limit.
	Limit float32 `json:"limit"`

	// Offset The shipping option's offset.
	Offset float32 `json:"offset"`

	// Order The shipping option's order.
	Order string `json:"order"`
}

// GetShippingOptionsParams defines parameters for GetShippingOptions.
type GetShippingOptionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostShippingOptionsJSONBody defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBody struct {
	// Data The shipping option's data.
	Data map[string]interface{} `json:"data"`

	// Name The shipping option's name.
	Name      string `json:"name"`
	PriceType string `json:"price_type"`

	// Prices The shipping option's prices.
	Prices []PostShippingOptionsJSONBody_Prices_Item `json:"prices"`

	// ProviderId The shipping option's provider id.
	ProviderId string `json:"provider_id"`

	// Rules The shipping option's rules.
	Rules []struct {
		// Attribute The rule's attribute.
		Attribute string                                  `json:"attribute"`
		Operator  string                                  `json:"operator"`
		Value     PostShippingOptionsJSONBody_Rules_Value `json:"value"`
	} `json:"rules"`

	// ServiceZoneId The shipping option's service zone id.
	ServiceZoneId string `json:"service_zone_id"`

	// ShippingProfileId The shipping option's shipping profile id.
	ShippingProfileId string `json:"shipping_profile_id"`

	// Type The shipping option's type.
	Type struct {
		// Code The type's code.
		Code string `json:"code"`

		// Description The type's description.
		Description string `json:"description"`

		// Label The type's label.
		Label string `json:"label"`
	} `json:"type"`
}

// PostShippingOptionsParams defines parameters for PostShippingOptions.
type PostShippingOptionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostShippingOptionsJSONBodyPrices0 defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBodyPrices0 struct {
	// Amount The price's amount.
	Amount float32 `json:"amount"`

	// CurrencyCode The price's currency code.
	CurrencyCode string `json:"currency_code"`
}

// PostShippingOptionsJSONBodyPrices1 defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBodyPrices1 struct {
	// Amount The price's amount.
	Amount float32 `json:"amount"`

	// RegionId The price's region id.
	RegionId string `json:"region_id"`
}

// PostShippingOptionsJSONBody_Prices_Item defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBody_Prices_Item struct {
	union json.RawMessage
}

// PostShippingOptionsJSONBodyRulesValue0 defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBodyRulesValue0 = string

// PostShippingOptionsJSONBodyRulesValue1 defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBodyRulesValue1 = []string

// PostShippingOptionsJSONBody_Rules_Value defines parameters for PostShippingOptions.
type PostShippingOptionsJSONBody_Rules_Value struct {
	union json.RawMessage
}

// DeleteShippingOptionsIdJSONBody defines parameters for DeleteShippingOptionsId.
type DeleteShippingOptionsIdJSONBody = interface{}

// DeleteShippingOptionsIdParams defines parameters for DeleteShippingOptionsId.
type DeleteShippingOptionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostShippingOptionsIdJSONBody defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBody struct {
	// Data The shipping option's data.
	Data map[string]interface{} `json:"data"`

	// Name The shipping option's name.
	Name      string `json:"name"`
	PriceType string `json:"price_type"`

	// Prices The shipping option's prices.
	Prices []PostShippingOptionsIdJSONBody_Prices_Item `json:"prices"`

	// ProviderId The shipping option's provider id.
	ProviderId string `json:"provider_id"`

	// Rules The shipping option's rules.
	Rules []PostShippingOptionsIdJSONBody_Rules_Item `json:"rules"`

	// ShippingProfileId The shipping option's shipping profile id.
	ShippingProfileId string `json:"shipping_profile_id"`

	// Type The shipping option's type.
	Type struct {
		// Code The type's code.
		Code string `json:"code"`

		// Description The type's description.
		Description string `json:"description"`

		// Label The type's label.
		Label string `json:"label"`
	} `json:"type"`
}

// PostShippingOptionsIdParams defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostShippingOptionsIdJSONBodyPrices0 defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBodyPrices0 struct {
	// Amount The price's amount.
	Amount float32 `json:"amount"`

	// CurrencyCode The price's currency code.
	CurrencyCode string `json:"currency_code"`

	// Id The price's ID.
	Id string `json:"id"`
}

// PostShippingOptionsIdJSONBodyPrices1 defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBodyPrices1 struct {
	// Amount The price's amount.
	Amount float32 `json:"amount"`

	// Id The price's ID.
	Id string `json:"id"`

	// RegionId The price's region id.
	RegionId string `json:"region_id"`
}

// PostShippingOptionsIdJSONBody_Prices_Item defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBody_Prices_Item struct {
	union json.RawMessage
}

// PostShippingOptionsIdJSONBodyRules0 defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBodyRules0 struct {
	// Attribute The rule's attribute.
	Attribute string      `json:"attribute"`
	Operator  interface{} `json:"operator"`

	// Value The rule's value.
	Value string `json:"value"`
}

// PostShippingOptionsIdJSONBodyRules1 defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBodyRules1 struct {
	// Attribute The rule's attribute.
	Attribute string `json:"attribute"`

	// Id The rule's ID.
	Id       string      `json:"id"`
	Operator interface{} `json:"operator"`

	// Value The rule's value.
	Value string `json:"value"`
}

// PostShippingOptionsIdJSONBody_Rules_Item defines parameters for PostShippingOptionsId.
type PostShippingOptionsIdJSONBody_Rules_Item struct {
	union json.RawMessage
}

// PostShippingOptionsIdRulesBatchJSONBody defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBody struct {
	// Create The shipping option's create.
	Create *[]struct {
		// Attribute The create's attribute.
		Attribute string                                                `json:"attribute"`
		Operator  PostShippingOptionsIdRulesBatchJSONBodyCreateOperator `json:"operator"`
		Value     PostShippingOptionsIdRulesBatchJSONBody_Create_Value  `json:"value"`
	} `json:"create,omitempty"`

	// Delete The shipping option's delete.
	Delete *[]string `json:"delete,omitempty"`

	// Update The shipping option's update.
	Update *[]struct {
		// Attribute The update's attribute.
		Attribute string `json:"attribute"`

		// Id The update's ID.
		Id       string                                                `json:"id"`
		Operator PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator `json:"operator"`
		Value    PostShippingOptionsIdRulesBatchJSONBody_Update_Value  `json:"value"`
	} `json:"update,omitempty"`
}

// PostShippingOptionsIdRulesBatchParams defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostShippingOptionsIdRulesBatchJSONBodyCreateOperator defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBodyCreateOperator string

// PostShippingOptionsIdRulesBatchJSONBodyCreateValue0 defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBodyCreateValue0 = string

// PostShippingOptionsIdRulesBatchJSONBodyCreateValue1 defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBodyCreateValue1 = []string

// PostShippingOptionsIdRulesBatchJSONBody_Create_Value defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBody_Create_Value struct {
	union json.RawMessage
}

// PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBodyUpdateOperator string

// PostShippingOptionsIdRulesBatchJSONBodyUpdateValue0 defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBodyUpdateValue0 = string

// PostShippingOptionsIdRulesBatchJSONBodyUpdateValue1 defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBodyUpdateValue1 = []string

// PostShippingOptionsIdRulesBatchJSONBody_Update_Value defines parameters for PostShippingOptionsIdRulesBatch.
type PostShippingOptionsIdRulesBatchJSONBody_Update_Value struct {
	union json.RawMessage
}

// GetShippingProfilesJSONBody defines parameters for GetShippingProfiles.
type GetShippingProfilesJSONBody = interface{}

// GetShippingProfilesParams defines parameters for GetShippingProfiles.
type GetShippingProfilesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostShippingProfilesJSONBody defines parameters for PostShippingProfiles.
type PostShippingProfilesJSONBody struct {
	// Metadata The shipping profile's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The shipping profile's name.
	Name string `json:"name"`

	// Type The shipping profile's type.
	Type string `json:"type"`
}

// PostShippingProfilesParams defines parameters for PostShippingProfiles.
type PostShippingProfilesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteShippingProfilesIdJSONBody defines parameters for DeleteShippingProfilesId.
type DeleteShippingProfilesIdJSONBody = interface{}

// DeleteShippingProfilesIdParams defines parameters for DeleteShippingProfilesId.
type DeleteShippingProfilesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetShippingProfilesIdJSONBody defines parameters for GetShippingProfilesId.
type GetShippingProfilesIdJSONBody struct {
	// Fields The shipping profile's fields.
	Fields string `json:"fields"`
}

// GetShippingProfilesIdParams defines parameters for GetShippingProfilesId.
type GetShippingProfilesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetStockLocationsJSONBody defines parameters for GetStockLocations.
type GetStockLocationsJSONBody = interface{}

// GetStockLocationsParams defines parameters for GetStockLocations.
type GetStockLocationsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostStockLocationsJSONBody defines parameters for PostStockLocations.
type PostStockLocationsJSONBody struct {
	// Address The stock location's address.
	Address struct {
		// Address1 The address's address 1.
		Address1 string `json:"address_1"`

		// Address2 The address's address 2.
		Address2 string `json:"address_2"`

		// City The address's city.
		City string `json:"city"`

		// Company The address's company.
		Company string `json:"company"`

		// CountryCode The address's country code.
		CountryCode string `json:"country_code"`

		// Phone The address's phone.
		Phone string `json:"phone"`

		// PostalCode The address's postal code.
		PostalCode string `json:"postal_code"`

		// Province The address's province.
		Province string `json:"province"`
	} `json:"address"`

	// AddressId The stock location's address id.
	AddressId string `json:"address_id"`

	// Metadata The stock location's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The stock location's name.
	Name string `json:"name"`
}

// PostStockLocationsParams defines parameters for PostStockLocations.
type PostStockLocationsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteStockLocationsIdJSONBody defines parameters for DeleteStockLocationsId.
type DeleteStockLocationsIdJSONBody = interface{}

// DeleteStockLocationsIdParams defines parameters for DeleteStockLocationsId.
type DeleteStockLocationsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetStockLocationsIdJSONBody defines parameters for GetStockLocationsId.
type GetStockLocationsIdJSONBody struct {
	// Fields The stock location's fields.
	Fields string `json:"fields"`
}

// GetStockLocationsIdParams defines parameters for GetStockLocationsId.
type GetStockLocationsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostStockLocationsIdJSONBody defines parameters for PostStockLocationsId.
type PostStockLocationsIdJSONBody struct {
	// Address The stock location's address.
	Address struct {
		// Address1 The address's address 1.
		Address1 string `json:"address_1"`

		// Address2 The address's address 2.
		Address2 string `json:"address_2"`

		// City The address's city.
		City string `json:"city"`

		// Company The address's company.
		Company string `json:"company"`

		// CountryCode The address's country code.
		CountryCode string `json:"country_code"`

		// Phone The address's phone.
		Phone string `json:"phone"`

		// PostalCode The address's postal code.
		PostalCode string `json:"postal_code"`

		// Province The address's province.
		Province string `json:"province"`
	} `json:"address"`

	// AddressId The stock location's address id.
	AddressId string `json:"address_id"`

	// Metadata The stock location's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The stock location's name.
	Name string `json:"name"`
}

// PostStockLocationsIdParams defines parameters for PostStockLocationsId.
type PostStockLocationsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostStockLocationsIdFulfillmentSetsJSONBody defines parameters for PostStockLocationsIdFulfillmentSets.
type PostStockLocationsIdFulfillmentSetsJSONBody struct {
	// Name The stock location's name.
	Name string `json:"name"`

	// Type The stock location's type.
	Type string `json:"type"`
}

// PostStockLocationsIdFulfillmentSetsParams defines parameters for PostStockLocationsIdFulfillmentSets.
type PostStockLocationsIdFulfillmentSetsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostStockLocationsIdSalesChannelsJSONBody defines parameters for PostStockLocationsIdSalesChannels.
type PostStockLocationsIdSalesChannelsJSONBody struct {
	// Add The stock location's add.
	Add *[]string `json:"add,omitempty"`

	// Remove The stock location's remove.
	Remove *[]string `json:"remove,omitempty"`
}

// PostStockLocationsIdSalesChannelsParams defines parameters for PostStockLocationsIdSalesChannels.
type PostStockLocationsIdSalesChannelsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetStoresJSONBody defines parameters for GetStores.
type GetStoresJSONBody = interface{}

// GetStoresParams defines parameters for GetStores.
type GetStoresParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetStoresIdJSONBody defines parameters for GetStoresId.
type GetStoresIdJSONBody struct {
	// Fields The store's fields.
	Fields string `json:"fields"`
}

// GetStoresIdParams defines parameters for GetStoresId.
type GetStoresIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostStoresIdJSONBody defines parameters for PostStoresId.
type PostStoresIdJSONBody struct {
	// DefaultCurrencyCode The store's default currency code.
	DefaultCurrencyCode string `json:"default_currency_code"`

	// DefaultLocationId The store's default location id.
	DefaultLocationId string `json:"default_location_id"`

	// DefaultRegionId The store's default region id.
	DefaultRegionId string `json:"default_region_id"`

	// DefaultSalesChannelId The store's default sales channel id.
	DefaultSalesChannelId string `json:"default_sales_channel_id"`

	// Metadata The store's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The store's name.
	Name string `json:"name"`

	// SupportedCurrencyCodes The store's supported currency codes.
	SupportedCurrencyCodes []string `json:"supported_currency_codes"`
}

// PostStoresIdParams defines parameters for PostStoresId.
type PostStoresIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetTaxRatesJSONBody defines parameters for GetTaxRates.
type GetTaxRatesJSONBody = interface{}

// GetTaxRatesParams defines parameters for GetTaxRates.
type GetTaxRatesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostTaxRatesJSONBody defines parameters for PostTaxRates.
type PostTaxRatesJSONBody struct {
	// Code The tax rate's code.
	Code string `json:"code"`

	// IsCombinable The tax rate's is combinable.
	IsCombinable bool `json:"is_combinable"`

	// IsDefault The tax rate's is default.
	IsDefault bool `json:"is_default"`

	// Metadata The tax rate's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The tax rate's name.
	Name string `json:"name"`

	// Rate The tax rate's rate.
	Rate float32 `json:"rate"`

	// Rules The tax rate's rules.
	Rules []struct {
		// Reference The rule's reference.
		Reference string `json:"reference"`

		// ReferenceId The rule's reference id.
		ReferenceId string `json:"reference_id"`
	} `json:"rules"`

	// TaxRegionId The tax rate's tax region id.
	TaxRegionId string `json:"tax_region_id"`
}

// PostTaxRatesParams defines parameters for PostTaxRates.
type PostTaxRatesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteTaxRatesIdJSONBody defines parameters for DeleteTaxRatesId.
type DeleteTaxRatesIdJSONBody = interface{}

// DeleteTaxRatesIdParams defines parameters for DeleteTaxRatesId.
type DeleteTaxRatesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetTaxRatesIdJSONBody defines parameters for GetTaxRatesId.
type GetTaxRatesIdJSONBody struct {
	// Fields The tax rate's fields.
	Fields string `json:"fields"`
}

// GetTaxRatesIdParams defines parameters for GetTaxRatesId.
type GetTaxRatesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostTaxRatesIdJSONBody defines parameters for PostTaxRatesId.
type PostTaxRatesIdJSONBody struct {
	// Code The tax rate's code.
	Code string `json:"code"`

	// IsCombinable The tax rate's is combinable.
	IsCombinable bool `json:"is_combinable"`

	// IsDefault The tax rate's is default.
	IsDefault bool `json:"is_default"`

	// Metadata The tax rate's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// Name The tax rate's name.
	Name string `json:"name"`

	// Rate The tax rate's rate.
	Rate float32 `json:"rate"`

	// Rules The tax rate's rules.
	Rules []struct {
		// Reference The rule's reference.
		Reference string `json:"reference"`

		// ReferenceId The rule's reference id.
		ReferenceId string `json:"reference_id"`
	} `json:"rules"`
}

// PostTaxRatesIdParams defines parameters for PostTaxRatesId.
type PostTaxRatesIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostTaxRatesIdRulesJSONBody defines parameters for PostTaxRatesIdRules.
type PostTaxRatesIdRulesJSONBody struct {
	// Reference The tax rate's reference.
	Reference string `json:"reference"`

	// ReferenceId The tax rate's reference id.
	ReferenceId string `json:"reference_id"`
}

// PostTaxRatesIdRulesParams defines parameters for PostTaxRatesIdRules.
type PostTaxRatesIdRulesParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteTaxRatesIdRulesRuleIdJSONBody defines parameters for DeleteTaxRatesIdRulesRuleId.
type DeleteTaxRatesIdRulesRuleIdJSONBody = interface{}

// DeleteTaxRatesIdRulesRuleIdParams defines parameters for DeleteTaxRatesIdRulesRuleId.
type DeleteTaxRatesIdRulesRuleIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetTaxRegionsJSONBody defines parameters for GetTaxRegions.
type GetTaxRegionsJSONBody = interface{}

// GetTaxRegionsParams defines parameters for GetTaxRegions.
type GetTaxRegionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostTaxRegionsJSONBody defines parameters for PostTaxRegions.
type PostTaxRegionsJSONBody struct {
	// CountryCode The tax region's country code.
	CountryCode string `json:"country_code"`

	// DefaultTaxRate The tax region's default tax rate.
	DefaultTaxRate struct {
		// Code The default tax rate's code.
		Code         string                                           `json:"code"`
		IsCombinable PostTaxRegionsJSONBodyDefaultTaxRateIsCombinable `json:"is_combinable"`

		// Metadata The default tax rate's metadata.
		Metadata map[string]interface{} `json:"metadata"`

		// Name The default tax rate's name.
		Name string `json:"name"`

		// Rate The default tax rate's rate.
		Rate float32 `json:"rate"`
	} `json:"default_tax_rate"`

	// Metadata The tax region's metadata.
	Metadata map[string]interface{} `json:"metadata"`

	// ParentId The tax region's parent id.
	ParentId string `json:"parent_id"`

	// ProvinceCode The tax region's province code.
	ProvinceCode string `json:"province_code"`
}

// PostTaxRegionsParams defines parameters for PostTaxRegions.
type PostTaxRegionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostTaxRegionsJSONBodyDefaultTaxRateIsCombinable defines parameters for PostTaxRegions.
type PostTaxRegionsJSONBodyDefaultTaxRateIsCombinable string

// DeleteTaxRegionsIdJSONBody defines parameters for DeleteTaxRegionsId.
type DeleteTaxRegionsIdJSONBody = interface{}

// DeleteTaxRegionsIdParams defines parameters for DeleteTaxRegionsId.
type DeleteTaxRegionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetTaxRegionsIdJSONBody defines parameters for GetTaxRegionsId.
type GetTaxRegionsIdJSONBody = interface{}

// GetTaxRegionsIdParams defines parameters for GetTaxRegionsId.
type GetTaxRegionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostUploadsParams defines parameters for PostUploads.
type PostUploadsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteUploadsIdJSONBody defines parameters for DeleteUploadsId.
type DeleteUploadsIdJSONBody = interface{}

// DeleteUploadsIdParams defines parameters for DeleteUploadsId.
type DeleteUploadsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetUploadsIdJSONBody defines parameters for GetUploadsId.
type GetUploadsIdJSONBody = interface{}

// GetUploadsIdParams defines parameters for GetUploadsId.
type GetUploadsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetUsersJSONBody defines parameters for GetUsers.
type GetUsersJSONBody = interface{}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostUsersParams defines parameters for PostUsers.
type PostUsersParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetUsersMeJSONBody defines parameters for GetUsersMe.
type GetUsersMeJSONBody = interface{}

// GetUsersMeParams defines parameters for GetUsersMe.
type GetUsersMeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteUsersIdJSONBody defines parameters for DeleteUsersId.
type DeleteUsersIdJSONBody = interface{}

// DeleteUsersIdParams defines parameters for DeleteUsersId.
type DeleteUsersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetUsersIdJSONBody defines parameters for GetUsersId.
type GetUsersIdJSONBody = interface{}

// GetUsersIdParams defines parameters for GetUsersId.
type GetUsersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostUsersIdJSONBody defines parameters for PostUsersId.
type PostUsersIdJSONBody struct {
	// AvatarUrl The user's avatar url.
	AvatarUrl string `json:"avatar_url"`

	// FirstName The user's first name.
	FirstName string `json:"first_name"`

	// LastName The user's last name.
	LastName string `json:"last_name"`
}

// PostUsersIdParams defines parameters for PostUsersId.
type PostUsersIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetWorkflowsExecutionsJSONBody defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBody struct {
	// Fields The workflows execution's fields.
	Fields string `json:"fields"`

	// Limit The workflows execution's limit.
	Limit float32 `json:"limit"`

	// Offset The workflows execution's offset.
	Offset float32 `json:"offset"`

	// Order The workflows execution's order.
	Order         string                                       `json:"order"`
	TransactionId GetWorkflowsExecutionsJSONBody_TransactionId `json:"transaction_id"`
	WorkflowId    GetWorkflowsExecutionsJSONBody_WorkflowId    `json:"workflow_id"`
}

// GetWorkflowsExecutionsParams defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetWorkflowsExecutionsJSONBodyTransactionId0 defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBodyTransactionId0 = string

// GetWorkflowsExecutionsJSONBodyTransactionId1 defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBodyTransactionId1 = []string

// GetWorkflowsExecutionsJSONBody_TransactionId defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBody_TransactionId struct {
	union json.RawMessage
}

// GetWorkflowsExecutionsJSONBodyWorkflowId0 defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBodyWorkflowId0 = string

// GetWorkflowsExecutionsJSONBodyWorkflowId1 defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBodyWorkflowId1 = []string

// GetWorkflowsExecutionsJSONBody_WorkflowId defines parameters for GetWorkflowsExecutions.
type GetWorkflowsExecutionsJSONBody_WorkflowId struct {
	union json.RawMessage
}

// GetWorkflowsExecutionsIdJSONBody defines parameters for GetWorkflowsExecutionsId.
type GetWorkflowsExecutionsIdJSONBody struct {
	// Fields The workflows execution's fields.
	Fields string `json:"fields"`
}

// GetWorkflowsExecutionsIdParams defines parameters for GetWorkflowsExecutionsId.
type GetWorkflowsExecutionsIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostWorkflowsExecutionsWorkflowIdRunJSONBody defines parameters for PostWorkflowsExecutionsWorkflowIdRun.
type PostWorkflowsExecutionsWorkflowIdRunJSONBody struct {
	Input interface{} `json:"input"`

	// TransactionId The workflows execution's transaction id.
	TransactionId string `json:"transaction_id"`
}

// PostWorkflowsExecutionsWorkflowIdRunParams defines parameters for PostWorkflowsExecutionsWorkflowIdRun.
type PostWorkflowsExecutionsWorkflowIdRunParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBody defines parameters for PostWorkflowsExecutionsWorkflowIdStepsFailure.
type PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBody struct {
	Action          PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyAction `json:"action"`
	CompensateInput interface{}                                                 `json:"compensate_input"`
	Response        interface{}                                                 `json:"response"`

	// StepId The workflows execution's step id.
	StepId string `json:"step_id"`

	// TransactionId The workflows execution's transaction id.
	TransactionId string `json:"transaction_id"`
}

// PostWorkflowsExecutionsWorkflowIdStepsFailureParams defines parameters for PostWorkflowsExecutionsWorkflowIdStepsFailure.
type PostWorkflowsExecutionsWorkflowIdStepsFailureParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyAction defines parameters for PostWorkflowsExecutionsWorkflowIdStepsFailure.
type PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBodyAction string

// PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBody defines parameters for PostWorkflowsExecutionsWorkflowIdStepsSuccess.
type PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBody struct {
	Action          PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyAction `json:"action"`
	CompensateInput interface{}                                                 `json:"compensate_input"`
	Response        interface{}                                                 `json:"response"`

	// StepId The workflows execution's step id.
	StepId string `json:"step_id"`

	// TransactionId The workflows execution's transaction id.
	TransactionId string `json:"transaction_id"`
}

// PostWorkflowsExecutionsWorkflowIdStepsSuccessParams defines parameters for PostWorkflowsExecutionsWorkflowIdStepsSuccess.
type PostWorkflowsExecutionsWorkflowIdStepsSuccessParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyAction defines parameters for PostWorkflowsExecutionsWorkflowIdStepsSuccess.
type PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBodyAction string

// GetWorkflowsExecutionsWorkflowIdSubscribeJSONBody defines parameters for GetWorkflowsExecutionsWorkflowIdSubscribe.
type GetWorkflowsExecutionsWorkflowIdSubscribeJSONBody = interface{}

// GetWorkflowsExecutionsWorkflowIdSubscribeParams defines parameters for GetWorkflowsExecutionsWorkflowIdSubscribe.
type GetWorkflowsExecutionsWorkflowIdSubscribeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetWorkflowsExecutionsWorkflowIdTransactionIdJSONBody defines parameters for GetWorkflowsExecutionsWorkflowIdTransactionId.
type GetWorkflowsExecutionsWorkflowIdTransactionIdJSONBody struct {
	// Fields The workflows execution's fields.
	Fields string `json:"fields"`
}

// GetWorkflowsExecutionsWorkflowIdTransactionIdParams defines parameters for GetWorkflowsExecutionsWorkflowIdTransactionId.
type GetWorkflowsExecutionsWorkflowIdTransactionIdParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONBody defines parameters for GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe.
type GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONBody = interface{}

// GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams defines parameters for GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe.
type GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams struct {
	// Expand Comma-separated relations that should be expanded in the returned data.
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// Fields Comma-separated fields that should be included in the returned data.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Offset The number of items to skip when retrieving a list.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of items returned in the list.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Field to sort items in the list by.
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// GetApiKeysJSONRequestBody defines body for GetApiKeys for application/json ContentType.
type GetApiKeysJSONRequestBody = GetApiKeysJSONBody

// PostApiKeysJSONRequestBody defines body for PostApiKeys for application/json ContentType.
type PostApiKeysJSONRequestBody PostApiKeysJSONBody

// DeleteApiKeysIdJSONRequestBody defines body for DeleteApiKeysId for application/json ContentType.
type DeleteApiKeysIdJSONRequestBody = DeleteApiKeysIdJSONBody

// GetApiKeysIdJSONRequestBody defines body for GetApiKeysId for application/json ContentType.
type GetApiKeysIdJSONRequestBody = GetApiKeysIdJSONBody

// PostApiKeysIdJSONRequestBody defines body for PostApiKeysId for application/json ContentType.
type PostApiKeysIdJSONRequestBody PostApiKeysIdJSONBody

// PostApiKeysIdRevokeJSONRequestBody defines body for PostApiKeysIdRevoke for application/json ContentType.
type PostApiKeysIdRevokeJSONRequestBody PostApiKeysIdRevokeJSONBody

// PostApiKeysIdSalesChannelsJSONRequestBody defines body for PostApiKeysIdSalesChannels for application/json ContentType.
type PostApiKeysIdSalesChannelsJSONRequestBody PostApiKeysIdSalesChannelsJSONBody

// GetCampaignsJSONRequestBody defines body for GetCampaigns for application/json ContentType.
type GetCampaignsJSONRequestBody = GetCampaignsJSONBody

// PostCampaignsJSONRequestBody defines body for PostCampaigns for application/json ContentType.
type PostCampaignsJSONRequestBody PostCampaignsJSONBody

// DeleteCampaignsIdJSONRequestBody defines body for DeleteCampaignsId for application/json ContentType.
type DeleteCampaignsIdJSONRequestBody = DeleteCampaignsIdJSONBody

// GetCampaignsIdJSONRequestBody defines body for GetCampaignsId for application/json ContentType.
type GetCampaignsIdJSONRequestBody = GetCampaignsIdJSONBody

// PostCampaignsIdJSONRequestBody defines body for PostCampaignsId for application/json ContentType.
type PostCampaignsIdJSONRequestBody PostCampaignsIdJSONBody

// GetCollectionsJSONRequestBody defines body for GetCollections for application/json ContentType.
type GetCollectionsJSONRequestBody = GetCollectionsJSONBody

// PostCollectionsJSONRequestBody defines body for PostCollections for application/json ContentType.
type PostCollectionsJSONRequestBody PostCollectionsJSONBody

// DeleteCollectionsIdJSONRequestBody defines body for DeleteCollectionsId for application/json ContentType.
type DeleteCollectionsIdJSONRequestBody = DeleteCollectionsIdJSONBody

// GetCollectionsIdJSONRequestBody defines body for GetCollectionsId for application/json ContentType.
type GetCollectionsIdJSONRequestBody = GetCollectionsIdJSONBody

// PostCollectionsIdJSONRequestBody defines body for PostCollectionsId for application/json ContentType.
type PostCollectionsIdJSONRequestBody PostCollectionsIdJSONBody

// PostCollectionsIdProductsJSONRequestBody defines body for PostCollectionsIdProducts for application/json ContentType.
type PostCollectionsIdProductsJSONRequestBody PostCollectionsIdProductsJSONBody

// GetCurrenciesJSONRequestBody defines body for GetCurrencies for application/json ContentType.
type GetCurrenciesJSONRequestBody = GetCurrenciesJSONBody

// GetCurrenciesCodeJSONRequestBody defines body for GetCurrenciesCode for application/json ContentType.
type GetCurrenciesCodeJSONRequestBody = GetCurrenciesCodeJSONBody

// GetCustomerGroupsJSONRequestBody defines body for GetCustomerGroups for application/json ContentType.
type GetCustomerGroupsJSONRequestBody = GetCustomerGroupsJSONBody

// PostCustomerGroupsJSONRequestBody defines body for PostCustomerGroups for application/json ContentType.
type PostCustomerGroupsJSONRequestBody PostCustomerGroupsJSONBody

// DeleteCustomerGroupsIdJSONRequestBody defines body for DeleteCustomerGroupsId for application/json ContentType.
type DeleteCustomerGroupsIdJSONRequestBody = DeleteCustomerGroupsIdJSONBody

// GetCustomerGroupsIdJSONRequestBody defines body for GetCustomerGroupsId for application/json ContentType.
type GetCustomerGroupsIdJSONRequestBody = GetCustomerGroupsIdJSONBody

// PostCustomerGroupsIdJSONRequestBody defines body for PostCustomerGroupsId for application/json ContentType.
type PostCustomerGroupsIdJSONRequestBody PostCustomerGroupsIdJSONBody

// PostCustomerGroupsIdCustomersJSONRequestBody defines body for PostCustomerGroupsIdCustomers for application/json ContentType.
type PostCustomerGroupsIdCustomersJSONRequestBody PostCustomerGroupsIdCustomersJSONBody

// GetCustomersJSONRequestBody defines body for GetCustomers for application/json ContentType.
type GetCustomersJSONRequestBody = GetCustomersJSONBody

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody PostCustomersJSONBody

// DeleteCustomersIdJSONRequestBody defines body for DeleteCustomersId for application/json ContentType.
type DeleteCustomersIdJSONRequestBody = DeleteCustomersIdJSONBody

// GetCustomersIdJSONRequestBody defines body for GetCustomersId for application/json ContentType.
type GetCustomersIdJSONRequestBody = GetCustomersIdJSONBody

// PostCustomersIdJSONRequestBody defines body for PostCustomersId for application/json ContentType.
type PostCustomersIdJSONRequestBody PostCustomersIdJSONBody

// GetCustomersIdAddressesJSONRequestBody defines body for GetCustomersIdAddresses for application/json ContentType.
type GetCustomersIdAddressesJSONRequestBody = GetCustomersIdAddressesJSONBody

// PostCustomersIdAddressesJSONRequestBody defines body for PostCustomersIdAddresses for application/json ContentType.
type PostCustomersIdAddressesJSONRequestBody PostCustomersIdAddressesJSONBody

// DeleteCustomersIdAddressesAddressIdJSONRequestBody defines body for DeleteCustomersIdAddressesAddressId for application/json ContentType.
type DeleteCustomersIdAddressesAddressIdJSONRequestBody = DeleteCustomersIdAddressesAddressIdJSONBody

// GetCustomersIdAddressesAddressIdJSONRequestBody defines body for GetCustomersIdAddressesAddressId for application/json ContentType.
type GetCustomersIdAddressesAddressIdJSONRequestBody = GetCustomersIdAddressesAddressIdJSONBody

// PostCustomersIdAddressesAddressIdJSONRequestBody defines body for PostCustomersIdAddressesAddressId for application/json ContentType.
type PostCustomersIdAddressesAddressIdJSONRequestBody PostCustomersIdAddressesAddressIdJSONBody

// GetDraftOrdersJSONRequestBody defines body for GetDraftOrders for application/json ContentType.
type GetDraftOrdersJSONRequestBody = GetDraftOrdersJSONBody

// PostDraftOrdersJSONRequestBody defines body for PostDraftOrders for application/json ContentType.
type PostDraftOrdersJSONRequestBody PostDraftOrdersJSONBody

// GetDraftOrdersIdJSONRequestBody defines body for GetDraftOrdersId for application/json ContentType.
type GetDraftOrdersIdJSONRequestBody = GetDraftOrdersIdJSONBody

// GetFulfillmentProvidersJSONRequestBody defines body for GetFulfillmentProviders for application/json ContentType.
type GetFulfillmentProvidersJSONRequestBody GetFulfillmentProvidersJSONBody

// DeleteFulfillmentSetsIdJSONRequestBody defines body for DeleteFulfillmentSetsId for application/json ContentType.
type DeleteFulfillmentSetsIdJSONRequestBody = DeleteFulfillmentSetsIdJSONBody

// PostFulfillmentSetsIdServiceZonesJSONRequestBody defines body for PostFulfillmentSetsIdServiceZones for application/json ContentType.
type PostFulfillmentSetsIdServiceZonesJSONRequestBody PostFulfillmentSetsIdServiceZonesJSONBody

// DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody defines body for DeleteFulfillmentSetsIdServiceZonesZoneId for application/json ContentType.
type DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody = DeleteFulfillmentSetsIdServiceZonesZoneIdJSONBody

// GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody defines body for GetFulfillmentSetsIdServiceZonesZoneId for application/json ContentType.
type GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody = GetFulfillmentSetsIdServiceZonesZoneIdJSONBody

// PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody defines body for PostFulfillmentSetsIdServiceZonesZoneId for application/json ContentType.
type PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody PostFulfillmentSetsIdServiceZonesZoneIdJSONBody

// PostFulfillmentsJSONRequestBody defines body for PostFulfillments for application/json ContentType.
type PostFulfillmentsJSONRequestBody PostFulfillmentsJSONBody

// PostFulfillmentsIdCancelJSONRequestBody defines body for PostFulfillmentsIdCancel for application/json ContentType.
type PostFulfillmentsIdCancelJSONRequestBody = PostFulfillmentsIdCancelJSONBody

// PostFulfillmentsIdShipmentJSONRequestBody defines body for PostFulfillmentsIdShipment for application/json ContentType.
type PostFulfillmentsIdShipmentJSONRequestBody PostFulfillmentsIdShipmentJSONBody

// GetInventoryItemsJSONRequestBody defines body for GetInventoryItems for application/json ContentType.
type GetInventoryItemsJSONRequestBody = GetInventoryItemsJSONBody

// PostInventoryItemsJSONRequestBody defines body for PostInventoryItems for application/json ContentType.
type PostInventoryItemsJSONRequestBody PostInventoryItemsJSONBody

// DeleteInventoryItemsIdJSONRequestBody defines body for DeleteInventoryItemsId for application/json ContentType.
type DeleteInventoryItemsIdJSONRequestBody = DeleteInventoryItemsIdJSONBody

// GetInventoryItemsIdJSONRequestBody defines body for GetInventoryItemsId for application/json ContentType.
type GetInventoryItemsIdJSONRequestBody GetInventoryItemsIdJSONBody

// PostInventoryItemsIdJSONRequestBody defines body for PostInventoryItemsId for application/json ContentType.
type PostInventoryItemsIdJSONRequestBody PostInventoryItemsIdJSONBody

// GetInventoryItemsIdLocationLevelsJSONRequestBody defines body for GetInventoryItemsIdLocationLevels for application/json ContentType.
type GetInventoryItemsIdLocationLevelsJSONRequestBody = GetInventoryItemsIdLocationLevelsJSONBody

// PostInventoryItemsIdLocationLevelsJSONRequestBody defines body for PostInventoryItemsIdLocationLevels for application/json ContentType.
type PostInventoryItemsIdLocationLevelsJSONRequestBody PostInventoryItemsIdLocationLevelsJSONBody

// PostInventoryItemsIdLocationLevelsBatchJSONRequestBody defines body for PostInventoryItemsIdLocationLevelsBatch for application/json ContentType.
type PostInventoryItemsIdLocationLevelsBatchJSONRequestBody PostInventoryItemsIdLocationLevelsBatchJSONBody

// DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody defines body for DeleteInventoryItemsIdLocationLevelsLocationId for application/json ContentType.
type DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody = DeleteInventoryItemsIdLocationLevelsLocationIdJSONBody

// PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody defines body for PostInventoryItemsIdLocationLevelsLocationId for application/json ContentType.
type PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody PostInventoryItemsIdLocationLevelsLocationIdJSONBody

// GetInvitesJSONRequestBody defines body for GetInvites for application/json ContentType.
type GetInvitesJSONRequestBody = GetInvitesJSONBody

// PostInvitesJSONRequestBody defines body for PostInvites for application/json ContentType.
type PostInvitesJSONRequestBody PostInvitesJSONBody

// PostInvitesAcceptJSONRequestBody defines body for PostInvitesAccept for application/json ContentType.
type PostInvitesAcceptJSONRequestBody PostInvitesAcceptJSONBody

// DeleteInvitesIdJSONRequestBody defines body for DeleteInvitesId for application/json ContentType.
type DeleteInvitesIdJSONRequestBody = DeleteInvitesIdJSONBody

// GetInvitesIdJSONRequestBody defines body for GetInvitesId for application/json ContentType.
type GetInvitesIdJSONRequestBody = GetInvitesIdJSONBody

// PostInvitesIdResendJSONRequestBody defines body for PostInvitesIdResend for application/json ContentType.
type PostInvitesIdResendJSONRequestBody = PostInvitesIdResendJSONBody

// GetOrdersJSONRequestBody defines body for GetOrders for application/json ContentType.
type GetOrdersJSONRequestBody = GetOrdersJSONBody

// GetOrdersIdJSONRequestBody defines body for GetOrdersId for application/json ContentType.
type GetOrdersIdJSONRequestBody = GetOrdersIdJSONBody

// GetPaymentsJSONRequestBody defines body for GetPayments for application/json ContentType.
type GetPaymentsJSONRequestBody = GetPaymentsJSONBody

// GetPaymentsPaymentProvidersJSONRequestBody defines body for GetPaymentsPaymentProviders for application/json ContentType.
type GetPaymentsPaymentProvidersJSONRequestBody = GetPaymentsPaymentProvidersJSONBody

// GetPaymentsIdJSONRequestBody defines body for GetPaymentsId for application/json ContentType.
type GetPaymentsIdJSONRequestBody GetPaymentsIdJSONBody

// PostPaymentsIdCaptureJSONRequestBody defines body for PostPaymentsIdCapture for application/json ContentType.
type PostPaymentsIdCaptureJSONRequestBody PostPaymentsIdCaptureJSONBody

// PostPaymentsIdRefundJSONRequestBody defines body for PostPaymentsIdRefund for application/json ContentType.
type PostPaymentsIdRefundJSONRequestBody PostPaymentsIdRefundJSONBody

// GetPriceListsJSONRequestBody defines body for GetPriceLists for application/json ContentType.
type GetPriceListsJSONRequestBody = GetPriceListsJSONBody

// PostPriceListsJSONRequestBody defines body for PostPriceLists for application/json ContentType.
type PostPriceListsJSONRequestBody PostPriceListsJSONBody

// DeletePriceListsIdJSONRequestBody defines body for DeletePriceListsId for application/json ContentType.
type DeletePriceListsIdJSONRequestBody = DeletePriceListsIdJSONBody

// GetPriceListsIdJSONRequestBody defines body for GetPriceListsId for application/json ContentType.
type GetPriceListsIdJSONRequestBody = GetPriceListsIdJSONBody

// PostPriceListsIdJSONRequestBody defines body for PostPriceListsId for application/json ContentType.
type PostPriceListsIdJSONRequestBody PostPriceListsIdJSONBody

// PostPriceListsIdPricesBatchJSONRequestBody defines body for PostPriceListsIdPricesBatch for application/json ContentType.
type PostPriceListsIdPricesBatchJSONRequestBody PostPriceListsIdPricesBatchJSONBody

// PostPriceListsIdProductsJSONRequestBody defines body for PostPriceListsIdProducts for application/json ContentType.
type PostPriceListsIdProductsJSONRequestBody PostPriceListsIdProductsJSONBody

// GetPricingRuleTypesJSONRequestBody defines body for GetPricingRuleTypes for application/json ContentType.
type GetPricingRuleTypesJSONRequestBody GetPricingRuleTypesJSONBody

// PostPricingRuleTypesJSONRequestBody defines body for PostPricingRuleTypes for application/json ContentType.
type PostPricingRuleTypesJSONRequestBody PostPricingRuleTypesJSONBody

// DeletePricingRuleTypesIdJSONRequestBody defines body for DeletePricingRuleTypesId for application/json ContentType.
type DeletePricingRuleTypesIdJSONRequestBody = DeletePricingRuleTypesIdJSONBody

// GetPricingRuleTypesIdJSONRequestBody defines body for GetPricingRuleTypesId for application/json ContentType.
type GetPricingRuleTypesIdJSONRequestBody GetPricingRuleTypesIdJSONBody

// PostPricingRuleTypesIdJSONRequestBody defines body for PostPricingRuleTypesId for application/json ContentType.
type PostPricingRuleTypesIdJSONRequestBody PostPricingRuleTypesIdJSONBody

// GetProductCategoriesJSONRequestBody defines body for GetProductCategories for application/json ContentType.
type GetProductCategoriesJSONRequestBody = GetProductCategoriesJSONBody

// PostProductCategoriesJSONRequestBody defines body for PostProductCategories for application/json ContentType.
type PostProductCategoriesJSONRequestBody PostProductCategoriesJSONBody

// GetProductCategoriesIdJSONRequestBody defines body for GetProductCategoriesId for application/json ContentType.
type GetProductCategoriesIdJSONRequestBody GetProductCategoriesIdJSONBody

// PostProductCategoriesIdJSONRequestBody defines body for PostProductCategoriesId for application/json ContentType.
type PostProductCategoriesIdJSONRequestBody PostProductCategoriesIdJSONBody

// PostProductCategoriesIdProductsJSONRequestBody defines body for PostProductCategoriesIdProducts for application/json ContentType.
type PostProductCategoriesIdProductsJSONRequestBody PostProductCategoriesIdProductsJSONBody

// GetProductTypesJSONRequestBody defines body for GetProductTypes for application/json ContentType.
type GetProductTypesJSONRequestBody = GetProductTypesJSONBody

// PostProductTypesJSONRequestBody defines body for PostProductTypes for application/json ContentType.
type PostProductTypesJSONRequestBody PostProductTypesJSONBody

// DeleteProductTypesIdJSONRequestBody defines body for DeleteProductTypesId for application/json ContentType.
type DeleteProductTypesIdJSONRequestBody = DeleteProductTypesIdJSONBody

// GetProductTypesIdJSONRequestBody defines body for GetProductTypesId for application/json ContentType.
type GetProductTypesIdJSONRequestBody GetProductTypesIdJSONBody

// PostProductTypesIdJSONRequestBody defines body for PostProductTypesId for application/json ContentType.
type PostProductTypesIdJSONRequestBody PostProductTypesIdJSONBody

// GetProductsJSONRequestBody defines body for GetProducts for application/json ContentType.
type GetProductsJSONRequestBody = GetProductsJSONBody

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody PostProductsJSONBody

// PostProductsBatchJSONRequestBody defines body for PostProductsBatch for application/json ContentType.
type PostProductsBatchJSONRequestBody PostProductsBatchJSONBody

// DeleteProductsIdJSONRequestBody defines body for DeleteProductsId for application/json ContentType.
type DeleteProductsIdJSONRequestBody = DeleteProductsIdJSONBody

// GetProductsIdJSONRequestBody defines body for GetProductsId for application/json ContentType.
type GetProductsIdJSONRequestBody = GetProductsIdJSONBody

// PostProductsIdJSONRequestBody defines body for PostProductsId for application/json ContentType.
type PostProductsIdJSONRequestBody PostProductsIdJSONBody

// GetProductsIdOptionsJSONRequestBody defines body for GetProductsIdOptions for application/json ContentType.
type GetProductsIdOptionsJSONRequestBody = GetProductsIdOptionsJSONBody

// PostProductsIdOptionsJSONRequestBody defines body for PostProductsIdOptions for application/json ContentType.
type PostProductsIdOptionsJSONRequestBody PostProductsIdOptionsJSONBody

// DeleteProductsIdOptionsOptionIdJSONRequestBody defines body for DeleteProductsIdOptionsOptionId for application/json ContentType.
type DeleteProductsIdOptionsOptionIdJSONRequestBody = DeleteProductsIdOptionsOptionIdJSONBody

// GetProductsIdOptionsOptionIdJSONRequestBody defines body for GetProductsIdOptionsOptionId for application/json ContentType.
type GetProductsIdOptionsOptionIdJSONRequestBody = GetProductsIdOptionsOptionIdJSONBody

// PostProductsIdOptionsOptionIdJSONRequestBody defines body for PostProductsIdOptionsOptionId for application/json ContentType.
type PostProductsIdOptionsOptionIdJSONRequestBody PostProductsIdOptionsOptionIdJSONBody

// GetProductsIdVariantsJSONRequestBody defines body for GetProductsIdVariants for application/json ContentType.
type GetProductsIdVariantsJSONRequestBody = GetProductsIdVariantsJSONBody

// PostProductsIdVariantsJSONRequestBody defines body for PostProductsIdVariants for application/json ContentType.
type PostProductsIdVariantsJSONRequestBody PostProductsIdVariantsJSONBody

// PostProductsIdVariantsBatchJSONRequestBody defines body for PostProductsIdVariantsBatch for application/json ContentType.
type PostProductsIdVariantsBatchJSONRequestBody PostProductsIdVariantsBatchJSONBody

// DeleteProductsIdVariantsVariantIdJSONRequestBody defines body for DeleteProductsIdVariantsVariantId for application/json ContentType.
type DeleteProductsIdVariantsVariantIdJSONRequestBody = DeleteProductsIdVariantsVariantIdJSONBody

// GetProductsIdVariantsVariantIdJSONRequestBody defines body for GetProductsIdVariantsVariantId for application/json ContentType.
type GetProductsIdVariantsVariantIdJSONRequestBody = GetProductsIdVariantsVariantIdJSONBody

// PostProductsIdVariantsVariantIdJSONRequestBody defines body for PostProductsIdVariantsVariantId for application/json ContentType.
type PostProductsIdVariantsVariantIdJSONRequestBody PostProductsIdVariantsVariantIdJSONBody

// GetPromotionsJSONRequestBody defines body for GetPromotions for application/json ContentType.
type GetPromotionsJSONRequestBody = GetPromotionsJSONBody

// PostPromotionsJSONRequestBody defines body for PostPromotions for application/json ContentType.
type PostPromotionsJSONRequestBody PostPromotionsJSONBody

// GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody defines body for GetPromotionsRuleAttributeOptionsRuleType for application/json ContentType.
type GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody = GetPromotionsRuleAttributeOptionsRuleTypeJSONBody

// GetPromotionsRuleOperatorOptionsJSONRequestBody defines body for GetPromotionsRuleOperatorOptions for application/json ContentType.
type GetPromotionsRuleOperatorOptionsJSONRequestBody = GetPromotionsRuleOperatorOptionsJSONBody

// GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody defines body for GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId for application/json ContentType.
type GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody = GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONBody

// DeletePromotionsIdJSONRequestBody defines body for DeletePromotionsId for application/json ContentType.
type DeletePromotionsIdJSONRequestBody = DeletePromotionsIdJSONBody

// GetPromotionsIdJSONRequestBody defines body for GetPromotionsId for application/json ContentType.
type GetPromotionsIdJSONRequestBody GetPromotionsIdJSONBody

// PostPromotionsIdJSONRequestBody defines body for PostPromotionsId for application/json ContentType.
type PostPromotionsIdJSONRequestBody PostPromotionsIdJSONBody

// PostPromotionsIdBuyRulesBatchJSONRequestBody defines body for PostPromotionsIdBuyRulesBatch for application/json ContentType.
type PostPromotionsIdBuyRulesBatchJSONRequestBody PostPromotionsIdBuyRulesBatchJSONBody

// PostPromotionsIdRulesBatchJSONRequestBody defines body for PostPromotionsIdRulesBatch for application/json ContentType.
type PostPromotionsIdRulesBatchJSONRequestBody PostPromotionsIdRulesBatchJSONBody

// PostPromotionsIdTargetRulesBatchJSONRequestBody defines body for PostPromotionsIdTargetRulesBatch for application/json ContentType.
type PostPromotionsIdTargetRulesBatchJSONRequestBody PostPromotionsIdTargetRulesBatchJSONBody

// GetPromotionsIdRuleTypeJSONRequestBody defines body for GetPromotionsIdRuleType for application/json ContentType.
type GetPromotionsIdRuleTypeJSONRequestBody = GetPromotionsIdRuleTypeJSONBody

// GetRegionsJSONRequestBody defines body for GetRegions for application/json ContentType.
type GetRegionsJSONRequestBody = GetRegionsJSONBody

// PostRegionsJSONRequestBody defines body for PostRegions for application/json ContentType.
type PostRegionsJSONRequestBody PostRegionsJSONBody

// DeleteRegionsIdJSONRequestBody defines body for DeleteRegionsId for application/json ContentType.
type DeleteRegionsIdJSONRequestBody = DeleteRegionsIdJSONBody

// GetRegionsIdJSONRequestBody defines body for GetRegionsId for application/json ContentType.
type GetRegionsIdJSONRequestBody GetRegionsIdJSONBody

// PostRegionsIdJSONRequestBody defines body for PostRegionsId for application/json ContentType.
type PostRegionsIdJSONRequestBody PostRegionsIdJSONBody

// GetReservationsJSONRequestBody defines body for GetReservations for application/json ContentType.
type GetReservationsJSONRequestBody GetReservationsJSONBody

// PostReservationsJSONRequestBody defines body for PostReservations for application/json ContentType.
type PostReservationsJSONRequestBody PostReservationsJSONBody

// DeleteReservationsIdJSONRequestBody defines body for DeleteReservationsId for application/json ContentType.
type DeleteReservationsIdJSONRequestBody = DeleteReservationsIdJSONBody

// GetReservationsIdJSONRequestBody defines body for GetReservationsId for application/json ContentType.
type GetReservationsIdJSONRequestBody GetReservationsIdJSONBody

// PostReservationsIdJSONRequestBody defines body for PostReservationsId for application/json ContentType.
type PostReservationsIdJSONRequestBody PostReservationsIdJSONBody

// GetSalesChannelsJSONRequestBody defines body for GetSalesChannels for application/json ContentType.
type GetSalesChannelsJSONRequestBody = GetSalesChannelsJSONBody

// PostSalesChannelsJSONRequestBody defines body for PostSalesChannels for application/json ContentType.
type PostSalesChannelsJSONRequestBody PostSalesChannelsJSONBody

// DeleteSalesChannelsIdJSONRequestBody defines body for DeleteSalesChannelsId for application/json ContentType.
type DeleteSalesChannelsIdJSONRequestBody = DeleteSalesChannelsIdJSONBody

// GetSalesChannelsIdJSONRequestBody defines body for GetSalesChannelsId for application/json ContentType.
type GetSalesChannelsIdJSONRequestBody GetSalesChannelsIdJSONBody

// PostSalesChannelsIdJSONRequestBody defines body for PostSalesChannelsId for application/json ContentType.
type PostSalesChannelsIdJSONRequestBody PostSalesChannelsIdJSONBody

// PostSalesChannelsIdProductsJSONRequestBody defines body for PostSalesChannelsIdProducts for application/json ContentType.
type PostSalesChannelsIdProductsJSONRequestBody PostSalesChannelsIdProductsJSONBody

// GetShippingOptionsJSONRequestBody defines body for GetShippingOptions for application/json ContentType.
type GetShippingOptionsJSONRequestBody GetShippingOptionsJSONBody

// PostShippingOptionsJSONRequestBody defines body for PostShippingOptions for application/json ContentType.
type PostShippingOptionsJSONRequestBody PostShippingOptionsJSONBody

// DeleteShippingOptionsIdJSONRequestBody defines body for DeleteShippingOptionsId for application/json ContentType.
type DeleteShippingOptionsIdJSONRequestBody = DeleteShippingOptionsIdJSONBody

// PostShippingOptionsIdJSONRequestBody defines body for PostShippingOptionsId for application/json ContentType.
type PostShippingOptionsIdJSONRequestBody PostShippingOptionsIdJSONBody

// PostShippingOptionsIdRulesBatchJSONRequestBody defines body for PostShippingOptionsIdRulesBatch for application/json ContentType.
type PostShippingOptionsIdRulesBatchJSONRequestBody PostShippingOptionsIdRulesBatchJSONBody

// GetShippingProfilesJSONRequestBody defines body for GetShippingProfiles for application/json ContentType.
type GetShippingProfilesJSONRequestBody = GetShippingProfilesJSONBody

// PostShippingProfilesJSONRequestBody defines body for PostShippingProfiles for application/json ContentType.
type PostShippingProfilesJSONRequestBody PostShippingProfilesJSONBody

// DeleteShippingProfilesIdJSONRequestBody defines body for DeleteShippingProfilesId for application/json ContentType.
type DeleteShippingProfilesIdJSONRequestBody = DeleteShippingProfilesIdJSONBody

// GetShippingProfilesIdJSONRequestBody defines body for GetShippingProfilesId for application/json ContentType.
type GetShippingProfilesIdJSONRequestBody GetShippingProfilesIdJSONBody

// GetStockLocationsJSONRequestBody defines body for GetStockLocations for application/json ContentType.
type GetStockLocationsJSONRequestBody = GetStockLocationsJSONBody

// PostStockLocationsJSONRequestBody defines body for PostStockLocations for application/json ContentType.
type PostStockLocationsJSONRequestBody PostStockLocationsJSONBody

// DeleteStockLocationsIdJSONRequestBody defines body for DeleteStockLocationsId for application/json ContentType.
type DeleteStockLocationsIdJSONRequestBody = DeleteStockLocationsIdJSONBody

// GetStockLocationsIdJSONRequestBody defines body for GetStockLocationsId for application/json ContentType.
type GetStockLocationsIdJSONRequestBody GetStockLocationsIdJSONBody

// PostStockLocationsIdJSONRequestBody defines body for PostStockLocationsId for application/json ContentType.
type PostStockLocationsIdJSONRequestBody PostStockLocationsIdJSONBody

// PostStockLocationsIdFulfillmentSetsJSONRequestBody defines body for PostStockLocationsIdFulfillmentSets for application/json ContentType.
type PostStockLocationsIdFulfillmentSetsJSONRequestBody PostStockLocationsIdFulfillmentSetsJSONBody

// PostStockLocationsIdSalesChannelsJSONRequestBody defines body for PostStockLocationsIdSalesChannels for application/json ContentType.
type PostStockLocationsIdSalesChannelsJSONRequestBody PostStockLocationsIdSalesChannelsJSONBody

// GetStoresJSONRequestBody defines body for GetStores for application/json ContentType.
type GetStoresJSONRequestBody = GetStoresJSONBody

// GetStoresIdJSONRequestBody defines body for GetStoresId for application/json ContentType.
type GetStoresIdJSONRequestBody GetStoresIdJSONBody

// PostStoresIdJSONRequestBody defines body for PostStoresId for application/json ContentType.
type PostStoresIdJSONRequestBody PostStoresIdJSONBody

// GetTaxRatesJSONRequestBody defines body for GetTaxRates for application/json ContentType.
type GetTaxRatesJSONRequestBody = GetTaxRatesJSONBody

// PostTaxRatesJSONRequestBody defines body for PostTaxRates for application/json ContentType.
type PostTaxRatesJSONRequestBody PostTaxRatesJSONBody

// DeleteTaxRatesIdJSONRequestBody defines body for DeleteTaxRatesId for application/json ContentType.
type DeleteTaxRatesIdJSONRequestBody = DeleteTaxRatesIdJSONBody

// GetTaxRatesIdJSONRequestBody defines body for GetTaxRatesId for application/json ContentType.
type GetTaxRatesIdJSONRequestBody GetTaxRatesIdJSONBody

// PostTaxRatesIdJSONRequestBody defines body for PostTaxRatesId for application/json ContentType.
type PostTaxRatesIdJSONRequestBody PostTaxRatesIdJSONBody

// PostTaxRatesIdRulesJSONRequestBody defines body for PostTaxRatesIdRules for application/json ContentType.
type PostTaxRatesIdRulesJSONRequestBody PostTaxRatesIdRulesJSONBody

// DeleteTaxRatesIdRulesRuleIdJSONRequestBody defines body for DeleteTaxRatesIdRulesRuleId for application/json ContentType.
type DeleteTaxRatesIdRulesRuleIdJSONRequestBody = DeleteTaxRatesIdRulesRuleIdJSONBody

// GetTaxRegionsJSONRequestBody defines body for GetTaxRegions for application/json ContentType.
type GetTaxRegionsJSONRequestBody = GetTaxRegionsJSONBody

// PostTaxRegionsJSONRequestBody defines body for PostTaxRegions for application/json ContentType.
type PostTaxRegionsJSONRequestBody PostTaxRegionsJSONBody

// DeleteTaxRegionsIdJSONRequestBody defines body for DeleteTaxRegionsId for application/json ContentType.
type DeleteTaxRegionsIdJSONRequestBody = DeleteTaxRegionsIdJSONBody

// GetTaxRegionsIdJSONRequestBody defines body for GetTaxRegionsId for application/json ContentType.
type GetTaxRegionsIdJSONRequestBody = GetTaxRegionsIdJSONBody

// PostUploadsJSONRequestBody defines body for PostUploads for application/json ContentType.
type PostUploadsJSONRequestBody = CreateProduct

// DeleteUploadsIdJSONRequestBody defines body for DeleteUploadsId for application/json ContentType.
type DeleteUploadsIdJSONRequestBody = DeleteUploadsIdJSONBody

// GetUploadsIdJSONRequestBody defines body for GetUploadsId for application/json ContentType.
type GetUploadsIdJSONRequestBody = GetUploadsIdJSONBody

// GetUsersJSONRequestBody defines body for GetUsers for application/json ContentType.
type GetUsersJSONRequestBody = GetUsersJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = CreateUser

// GetUsersMeJSONRequestBody defines body for GetUsersMe for application/json ContentType.
type GetUsersMeJSONRequestBody = GetUsersMeJSONBody

// DeleteUsersIdJSONRequestBody defines body for DeleteUsersId for application/json ContentType.
type DeleteUsersIdJSONRequestBody = DeleteUsersIdJSONBody

// GetUsersIdJSONRequestBody defines body for GetUsersId for application/json ContentType.
type GetUsersIdJSONRequestBody = GetUsersIdJSONBody

// PostUsersIdJSONRequestBody defines body for PostUsersId for application/json ContentType.
type PostUsersIdJSONRequestBody PostUsersIdJSONBody

// GetWorkflowsExecutionsJSONRequestBody defines body for GetWorkflowsExecutions for application/json ContentType.
type GetWorkflowsExecutionsJSONRequestBody GetWorkflowsExecutionsJSONBody

// GetWorkflowsExecutionsIdJSONRequestBody defines body for GetWorkflowsExecutionsId for application/json ContentType.
type GetWorkflowsExecutionsIdJSONRequestBody GetWorkflowsExecutionsIdJSONBody

// PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody defines body for PostWorkflowsExecutionsWorkflowIdRun for application/json ContentType.
type PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody PostWorkflowsExecutionsWorkflowIdRunJSONBody

// PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody defines body for PostWorkflowsExecutionsWorkflowIdStepsFailure for application/json ContentType.
type PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody PostWorkflowsExecutionsWorkflowIdStepsFailureJSONBody

// PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody defines body for PostWorkflowsExecutionsWorkflowIdStepsSuccess for application/json ContentType.
type PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONBody

// GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody defines body for GetWorkflowsExecutionsWorkflowIdSubscribe for application/json ContentType.
type GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody = GetWorkflowsExecutionsWorkflowIdSubscribeJSONBody

// GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody defines body for GetWorkflowsExecutionsWorkflowIdTransactionId for application/json ContentType.
type GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody GetWorkflowsExecutionsWorkflowIdTransactionIdJSONBody

// GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody defines body for GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe for application/json ContentType.
type GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody = GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONBody

// AsCreateCartWorkflowInputBillingAddress0 returns the union data inside the CreateCartWorkflowInput_BillingAddress as a CreateCartWorkflowInputBillingAddress0
func (t CreateCartWorkflowInput_BillingAddress) AsCreateCartWorkflowInputBillingAddress0() (CreateCartWorkflowInputBillingAddress0, error) {
	var body CreateCartWorkflowInputBillingAddress0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCartWorkflowInputBillingAddress0 overwrites any union data inside the CreateCartWorkflowInput_BillingAddress as the provided CreateCartWorkflowInputBillingAddress0
func (t *CreateCartWorkflowInput_BillingAddress) FromCreateCartWorkflowInputBillingAddress0(v CreateCartWorkflowInputBillingAddress0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCartWorkflowInputBillingAddress0 performs a merge with any union data inside the CreateCartWorkflowInput_BillingAddress, using the provided CreateCartWorkflowInputBillingAddress0
func (t *CreateCartWorkflowInput_BillingAddress) MergeCreateCartWorkflowInputBillingAddress0(v CreateCartWorkflowInputBillingAddress0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCartAddress returns the union data inside the CreateCartWorkflowInput_BillingAddress as a CreateCartAddress
func (t CreateCartWorkflowInput_BillingAddress) AsCreateCartAddress() (CreateCartAddress, error) {
	var body CreateCartAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCartAddress overwrites any union data inside the CreateCartWorkflowInput_BillingAddress as the provided CreateCartAddress
func (t *CreateCartWorkflowInput_BillingAddress) FromCreateCartAddress(v CreateCartAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCartAddress performs a merge with any union data inside the CreateCartWorkflowInput_BillingAddress, using the provided CreateCartAddress
func (t *CreateCartWorkflowInput_BillingAddress) MergeCreateCartAddress(v CreateCartAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCartWorkflowInput_BillingAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCartWorkflowInput_BillingAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCartWorkflowInputShippingAddress0 returns the union data inside the CreateCartWorkflowInput_ShippingAddress as a CreateCartWorkflowInputShippingAddress0
func (t CreateCartWorkflowInput_ShippingAddress) AsCreateCartWorkflowInputShippingAddress0() (CreateCartWorkflowInputShippingAddress0, error) {
	var body CreateCartWorkflowInputShippingAddress0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCartWorkflowInputShippingAddress0 overwrites any union data inside the CreateCartWorkflowInput_ShippingAddress as the provided CreateCartWorkflowInputShippingAddress0
func (t *CreateCartWorkflowInput_ShippingAddress) FromCreateCartWorkflowInputShippingAddress0(v CreateCartWorkflowInputShippingAddress0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCartWorkflowInputShippingAddress0 performs a merge with any union data inside the CreateCartWorkflowInput_ShippingAddress, using the provided CreateCartWorkflowInputShippingAddress0
func (t *CreateCartWorkflowInput_ShippingAddress) MergeCreateCartWorkflowInputShippingAddress0(v CreateCartWorkflowInputShippingAddress0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCartAddress returns the union data inside the CreateCartWorkflowInput_ShippingAddress as a CreateCartAddress
func (t CreateCartWorkflowInput_ShippingAddress) AsCreateCartAddress() (CreateCartAddress, error) {
	var body CreateCartAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCartAddress overwrites any union data inside the CreateCartWorkflowInput_ShippingAddress as the provided CreateCartAddress
func (t *CreateCartWorkflowInput_ShippingAddress) FromCreateCartAddress(v CreateCartAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCartAddress performs a merge with any union data inside the CreateCartWorkflowInput_ShippingAddress, using the provided CreateCartAddress
func (t *CreateCartWorkflowInput_ShippingAddress) MergeCreateCartAddress(v CreateCartAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCartWorkflowInput_ShippingAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCartWorkflowInput_ShippingAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerCreatedAt0 returns the union data inside the Customer_CreatedAt as a CustomerCreatedAt0
func (t Customer_CreatedAt) AsCustomerCreatedAt0() (CustomerCreatedAt0, error) {
	var body CustomerCreatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerCreatedAt0 overwrites any union data inside the Customer_CreatedAt as the provided CustomerCreatedAt0
func (t *Customer_CreatedAt) FromCustomerCreatedAt0(v CustomerCreatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerCreatedAt0 performs a merge with any union data inside the Customer_CreatedAt, using the provided CustomerCreatedAt0
func (t *Customer_CreatedAt) MergeCustomerCreatedAt0(v CustomerCreatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerCreatedAt1 returns the union data inside the Customer_CreatedAt as a CustomerCreatedAt1
func (t Customer_CreatedAt) AsCustomerCreatedAt1() (CustomerCreatedAt1, error) {
	var body CustomerCreatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerCreatedAt1 overwrites any union data inside the Customer_CreatedAt as the provided CustomerCreatedAt1
func (t *Customer_CreatedAt) FromCustomerCreatedAt1(v CustomerCreatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerCreatedAt1 performs a merge with any union data inside the Customer_CreatedAt, using the provided CustomerCreatedAt1
func (t *Customer_CreatedAt) MergeCustomerCreatedAt1(v CustomerCreatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Customer_CreatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Customer_CreatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerDeletedAt0 returns the union data inside the Customer_DeletedAt as a CustomerDeletedAt0
func (t Customer_DeletedAt) AsCustomerDeletedAt0() (CustomerDeletedAt0, error) {
	var body CustomerDeletedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerDeletedAt0 overwrites any union data inside the Customer_DeletedAt as the provided CustomerDeletedAt0
func (t *Customer_DeletedAt) FromCustomerDeletedAt0(v CustomerDeletedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerDeletedAt0 performs a merge with any union data inside the Customer_DeletedAt, using the provided CustomerDeletedAt0
func (t *Customer_DeletedAt) MergeCustomerDeletedAt0(v CustomerDeletedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerDeletedAt1 returns the union data inside the Customer_DeletedAt as a CustomerDeletedAt1
func (t Customer_DeletedAt) AsCustomerDeletedAt1() (CustomerDeletedAt1, error) {
	var body CustomerDeletedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerDeletedAt1 overwrites any union data inside the Customer_DeletedAt as the provided CustomerDeletedAt1
func (t *Customer_DeletedAt) FromCustomerDeletedAt1(v CustomerDeletedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerDeletedAt1 performs a merge with any union data inside the Customer_DeletedAt, using the provided CustomerDeletedAt1
func (t *Customer_DeletedAt) MergeCustomerDeletedAt1(v CustomerDeletedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Customer_DeletedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Customer_DeletedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerUpdatedAt0 returns the union data inside the Customer_UpdatedAt as a CustomerUpdatedAt0
func (t Customer_UpdatedAt) AsCustomerUpdatedAt0() (CustomerUpdatedAt0, error) {
	var body CustomerUpdatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerUpdatedAt0 overwrites any union data inside the Customer_UpdatedAt as the provided CustomerUpdatedAt0
func (t *Customer_UpdatedAt) FromCustomerUpdatedAt0(v CustomerUpdatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerUpdatedAt0 performs a merge with any union data inside the Customer_UpdatedAt, using the provided CustomerUpdatedAt0
func (t *Customer_UpdatedAt) MergeCustomerUpdatedAt0(v CustomerUpdatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerUpdatedAt1 returns the union data inside the Customer_UpdatedAt as a CustomerUpdatedAt1
func (t Customer_UpdatedAt) AsCustomerUpdatedAt1() (CustomerUpdatedAt1, error) {
	var body CustomerUpdatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerUpdatedAt1 overwrites any union data inside the Customer_UpdatedAt as the provided CustomerUpdatedAt1
func (t *Customer_UpdatedAt) FromCustomerUpdatedAt1(v CustomerUpdatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerUpdatedAt1 performs a merge with any union data inside the Customer_UpdatedAt, using the provided CustomerUpdatedAt1
func (t *Customer_UpdatedAt) MergeCustomerUpdatedAt1(v CustomerUpdatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Customer_UpdatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Customer_UpdatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerResponseCreatedAt0 returns the union data inside the CustomerResponse_CreatedAt as a CustomerResponseCreatedAt0
func (t CustomerResponse_CreatedAt) AsCustomerResponseCreatedAt0() (CustomerResponseCreatedAt0, error) {
	var body CustomerResponseCreatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerResponseCreatedAt0 overwrites any union data inside the CustomerResponse_CreatedAt as the provided CustomerResponseCreatedAt0
func (t *CustomerResponse_CreatedAt) FromCustomerResponseCreatedAt0(v CustomerResponseCreatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerResponseCreatedAt0 performs a merge with any union data inside the CustomerResponse_CreatedAt, using the provided CustomerResponseCreatedAt0
func (t *CustomerResponse_CreatedAt) MergeCustomerResponseCreatedAt0(v CustomerResponseCreatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerResponseCreatedAt1 returns the union data inside the CustomerResponse_CreatedAt as a CustomerResponseCreatedAt1
func (t CustomerResponse_CreatedAt) AsCustomerResponseCreatedAt1() (CustomerResponseCreatedAt1, error) {
	var body CustomerResponseCreatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerResponseCreatedAt1 overwrites any union data inside the CustomerResponse_CreatedAt as the provided CustomerResponseCreatedAt1
func (t *CustomerResponse_CreatedAt) FromCustomerResponseCreatedAt1(v CustomerResponseCreatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerResponseCreatedAt1 performs a merge with any union data inside the CustomerResponse_CreatedAt, using the provided CustomerResponseCreatedAt1
func (t *CustomerResponse_CreatedAt) MergeCustomerResponseCreatedAt1(v CustomerResponseCreatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomerResponse_CreatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomerResponse_CreatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerResponseDeletedAt0 returns the union data inside the CustomerResponse_DeletedAt as a CustomerResponseDeletedAt0
func (t CustomerResponse_DeletedAt) AsCustomerResponseDeletedAt0() (CustomerResponseDeletedAt0, error) {
	var body CustomerResponseDeletedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerResponseDeletedAt0 overwrites any union data inside the CustomerResponse_DeletedAt as the provided CustomerResponseDeletedAt0
func (t *CustomerResponse_DeletedAt) FromCustomerResponseDeletedAt0(v CustomerResponseDeletedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerResponseDeletedAt0 performs a merge with any union data inside the CustomerResponse_DeletedAt, using the provided CustomerResponseDeletedAt0
func (t *CustomerResponse_DeletedAt) MergeCustomerResponseDeletedAt0(v CustomerResponseDeletedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerResponseDeletedAt1 returns the union data inside the CustomerResponse_DeletedAt as a CustomerResponseDeletedAt1
func (t CustomerResponse_DeletedAt) AsCustomerResponseDeletedAt1() (CustomerResponseDeletedAt1, error) {
	var body CustomerResponseDeletedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerResponseDeletedAt1 overwrites any union data inside the CustomerResponse_DeletedAt as the provided CustomerResponseDeletedAt1
func (t *CustomerResponse_DeletedAt) FromCustomerResponseDeletedAt1(v CustomerResponseDeletedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerResponseDeletedAt1 performs a merge with any union data inside the CustomerResponse_DeletedAt, using the provided CustomerResponseDeletedAt1
func (t *CustomerResponse_DeletedAt) MergeCustomerResponseDeletedAt1(v CustomerResponseDeletedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomerResponse_DeletedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomerResponse_DeletedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerResponseUpdatedAt0 returns the union data inside the CustomerResponse_UpdatedAt as a CustomerResponseUpdatedAt0
func (t CustomerResponse_UpdatedAt) AsCustomerResponseUpdatedAt0() (CustomerResponseUpdatedAt0, error) {
	var body CustomerResponseUpdatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerResponseUpdatedAt0 overwrites any union data inside the CustomerResponse_UpdatedAt as the provided CustomerResponseUpdatedAt0
func (t *CustomerResponse_UpdatedAt) FromCustomerResponseUpdatedAt0(v CustomerResponseUpdatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerResponseUpdatedAt0 performs a merge with any union data inside the CustomerResponse_UpdatedAt, using the provided CustomerResponseUpdatedAt0
func (t *CustomerResponse_UpdatedAt) MergeCustomerResponseUpdatedAt0(v CustomerResponseUpdatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerResponseUpdatedAt1 returns the union data inside the CustomerResponse_UpdatedAt as a CustomerResponseUpdatedAt1
func (t CustomerResponse_UpdatedAt) AsCustomerResponseUpdatedAt1() (CustomerResponseUpdatedAt1, error) {
	var body CustomerResponseUpdatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerResponseUpdatedAt1 overwrites any union data inside the CustomerResponse_UpdatedAt as the provided CustomerResponseUpdatedAt1
func (t *CustomerResponse_UpdatedAt) FromCustomerResponseUpdatedAt1(v CustomerResponseUpdatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerResponseUpdatedAt1 performs a merge with any union data inside the CustomerResponse_UpdatedAt, using the provided CustomerResponseUpdatedAt1
func (t *CustomerResponse_UpdatedAt) MergeCustomerResponseUpdatedAt1(v CustomerResponseUpdatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomerResponse_UpdatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomerResponse_UpdatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProductCategoryResponseCreatedAt0 returns the union data inside the ProductCategoryResponse_CreatedAt as a ProductCategoryResponseCreatedAt0
func (t ProductCategoryResponse_CreatedAt) AsProductCategoryResponseCreatedAt0() (ProductCategoryResponseCreatedAt0, error) {
	var body ProductCategoryResponseCreatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductCategoryResponseCreatedAt0 overwrites any union data inside the ProductCategoryResponse_CreatedAt as the provided ProductCategoryResponseCreatedAt0
func (t *ProductCategoryResponse_CreatedAt) FromProductCategoryResponseCreatedAt0(v ProductCategoryResponseCreatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductCategoryResponseCreatedAt0 performs a merge with any union data inside the ProductCategoryResponse_CreatedAt, using the provided ProductCategoryResponseCreatedAt0
func (t *ProductCategoryResponse_CreatedAt) MergeProductCategoryResponseCreatedAt0(v ProductCategoryResponseCreatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsProductCategoryResponseCreatedAt1 returns the union data inside the ProductCategoryResponse_CreatedAt as a ProductCategoryResponseCreatedAt1
func (t ProductCategoryResponse_CreatedAt) AsProductCategoryResponseCreatedAt1() (ProductCategoryResponseCreatedAt1, error) {
	var body ProductCategoryResponseCreatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductCategoryResponseCreatedAt1 overwrites any union data inside the ProductCategoryResponse_CreatedAt as the provided ProductCategoryResponseCreatedAt1
func (t *ProductCategoryResponse_CreatedAt) FromProductCategoryResponseCreatedAt1(v ProductCategoryResponseCreatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductCategoryResponseCreatedAt1 performs a merge with any union data inside the ProductCategoryResponse_CreatedAt, using the provided ProductCategoryResponseCreatedAt1
func (t *ProductCategoryResponse_CreatedAt) MergeProductCategoryResponseCreatedAt1(v ProductCategoryResponseCreatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductCategoryResponse_CreatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductCategoryResponse_CreatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProductCategoryResponseUpdatedAt0 returns the union data inside the ProductCategoryResponse_UpdatedAt as a ProductCategoryResponseUpdatedAt0
func (t ProductCategoryResponse_UpdatedAt) AsProductCategoryResponseUpdatedAt0() (ProductCategoryResponseUpdatedAt0, error) {
	var body ProductCategoryResponseUpdatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductCategoryResponseUpdatedAt0 overwrites any union data inside the ProductCategoryResponse_UpdatedAt as the provided ProductCategoryResponseUpdatedAt0
func (t *ProductCategoryResponse_UpdatedAt) FromProductCategoryResponseUpdatedAt0(v ProductCategoryResponseUpdatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductCategoryResponseUpdatedAt0 performs a merge with any union data inside the ProductCategoryResponse_UpdatedAt, using the provided ProductCategoryResponseUpdatedAt0
func (t *ProductCategoryResponse_UpdatedAt) MergeProductCategoryResponseUpdatedAt0(v ProductCategoryResponseUpdatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsProductCategoryResponseUpdatedAt1 returns the union data inside the ProductCategoryResponse_UpdatedAt as a ProductCategoryResponseUpdatedAt1
func (t ProductCategoryResponse_UpdatedAt) AsProductCategoryResponseUpdatedAt1() (ProductCategoryResponseUpdatedAt1, error) {
	var body ProductCategoryResponseUpdatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductCategoryResponseUpdatedAt1 overwrites any union data inside the ProductCategoryResponse_UpdatedAt as the provided ProductCategoryResponseUpdatedAt1
func (t *ProductCategoryResponse_UpdatedAt) FromProductCategoryResponseUpdatedAt1(v ProductCategoryResponseUpdatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductCategoryResponseUpdatedAt1 performs a merge with any union data inside the ProductCategoryResponse_UpdatedAt, using the provided ProductCategoryResponseUpdatedAt1
func (t *ProductCategoryResponse_UpdatedAt) MergeProductCategoryResponseUpdatedAt1(v ProductCategoryResponseUpdatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductCategoryResponse_UpdatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductCategoryResponse_UpdatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0() (StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1() (StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressCreatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_CreatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt as a StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0() (StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt as a StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1() (StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressDeletedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_DeletedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0() (StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1() (StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextBillingAddressUpdatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_BillingAddress_UpdatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0() (StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1() (StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerCreatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_CreatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt as a StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0() (StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt as a StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1() (StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerDeletedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_DeletedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0() (StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1 returns the union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt as a StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1
func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) AsStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1() (StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1, error) {
	var body StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1 overwrites any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt as the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) FromStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1 performs a merge with any union data inside the StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt, using the provided StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1
func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) MergeStorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1(v StorePostPaymentCollectionsPaymentSessionReqContextCustomerUpdatedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorePostPaymentCollectionsPaymentSessionReq_Context_Customer_UpdatedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateAddress returns the union data inside the UpdateCartData_BillingAddress as a CreateAddress
func (t UpdateCartData_BillingAddress) AsCreateAddress() (CreateAddress, error) {
	var body CreateAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAddress overwrites any union data inside the UpdateCartData_BillingAddress as the provided CreateAddress
func (t *UpdateCartData_BillingAddress) FromCreateAddress(v CreateAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAddress performs a merge with any union data inside the UpdateCartData_BillingAddress, using the provided CreateAddress
func (t *UpdateCartData_BillingAddress) MergeCreateAddress(v CreateAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAddress returns the union data inside the UpdateCartData_BillingAddress as a UpdateAddress
func (t UpdateCartData_BillingAddress) AsUpdateAddress() (UpdateAddress, error) {
	var body UpdateAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAddress overwrites any union data inside the UpdateCartData_BillingAddress as the provided UpdateAddress
func (t *UpdateCartData_BillingAddress) FromUpdateAddress(v UpdateAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAddress performs a merge with any union data inside the UpdateCartData_BillingAddress, using the provided UpdateAddress
func (t *UpdateCartData_BillingAddress) MergeUpdateAddress(v UpdateAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateCartData_BillingAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateCartData_BillingAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateAddress returns the union data inside the UpdateCartData_ShippingAddress as a CreateAddress
func (t UpdateCartData_ShippingAddress) AsCreateAddress() (CreateAddress, error) {
	var body CreateAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateAddress overwrites any union data inside the UpdateCartData_ShippingAddress as the provided CreateAddress
func (t *UpdateCartData_ShippingAddress) FromCreateAddress(v CreateAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateAddress performs a merge with any union data inside the UpdateCartData_ShippingAddress, using the provided CreateAddress
func (t *UpdateCartData_ShippingAddress) MergeCreateAddress(v CreateAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateAddress returns the union data inside the UpdateCartData_ShippingAddress as a UpdateAddress
func (t UpdateCartData_ShippingAddress) AsUpdateAddress() (UpdateAddress, error) {
	var body UpdateAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateAddress overwrites any union data inside the UpdateCartData_ShippingAddress as the provided UpdateAddress
func (t *UpdateCartData_ShippingAddress) FromUpdateAddress(v UpdateAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateAddress performs a merge with any union data inside the UpdateCartData_ShippingAddress, using the provided UpdateAddress
func (t *UpdateCartData_ShippingAddress) MergeUpdateAddress(v UpdateAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateCartData_ShippingAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateCartData_ShippingAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the N400Error as a Error
func (t N400Error) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the N400Error as the provided Error
func (t *N400Error) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the N400Error, using the provided Error
func (t *N400Error) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultipleErrors returns the union data inside the N400Error as a MultipleErrors
func (t N400Error) AsMultipleErrors() (MultipleErrors, error) {
	var body MultipleErrors
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultipleErrors overwrites any union data inside the N400Error as the provided MultipleErrors
func (t *N400Error) FromMultipleErrors(v MultipleErrors) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultipleErrors performs a merge with any union data inside the N400Error, using the provided MultipleErrors
func (t *N400Error) MergeMultipleErrors(v MultipleErrors) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t N400Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *N400Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiKeysWithBody request with any body
	GetApiKeysWithBody(ctx context.Context, params *GetApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApiKeys(ctx context.Context, params *GetApiKeysParams, body GetApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKeysWithBody request with any body
	PostApiKeysWithBody(ctx context.Context, params *PostApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKeys(ctx context.Context, params *PostApiKeysParams, body PostApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKeysIdWithBody request with any body
	DeleteApiKeysIdWithBody(ctx context.Context, id string, params *DeleteApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiKeysId(ctx context.Context, id string, params *DeleteApiKeysIdParams, body DeleteApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKeysIdWithBody request with any body
	GetApiKeysIdWithBody(ctx context.Context, id string, params *GetApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApiKeysId(ctx context.Context, id string, params *GetApiKeysIdParams, body GetApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKeysIdWithBody request with any body
	PostApiKeysIdWithBody(ctx context.Context, id string, params *PostApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKeysId(ctx context.Context, id string, params *PostApiKeysIdParams, body PostApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKeysIdRevokeWithBody request with any body
	PostApiKeysIdRevokeWithBody(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKeysIdRevoke(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, body PostApiKeysIdRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKeysIdSalesChannelsWithBody request with any body
	PostApiKeysIdSalesChannelsWithBody(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKeysIdSalesChannels(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, body PostApiKeysIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsWithBody request with any body
	GetCampaignsWithBody(ctx context.Context, params *GetCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCampaigns(ctx context.Context, params *GetCampaignsParams, body GetCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCampaignsWithBody request with any body
	PostCampaignsWithBody(ctx context.Context, params *PostCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCampaigns(ctx context.Context, params *PostCampaignsParams, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCampaignsIdWithBody request with any body
	DeleteCampaignsIdWithBody(ctx context.Context, id string, params *DeleteCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCampaignsId(ctx context.Context, id string, params *DeleteCampaignsIdParams, body DeleteCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsIdWithBody request with any body
	GetCampaignsIdWithBody(ctx context.Context, id string, params *GetCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCampaignsId(ctx context.Context, id string, params *GetCampaignsIdParams, body GetCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCampaignsIdWithBody request with any body
	PostCampaignsIdWithBody(ctx context.Context, id string, params *PostCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCampaignsId(ctx context.Context, id string, params *PostCampaignsIdParams, body PostCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionsWithBody request with any body
	GetCollectionsWithBody(ctx context.Context, params *GetCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCollections(ctx context.Context, params *GetCollectionsParams, body GetCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsWithBody request with any body
	PostCollectionsWithBody(ctx context.Context, params *PostCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollections(ctx context.Context, params *PostCollectionsParams, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCollectionsIdWithBody request with any body
	DeleteCollectionsIdWithBody(ctx context.Context, id string, params *DeleteCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCollectionsId(ctx context.Context, id string, params *DeleteCollectionsIdParams, body DeleteCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionsIdWithBody request with any body
	GetCollectionsIdWithBody(ctx context.Context, id string, params *GetCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCollectionsId(ctx context.Context, id string, params *GetCollectionsIdParams, body GetCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsIdWithBody request with any body
	PostCollectionsIdWithBody(ctx context.Context, id string, params *PostCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsId(ctx context.Context, id string, params *PostCollectionsIdParams, body PostCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsIdProductsWithBody request with any body
	PostCollectionsIdProductsWithBody(ctx context.Context, id string, params *PostCollectionsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsIdProducts(ctx context.Context, id string, params *PostCollectionsIdProductsParams, body PostCollectionsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrenciesWithBody request with any body
	GetCurrenciesWithBody(ctx context.Context, params *GetCurrenciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCurrencies(ctx context.Context, params *GetCurrenciesParams, body GetCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrenciesCodeWithBody request with any body
	GetCurrenciesCodeWithBody(ctx context.Context, code string, params *GetCurrenciesCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCurrenciesCode(ctx context.Context, code string, params *GetCurrenciesCodeParams, body GetCurrenciesCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerGroupsWithBody request with any body
	GetCustomerGroupsWithBody(ctx context.Context, params *GetCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomerGroups(ctx context.Context, params *GetCustomerGroupsParams, body GetCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerGroupsWithBody request with any body
	PostCustomerGroupsWithBody(ctx context.Context, params *PostCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerGroups(ctx context.Context, params *PostCustomerGroupsParams, body PostCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomerGroupsIdWithBody request with any body
	DeleteCustomerGroupsIdWithBody(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCustomerGroupsId(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, body DeleteCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerGroupsIdWithBody request with any body
	GetCustomerGroupsIdWithBody(ctx context.Context, id string, params *GetCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomerGroupsId(ctx context.Context, id string, params *GetCustomerGroupsIdParams, body GetCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerGroupsIdWithBody request with any body
	PostCustomerGroupsIdWithBody(ctx context.Context, id string, params *PostCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerGroupsId(ctx context.Context, id string, params *PostCustomerGroupsIdParams, body PostCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerGroupsIdCustomersWithBody request with any body
	PostCustomerGroupsIdCustomersWithBody(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerGroupsIdCustomers(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, body PostCustomerGroupsIdCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersWithBody request with any body
	GetCustomersWithBody(ctx context.Context, params *GetCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomers(ctx context.Context, params *GetCustomersParams, body GetCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersWithBody request with any body
	PostCustomersWithBody(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomers(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomersIdWithBody request with any body
	DeleteCustomersIdWithBody(ctx context.Context, id string, params *DeleteCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCustomersId(ctx context.Context, id string, params *DeleteCustomersIdParams, body DeleteCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersIdWithBody request with any body
	GetCustomersIdWithBody(ctx context.Context, id string, params *GetCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomersId(ctx context.Context, id string, params *GetCustomersIdParams, body GetCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersIdWithBody request with any body
	PostCustomersIdWithBody(ctx context.Context, id string, params *PostCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomersId(ctx context.Context, id string, params *PostCustomersIdParams, body PostCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersIdAddressesWithBody request with any body
	GetCustomersIdAddressesWithBody(ctx context.Context, id string, params *GetCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomersIdAddresses(ctx context.Context, id string, params *GetCustomersIdAddressesParams, body GetCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersIdAddressesWithBody request with any body
	PostCustomersIdAddressesWithBody(ctx context.Context, id string, params *PostCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomersIdAddresses(ctx context.Context, id string, params *PostCustomersIdAddressesParams, body PostCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomersIdAddressesAddressIdWithBody request with any body
	DeleteCustomersIdAddressesAddressIdWithBody(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCustomersIdAddressesAddressId(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, body DeleteCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersIdAddressesAddressIdWithBody request with any body
	GetCustomersIdAddressesAddressIdWithBody(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomersIdAddressesAddressId(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, body GetCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersIdAddressesAddressIdWithBody request with any body
	PostCustomersIdAddressesAddressIdWithBody(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomersIdAddressesAddressId(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, body PostCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDraftOrdersWithBody request with any body
	GetDraftOrdersWithBody(ctx context.Context, params *GetDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDraftOrders(ctx context.Context, params *GetDraftOrdersParams, body GetDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDraftOrdersWithBody request with any body
	PostDraftOrdersWithBody(ctx context.Context, params *PostDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDraftOrders(ctx context.Context, params *PostDraftOrdersParams, body PostDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDraftOrdersIdWithBody request with any body
	GetDraftOrdersIdWithBody(ctx context.Context, id string, params *GetDraftOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDraftOrdersId(ctx context.Context, id string, params *GetDraftOrdersIdParams, body GetDraftOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFulfillmentProvidersWithBody request with any body
	GetFulfillmentProvidersWithBody(ctx context.Context, params *GetFulfillmentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFulfillmentProviders(ctx context.Context, params *GetFulfillmentProvidersParams, body GetFulfillmentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFulfillmentSetsIdWithBody request with any body
	DeleteFulfillmentSetsIdWithBody(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFulfillmentSetsId(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, body DeleteFulfillmentSetsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFulfillmentSetsIdServiceZonesWithBody request with any body
	PostFulfillmentSetsIdServiceZonesWithBody(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFulfillmentSetsIdServiceZones(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, body PostFulfillmentSetsIdServiceZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFulfillmentSetsIdServiceZonesZoneIdWithBody request with any body
	DeleteFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFulfillmentSetsIdServiceZonesZoneId(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, body DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFulfillmentSetsIdServiceZonesZoneIdWithBody request with any body
	GetFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFulfillmentSetsIdServiceZonesZoneId(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, body GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFulfillmentSetsIdServiceZonesZoneIdWithBody request with any body
	PostFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFulfillmentSetsIdServiceZonesZoneId(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, body PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFulfillmentsWithBody request with any body
	PostFulfillmentsWithBody(ctx context.Context, params *PostFulfillmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFulfillments(ctx context.Context, params *PostFulfillmentsParams, body PostFulfillmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFulfillmentsIdCancelWithBody request with any body
	PostFulfillmentsIdCancelWithBody(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFulfillmentsIdCancel(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, body PostFulfillmentsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFulfillmentsIdShipmentWithBody request with any body
	PostFulfillmentsIdShipmentWithBody(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFulfillmentsIdShipment(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, body PostFulfillmentsIdShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryItemsWithBody request with any body
	GetInventoryItemsWithBody(ctx context.Context, params *GetInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInventoryItems(ctx context.Context, params *GetInventoryItemsParams, body GetInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryItemsWithBody request with any body
	PostInventoryItemsWithBody(ctx context.Context, params *PostInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryItems(ctx context.Context, params *PostInventoryItemsParams, body PostInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInventoryItemsIdWithBody request with any body
	DeleteInventoryItemsIdWithBody(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteInventoryItemsId(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, body DeleteInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryItemsIdWithBody request with any body
	GetInventoryItemsIdWithBody(ctx context.Context, id string, params *GetInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInventoryItemsId(ctx context.Context, id string, params *GetInventoryItemsIdParams, body GetInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryItemsIdWithBody request with any body
	PostInventoryItemsIdWithBody(ctx context.Context, id string, params *PostInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryItemsId(ctx context.Context, id string, params *PostInventoryItemsIdParams, body PostInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryItemsIdLocationLevelsWithBody request with any body
	GetInventoryItemsIdLocationLevelsWithBody(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInventoryItemsIdLocationLevels(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, body GetInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryItemsIdLocationLevelsWithBody request with any body
	PostInventoryItemsIdLocationLevelsWithBody(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryItemsIdLocationLevels(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, body PostInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryItemsIdLocationLevelsBatchWithBody request with any body
	PostInventoryItemsIdLocationLevelsBatchWithBody(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryItemsIdLocationLevelsBatch(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, body PostInventoryItemsIdLocationLevelsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInventoryItemsIdLocationLevelsLocationIdWithBody request with any body
	DeleteInventoryItemsIdLocationLevelsLocationIdWithBody(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteInventoryItemsIdLocationLevelsLocationId(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, body DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryItemsIdLocationLevelsLocationIdWithBody request with any body
	PostInventoryItemsIdLocationLevelsLocationIdWithBody(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryItemsIdLocationLevelsLocationId(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, body PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvitesWithBody request with any body
	GetInvitesWithBody(ctx context.Context, params *GetInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInvites(ctx context.Context, params *GetInvitesParams, body GetInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvitesWithBody request with any body
	PostInvitesWithBody(ctx context.Context, params *PostInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvites(ctx context.Context, params *PostInvitesParams, body PostInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvitesAcceptWithBody request with any body
	PostInvitesAcceptWithBody(ctx context.Context, params *PostInvitesAcceptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvitesAccept(ctx context.Context, params *PostInvitesAcceptParams, body PostInvitesAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvitesIdWithBody request with any body
	DeleteInvitesIdWithBody(ctx context.Context, id string, params *DeleteInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteInvitesId(ctx context.Context, id string, params *DeleteInvitesIdParams, body DeleteInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvitesIdWithBody request with any body
	GetInvitesIdWithBody(ctx context.Context, id string, params *GetInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInvitesId(ctx context.Context, id string, params *GetInvitesIdParams, body GetInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvitesIdResendWithBody request with any body
	PostInvitesIdResendWithBody(ctx context.Context, id string, params *PostInvitesIdResendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvitesIdResend(ctx context.Context, id string, params *PostInvitesIdResendParams, body PostInvitesIdResendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrdersWithBody request with any body
	GetOrdersWithBody(ctx context.Context, params *GetOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOrders(ctx context.Context, params *GetOrdersParams, body GetOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrdersIdWithBody request with any body
	GetOrdersIdWithBody(ctx context.Context, id string, params *GetOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOrdersId(ctx context.Context, id string, params *GetOrdersIdParams, body GetOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsWithBody request with any body
	GetPaymentsWithBody(ctx context.Context, params *GetPaymentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPayments(ctx context.Context, params *GetPaymentsParams, body GetPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsPaymentProvidersWithBody request with any body
	GetPaymentsPaymentProvidersWithBody(ctx context.Context, params *GetPaymentsPaymentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPaymentsPaymentProviders(ctx context.Context, params *GetPaymentsPaymentProvidersParams, body GetPaymentsPaymentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsIdWithBody request with any body
	GetPaymentsIdWithBody(ctx context.Context, id string, params *GetPaymentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPaymentsId(ctx context.Context, id string, params *GetPaymentsIdParams, body GetPaymentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPaymentsIdCaptureWithBody request with any body
	PostPaymentsIdCaptureWithBody(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPaymentsIdCapture(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, body PostPaymentsIdCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPaymentsIdRefundWithBody request with any body
	PostPaymentsIdRefundWithBody(ctx context.Context, id string, params *PostPaymentsIdRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPaymentsIdRefund(ctx context.Context, id string, params *PostPaymentsIdRefundParams, body PostPaymentsIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPriceListsWithBody request with any body
	GetPriceListsWithBody(ctx context.Context, params *GetPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPriceLists(ctx context.Context, params *GetPriceListsParams, body GetPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPriceListsWithBody request with any body
	PostPriceListsWithBody(ctx context.Context, params *PostPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPriceLists(ctx context.Context, params *PostPriceListsParams, body PostPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePriceListsIdWithBody request with any body
	DeletePriceListsIdWithBody(ctx context.Context, id string, params *DeletePriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePriceListsId(ctx context.Context, id string, params *DeletePriceListsIdParams, body DeletePriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPriceListsIdWithBody request with any body
	GetPriceListsIdWithBody(ctx context.Context, id string, params *GetPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPriceListsId(ctx context.Context, id string, params *GetPriceListsIdParams, body GetPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPriceListsIdWithBody request with any body
	PostPriceListsIdWithBody(ctx context.Context, id string, params *PostPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPriceListsId(ctx context.Context, id string, params *PostPriceListsIdParams, body PostPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPriceListsIdPricesBatchWithBody request with any body
	PostPriceListsIdPricesBatchWithBody(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPriceListsIdPricesBatch(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, body PostPriceListsIdPricesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPriceListsIdProductsWithBody request with any body
	PostPriceListsIdProductsWithBody(ctx context.Context, id string, params *PostPriceListsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPriceListsIdProducts(ctx context.Context, id string, params *PostPriceListsIdProductsParams, body PostPriceListsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingRuleTypesWithBody request with any body
	GetPricingRuleTypesWithBody(ctx context.Context, params *GetPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPricingRuleTypes(ctx context.Context, params *GetPricingRuleTypesParams, body GetPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPricingRuleTypesWithBody request with any body
	PostPricingRuleTypesWithBody(ctx context.Context, params *PostPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPricingRuleTypes(ctx context.Context, params *PostPricingRuleTypesParams, body PostPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePricingRuleTypesIdWithBody request with any body
	DeletePricingRuleTypesIdWithBody(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePricingRuleTypesId(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, body DeletePricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingRuleTypesIdWithBody request with any body
	GetPricingRuleTypesIdWithBody(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPricingRuleTypesId(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, body GetPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPricingRuleTypesIdWithBody request with any body
	PostPricingRuleTypesIdWithBody(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPricingRuleTypesId(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, body PostPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductCategoriesWithBody request with any body
	GetProductCategoriesWithBody(ctx context.Context, params *GetProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductCategories(ctx context.Context, params *GetProductCategoriesParams, body GetProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductCategoriesWithBody request with any body
	PostProductCategoriesWithBody(ctx context.Context, params *PostProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductCategories(ctx context.Context, params *PostProductCategoriesParams, body PostProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductCategoriesIdWithBody request with any body
	GetProductCategoriesIdWithBody(ctx context.Context, id string, params *GetProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductCategoriesId(ctx context.Context, id string, params *GetProductCategoriesIdParams, body GetProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductCategoriesIdWithBody request with any body
	PostProductCategoriesIdWithBody(ctx context.Context, id string, params *PostProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductCategoriesId(ctx context.Context, id string, params *PostProductCategoriesIdParams, body PostProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductCategoriesIdProductsWithBody request with any body
	PostProductCategoriesIdProductsWithBody(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductCategoriesIdProducts(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, body PostProductCategoriesIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductTypesWithBody request with any body
	GetProductTypesWithBody(ctx context.Context, params *GetProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductTypes(ctx context.Context, params *GetProductTypesParams, body GetProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductTypesWithBody request with any body
	PostProductTypesWithBody(ctx context.Context, params *PostProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductTypes(ctx context.Context, params *PostProductTypesParams, body PostProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductTypesIdWithBody request with any body
	DeleteProductTypesIdWithBody(ctx context.Context, id string, params *DeleteProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProductTypesId(ctx context.Context, id string, params *DeleteProductTypesIdParams, body DeleteProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductTypesIdWithBody request with any body
	GetProductTypesIdWithBody(ctx context.Context, id string, params *GetProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductTypesId(ctx context.Context, id string, params *GetProductTypesIdParams, body GetProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductTypesIdWithBody request with any body
	PostProductTypesIdWithBody(ctx context.Context, id string, params *PostProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductTypesId(ctx context.Context, id string, params *PostProductTypesIdParams, body PostProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsWithBody request with any body
	GetProductsWithBody(ctx context.Context, params *GetProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProducts(ctx context.Context, params *GetProductsParams, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsWithBody request with any body
	PostProductsWithBody(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProducts(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsBatchWithBody request with any body
	PostProductsBatchWithBody(ctx context.Context, params *PostProductsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsBatch(ctx context.Context, params *PostProductsBatchParams, body PostProductsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductsIdWithBody request with any body
	DeleteProductsIdWithBody(ctx context.Context, id string, params *DeleteProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProductsId(ctx context.Context, id string, params *DeleteProductsIdParams, body DeleteProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsIdWithBody request with any body
	GetProductsIdWithBody(ctx context.Context, id string, params *GetProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductsId(ctx context.Context, id string, params *GetProductsIdParams, body GetProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsIdWithBody request with any body
	PostProductsIdWithBody(ctx context.Context, id string, params *PostProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsId(ctx context.Context, id string, params *PostProductsIdParams, body PostProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsIdOptionsWithBody request with any body
	GetProductsIdOptionsWithBody(ctx context.Context, id string, params *GetProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductsIdOptions(ctx context.Context, id string, params *GetProductsIdOptionsParams, body GetProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsIdOptionsWithBody request with any body
	PostProductsIdOptionsWithBody(ctx context.Context, id string, params *PostProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsIdOptions(ctx context.Context, id string, params *PostProductsIdOptionsParams, body PostProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductsIdOptionsOptionIdWithBody request with any body
	DeleteProductsIdOptionsOptionIdWithBody(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProductsIdOptionsOptionId(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, body DeleteProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsIdOptionsOptionIdWithBody request with any body
	GetProductsIdOptionsOptionIdWithBody(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductsIdOptionsOptionId(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, body GetProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsIdOptionsOptionIdWithBody request with any body
	PostProductsIdOptionsOptionIdWithBody(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsIdOptionsOptionId(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, body PostProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsIdVariantsWithBody request with any body
	GetProductsIdVariantsWithBody(ctx context.Context, id string, params *GetProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductsIdVariants(ctx context.Context, id string, params *GetProductsIdVariantsParams, body GetProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsIdVariantsWithBody request with any body
	PostProductsIdVariantsWithBody(ctx context.Context, id string, params *PostProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsIdVariants(ctx context.Context, id string, params *PostProductsIdVariantsParams, body PostProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsIdVariantsBatchWithBody request with any body
	PostProductsIdVariantsBatchWithBody(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsIdVariantsBatch(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, body PostProductsIdVariantsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductsIdVariantsVariantIdWithBody request with any body
	DeleteProductsIdVariantsVariantIdWithBody(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProductsIdVariantsVariantId(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, body DeleteProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsIdVariantsVariantIdWithBody request with any body
	GetProductsIdVariantsVariantIdWithBody(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductsIdVariantsVariantId(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, body GetProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsIdVariantsVariantIdWithBody request with any body
	PostProductsIdVariantsVariantIdWithBody(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsIdVariantsVariantId(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, body PostProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotionsWithBody request with any body
	GetPromotionsWithBody(ctx context.Context, params *GetPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPromotions(ctx context.Context, params *GetPromotionsParams, body GetPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPromotionsWithBody request with any body
	PostPromotionsWithBody(ctx context.Context, params *PostPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromotions(ctx context.Context, params *PostPromotionsParams, body PostPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotionsRuleAttributeOptionsRuleTypeWithBody request with any body
	GetPromotionsRuleAttributeOptionsRuleTypeWithBody(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPromotionsRuleAttributeOptionsRuleType(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, body GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotionsRuleOperatorOptionsWithBody request with any body
	GetPromotionsRuleOperatorOptionsWithBody(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPromotionsRuleOperatorOptions(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, body GetPromotionsRuleOperatorOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBody request with any body
	GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBody(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, body GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePromotionsIdWithBody request with any body
	DeletePromotionsIdWithBody(ctx context.Context, id string, params *DeletePromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePromotionsId(ctx context.Context, id string, params *DeletePromotionsIdParams, body DeletePromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotionsIdWithBody request with any body
	GetPromotionsIdWithBody(ctx context.Context, id string, params *GetPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPromotionsId(ctx context.Context, id string, params *GetPromotionsIdParams, body GetPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPromotionsIdWithBody request with any body
	PostPromotionsIdWithBody(ctx context.Context, id string, params *PostPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromotionsId(ctx context.Context, id string, params *PostPromotionsIdParams, body PostPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPromotionsIdBuyRulesBatchWithBody request with any body
	PostPromotionsIdBuyRulesBatchWithBody(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromotionsIdBuyRulesBatch(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, body PostPromotionsIdBuyRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPromotionsIdRulesBatchWithBody request with any body
	PostPromotionsIdRulesBatchWithBody(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromotionsIdRulesBatch(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, body PostPromotionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPromotionsIdTargetRulesBatchWithBody request with any body
	PostPromotionsIdTargetRulesBatchWithBody(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromotionsIdTargetRulesBatch(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, body PostPromotionsIdTargetRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotionsIdRuleTypeWithBody request with any body
	GetPromotionsIdRuleTypeWithBody(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPromotionsIdRuleType(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, body GetPromotionsIdRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegionsWithBody request with any body
	GetRegionsWithBody(ctx context.Context, params *GetRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRegions(ctx context.Context, params *GetRegionsParams, body GetRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegionsWithBody request with any body
	PostRegionsWithBody(ctx context.Context, params *PostRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegions(ctx context.Context, params *PostRegionsParams, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRegionsIdWithBody request with any body
	DeleteRegionsIdWithBody(ctx context.Context, id string, params *DeleteRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRegionsId(ctx context.Context, id string, params *DeleteRegionsIdParams, body DeleteRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegionsIdWithBody request with any body
	GetRegionsIdWithBody(ctx context.Context, id string, params *GetRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRegionsId(ctx context.Context, id string, params *GetRegionsIdParams, body GetRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegionsIdWithBody request with any body
	PostRegionsIdWithBody(ctx context.Context, id string, params *PostRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegionsId(ctx context.Context, id string, params *PostRegionsIdParams, body PostRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservationsWithBody request with any body
	GetReservationsWithBody(ctx context.Context, params *GetReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReservations(ctx context.Context, params *GetReservationsParams, body GetReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReservationsWithBody request with any body
	PostReservationsWithBody(ctx context.Context, params *PostReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReservations(ctx context.Context, params *PostReservationsParams, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReservationsIdWithBody request with any body
	DeleteReservationsIdWithBody(ctx context.Context, id string, params *DeleteReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteReservationsId(ctx context.Context, id string, params *DeleteReservationsIdParams, body DeleteReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservationsIdWithBody request with any body
	GetReservationsIdWithBody(ctx context.Context, id string, params *GetReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReservationsId(ctx context.Context, id string, params *GetReservationsIdParams, body GetReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReservationsIdWithBody request with any body
	PostReservationsIdWithBody(ctx context.Context, id string, params *PostReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReservationsId(ctx context.Context, id string, params *PostReservationsIdParams, body PostReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesChannelsWithBody request with any body
	GetSalesChannelsWithBody(ctx context.Context, params *GetSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSalesChannels(ctx context.Context, params *GetSalesChannelsParams, body GetSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesChannelsWithBody request with any body
	PostSalesChannelsWithBody(ctx context.Context, params *PostSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSalesChannels(ctx context.Context, params *PostSalesChannelsParams, body PostSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSalesChannelsIdWithBody request with any body
	DeleteSalesChannelsIdWithBody(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSalesChannelsId(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, body DeleteSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesChannelsIdWithBody request with any body
	GetSalesChannelsIdWithBody(ctx context.Context, id string, params *GetSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSalesChannelsId(ctx context.Context, id string, params *GetSalesChannelsIdParams, body GetSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesChannelsIdWithBody request with any body
	PostSalesChannelsIdWithBody(ctx context.Context, id string, params *PostSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSalesChannelsId(ctx context.Context, id string, params *PostSalesChannelsIdParams, body PostSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesChannelsIdProductsWithBody request with any body
	PostSalesChannelsIdProductsWithBody(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSalesChannelsIdProducts(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, body PostSalesChannelsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShippingOptionsWithBody request with any body
	GetShippingOptionsWithBody(ctx context.Context, params *GetShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetShippingOptions(ctx context.Context, params *GetShippingOptionsParams, body GetShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShippingOptionsWithBody request with any body
	PostShippingOptionsWithBody(ctx context.Context, params *PostShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShippingOptions(ctx context.Context, params *PostShippingOptionsParams, body PostShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShippingOptionsIdWithBody request with any body
	DeleteShippingOptionsIdWithBody(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteShippingOptionsId(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, body DeleteShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShippingOptionsIdWithBody request with any body
	PostShippingOptionsIdWithBody(ctx context.Context, id string, params *PostShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShippingOptionsId(ctx context.Context, id string, params *PostShippingOptionsIdParams, body PostShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShippingOptionsIdRulesBatchWithBody request with any body
	PostShippingOptionsIdRulesBatchWithBody(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShippingOptionsIdRulesBatch(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, body PostShippingOptionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShippingProfilesWithBody request with any body
	GetShippingProfilesWithBody(ctx context.Context, params *GetShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetShippingProfiles(ctx context.Context, params *GetShippingProfilesParams, body GetShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShippingProfilesWithBody request with any body
	PostShippingProfilesWithBody(ctx context.Context, params *PostShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShippingProfiles(ctx context.Context, params *PostShippingProfilesParams, body PostShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShippingProfilesIdWithBody request with any body
	DeleteShippingProfilesIdWithBody(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteShippingProfilesId(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, body DeleteShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShippingProfilesIdWithBody request with any body
	GetShippingProfilesIdWithBody(ctx context.Context, id string, params *GetShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetShippingProfilesId(ctx context.Context, id string, params *GetShippingProfilesIdParams, body GetShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStockLocationsWithBody request with any body
	GetStockLocationsWithBody(ctx context.Context, params *GetStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStockLocations(ctx context.Context, params *GetStockLocationsParams, body GetStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStockLocationsWithBody request with any body
	PostStockLocationsWithBody(ctx context.Context, params *PostStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStockLocations(ctx context.Context, params *PostStockLocationsParams, body PostStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStockLocationsIdWithBody request with any body
	DeleteStockLocationsIdWithBody(ctx context.Context, id string, params *DeleteStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteStockLocationsId(ctx context.Context, id string, params *DeleteStockLocationsIdParams, body DeleteStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStockLocationsIdWithBody request with any body
	GetStockLocationsIdWithBody(ctx context.Context, id string, params *GetStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStockLocationsId(ctx context.Context, id string, params *GetStockLocationsIdParams, body GetStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStockLocationsIdWithBody request with any body
	PostStockLocationsIdWithBody(ctx context.Context, id string, params *PostStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStockLocationsId(ctx context.Context, id string, params *PostStockLocationsIdParams, body PostStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStockLocationsIdFulfillmentSetsWithBody request with any body
	PostStockLocationsIdFulfillmentSetsWithBody(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStockLocationsIdFulfillmentSets(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, body PostStockLocationsIdFulfillmentSetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStockLocationsIdSalesChannelsWithBody request with any body
	PostStockLocationsIdSalesChannelsWithBody(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStockLocationsIdSalesChannels(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, body PostStockLocationsIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoresWithBody request with any body
	GetStoresWithBody(ctx context.Context, params *GetStoresParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStores(ctx context.Context, params *GetStoresParams, body GetStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoresIdWithBody request with any body
	GetStoresIdWithBody(ctx context.Context, id string, params *GetStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStoresId(ctx context.Context, id string, params *GetStoresIdParams, body GetStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStoresIdWithBody request with any body
	PostStoresIdWithBody(ctx context.Context, id string, params *PostStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStoresId(ctx context.Context, id string, params *PostStoresIdParams, body PostStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRatesWithBody request with any body
	GetTaxRatesWithBody(ctx context.Context, params *GetTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTaxRates(ctx context.Context, params *GetTaxRatesParams, body GetTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRatesWithBody request with any body
	PostTaxRatesWithBody(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxRates(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxRatesIdWithBody request with any body
	DeleteTaxRatesIdWithBody(ctx context.Context, id string, params *DeleteTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTaxRatesId(ctx context.Context, id string, params *DeleteTaxRatesIdParams, body DeleteTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRatesIdWithBody request with any body
	GetTaxRatesIdWithBody(ctx context.Context, id string, params *GetTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTaxRatesId(ctx context.Context, id string, params *GetTaxRatesIdParams, body GetTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRatesIdWithBody request with any body
	PostTaxRatesIdWithBody(ctx context.Context, id string, params *PostTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxRatesId(ctx context.Context, id string, params *PostTaxRatesIdParams, body PostTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRatesIdRulesWithBody request with any body
	PostTaxRatesIdRulesWithBody(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxRatesIdRules(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, body PostTaxRatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxRatesIdRulesRuleIdWithBody request with any body
	DeleteTaxRatesIdRulesRuleIdWithBody(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTaxRatesIdRulesRuleId(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, body DeleteTaxRatesIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRegionsWithBody request with any body
	GetTaxRegionsWithBody(ctx context.Context, params *GetTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTaxRegions(ctx context.Context, params *GetTaxRegionsParams, body GetTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRegionsWithBody request with any body
	PostTaxRegionsWithBody(ctx context.Context, params *PostTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxRegions(ctx context.Context, params *PostTaxRegionsParams, body PostTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxRegionsIdWithBody request with any body
	DeleteTaxRegionsIdWithBody(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTaxRegionsId(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, body DeleteTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRegionsIdWithBody request with any body
	GetTaxRegionsIdWithBody(ctx context.Context, id string, params *GetTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTaxRegionsId(ctx context.Context, id string, params *GetTaxRegionsIdParams, body GetTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadsWithBody request with any body
	PostUploadsWithBody(ctx context.Context, params *PostUploadsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUploads(ctx context.Context, params *PostUploadsParams, body PostUploadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUploadsIdWithBody request with any body
	DeleteUploadsIdWithBody(ctx context.Context, id string, params *DeleteUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUploadsId(ctx context.Context, id string, params *DeleteUploadsIdParams, body DeleteUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUploadsIdWithBody request with any body
	GetUploadsIdWithBody(ctx context.Context, id string, params *GetUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUploadsId(ctx context.Context, id string, params *GetUploadsIdParams, body GetUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersWithBody request with any body
	GetUsersWithBody(ctx context.Context, params *GetUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsers(ctx context.Context, params *GetUsersParams, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWithBody request with any body
	PostUsersWithBody(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMeWithBody request with any body
	GetUsersMeWithBody(ctx context.Context, params *GetUsersMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsersMe(ctx context.Context, params *GetUsersMeParams, body GetUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersIdWithBody request with any body
	DeleteUsersIdWithBody(ctx context.Context, id string, params *DeleteUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUsersId(ctx context.Context, id string, params *DeleteUsersIdParams, body DeleteUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersIdWithBody request with any body
	GetUsersIdWithBody(ctx context.Context, id string, params *GetUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsersId(ctx context.Context, id string, params *GetUsersIdParams, body GetUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersIdWithBody request with any body
	PostUsersIdWithBody(ctx context.Context, id string, params *PostUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersId(ctx context.Context, id string, params *PostUsersIdParams, body PostUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsExecutionsWithBody request with any body
	GetWorkflowsExecutionsWithBody(ctx context.Context, params *GetWorkflowsExecutionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkflowsExecutions(ctx context.Context, params *GetWorkflowsExecutionsParams, body GetWorkflowsExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsExecutionsIdWithBody request with any body
	GetWorkflowsExecutionsIdWithBody(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkflowsExecutionsId(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, body GetWorkflowsExecutionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsExecutionsWorkflowIdRunWithBody request with any body
	PostWorkflowsExecutionsWorkflowIdRunWithBody(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflowsExecutionsWorkflowIdRun(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, body PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsExecutionsWorkflowIdStepsFailureWithBody request with any body
	PostWorkflowsExecutionsWorkflowIdStepsFailureWithBody(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflowsExecutionsWorkflowIdStepsFailure(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, body PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBody request with any body
	PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBody(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflowsExecutionsWorkflowIdStepsSuccess(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, body PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsExecutionsWorkflowIdSubscribeWithBody request with any body
	GetWorkflowsExecutionsWorkflowIdSubscribeWithBody(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkflowsExecutionsWorkflowIdSubscribe(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsExecutionsWorkflowIdTransactionIdWithBody request with any body
	GetWorkflowsExecutionsWorkflowIdTransactionIdWithBody(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkflowsExecutionsWorkflowIdTransactionId(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBody request with any body
	GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBody(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiKeysWithBody(ctx context.Context, params *GetApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeys(ctx context.Context, params *GetApiKeysParams, body GetApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysWithBody(ctx context.Context, params *PostApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeys(ctx context.Context, params *PostApiKeysParams, body PostApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeysIdWithBody(ctx context.Context, id string, params *DeleteApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeysIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeysId(ctx context.Context, id string, params *DeleteApiKeysIdParams, body DeleteApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeysIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeysIdWithBody(ctx context.Context, id string, params *GetApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeysId(ctx context.Context, id string, params *GetApiKeysIdParams, body GetApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysIdWithBody(ctx context.Context, id string, params *PostApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysId(ctx context.Context, id string, params *PostApiKeysIdParams, body PostApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysIdRevokeWithBody(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysIdRevokeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysIdRevoke(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, body PostApiKeysIdRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysIdRevokeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysIdSalesChannelsWithBody(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysIdSalesChannelsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeysIdSalesChannels(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, body PostApiKeysIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeysIdSalesChannelsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsWithBody(ctx context.Context, params *GetCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigns(ctx context.Context, params *GetCampaignsParams, body GetCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaignsWithBody(ctx context.Context, params *PostCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaigns(ctx context.Context, params *PostCampaignsParams, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaignsIdWithBody(ctx context.Context, id string, params *DeleteCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaignsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaignsId(ctx context.Context, id string, params *DeleteCampaignsIdParams, body DeleteCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaignsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsIdWithBody(ctx context.Context, id string, params *GetCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsId(ctx context.Context, id string, params *GetCampaignsIdParams, body GetCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaignsIdWithBody(ctx context.Context, id string, params *PostCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaignsId(ctx context.Context, id string, params *PostCampaignsIdParams, body PostCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionsWithBody(ctx context.Context, params *GetCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollections(ctx context.Context, params *GetCollectionsParams, body GetCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsWithBody(ctx context.Context, params *PostCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollections(ctx context.Context, params *PostCollectionsParams, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollectionsIdWithBody(ctx context.Context, id string, params *DeleteCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollectionsId(ctx context.Context, id string, params *DeleteCollectionsIdParams, body DeleteCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionsIdWithBody(ctx context.Context, id string, params *GetCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionsId(ctx context.Context, id string, params *GetCollectionsIdParams, body GetCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsIdWithBody(ctx context.Context, id string, params *PostCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsId(ctx context.Context, id string, params *PostCollectionsIdParams, body PostCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsIdProductsWithBody(ctx context.Context, id string, params *PostCollectionsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsIdProductsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsIdProducts(ctx context.Context, id string, params *PostCollectionsIdProductsParams, body PostCollectionsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsIdProductsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrenciesWithBody(ctx context.Context, params *GetCurrenciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrencies(ctx context.Context, params *GetCurrenciesParams, body GetCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrenciesCodeWithBody(ctx context.Context, code string, params *GetCurrenciesCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesCodeRequestWithBody(c.Server, code, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrenciesCode(ctx context.Context, code string, params *GetCurrenciesCodeParams, body GetCurrenciesCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesCodeRequest(c.Server, code, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerGroupsWithBody(ctx context.Context, params *GetCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerGroups(ctx context.Context, params *GetCustomerGroupsParams, body GetCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerGroupsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerGroupsWithBody(ctx context.Context, params *PostCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerGroups(ctx context.Context, params *PostCustomerGroupsParams, body PostCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerGroupsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomerGroupsIdWithBody(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomerGroupsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomerGroupsId(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, body DeleteCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomerGroupsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerGroupsIdWithBody(ctx context.Context, id string, params *GetCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerGroupsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerGroupsId(ctx context.Context, id string, params *GetCustomerGroupsIdParams, body GetCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerGroupsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerGroupsIdWithBody(ctx context.Context, id string, params *PostCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerGroupsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerGroupsId(ctx context.Context, id string, params *PostCustomerGroupsIdParams, body PostCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerGroupsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerGroupsIdCustomersWithBody(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerGroupsIdCustomersRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerGroupsIdCustomers(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, body PostCustomerGroupsIdCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerGroupsIdCustomersRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersWithBody(ctx context.Context, params *GetCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomers(ctx context.Context, params *GetCustomersParams, body GetCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersWithBody(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomers(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersIdWithBody(ctx context.Context, id string, params *DeleteCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersId(ctx context.Context, id string, params *DeleteCustomersIdParams, body DeleteCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersIdWithBody(ctx context.Context, id string, params *GetCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersId(ctx context.Context, id string, params *GetCustomersIdParams, body GetCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersIdWithBody(ctx context.Context, id string, params *PostCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersId(ctx context.Context, id string, params *PostCustomersIdParams, body PostCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersIdAddressesWithBody(ctx context.Context, id string, params *GetCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdAddressesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersIdAddresses(ctx context.Context, id string, params *GetCustomersIdAddressesParams, body GetCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdAddressesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersIdAddressesWithBody(ctx context.Context, id string, params *PostCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersIdAddressesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersIdAddresses(ctx context.Context, id string, params *PostCustomersIdAddressesParams, body PostCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersIdAddressesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersIdAddressesAddressIdWithBody(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomersIdAddressesAddressIdRequestWithBody(c.Server, id, addressId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersIdAddressesAddressId(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, body DeleteCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomersIdAddressesAddressIdRequest(c.Server, id, addressId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersIdAddressesAddressIdWithBody(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdAddressesAddressIdRequestWithBody(c.Server, id, addressId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersIdAddressesAddressId(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, body GetCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdAddressesAddressIdRequest(c.Server, id, addressId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersIdAddressesAddressIdWithBody(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersIdAddressesAddressIdRequestWithBody(c.Server, id, addressId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersIdAddressesAddressId(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, body PostCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersIdAddressesAddressIdRequest(c.Server, id, addressId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDraftOrdersWithBody(ctx context.Context, params *GetDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDraftOrdersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDraftOrders(ctx context.Context, params *GetDraftOrdersParams, body GetDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDraftOrdersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDraftOrdersWithBody(ctx context.Context, params *PostDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDraftOrdersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDraftOrders(ctx context.Context, params *PostDraftOrdersParams, body PostDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDraftOrdersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDraftOrdersIdWithBody(ctx context.Context, id string, params *GetDraftOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDraftOrdersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDraftOrdersId(ctx context.Context, id string, params *GetDraftOrdersIdParams, body GetDraftOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDraftOrdersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentProvidersWithBody(ctx context.Context, params *GetFulfillmentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentProvidersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentProviders(ctx context.Context, params *GetFulfillmentProvidersParams, body GetFulfillmentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentProvidersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFulfillmentSetsIdWithBody(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFulfillmentSetsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFulfillmentSetsId(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, body DeleteFulfillmentSetsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFulfillmentSetsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentSetsIdServiceZonesWithBody(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentSetsIdServiceZonesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentSetsIdServiceZones(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, body PostFulfillmentSetsIdServiceZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentSetsIdServiceZonesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(c.Server, id, zoneId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFulfillmentSetsIdServiceZonesZoneId(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, body DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequest(c.Server, id, zoneId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(c.Server, id, zoneId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentSetsIdServiceZonesZoneId(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, body GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentSetsIdServiceZonesZoneIdRequest(c.Server, id, zoneId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(c.Server, id, zoneId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentSetsIdServiceZonesZoneId(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, body PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentSetsIdServiceZonesZoneIdRequest(c.Server, id, zoneId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentsWithBody(ctx context.Context, params *PostFulfillmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillments(ctx context.Context, params *PostFulfillmentsParams, body PostFulfillmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentsIdCancelWithBody(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentsIdCancelRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentsIdCancel(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, body PostFulfillmentsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentsIdCancelRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentsIdShipmentWithBody(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentsIdShipmentRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulfillmentsIdShipment(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, body PostFulfillmentsIdShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulfillmentsIdShipmentRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryItemsWithBody(ctx context.Context, params *GetInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryItemsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryItems(ctx context.Context, params *GetInventoryItemsParams, body GetInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryItemsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsWithBody(ctx context.Context, params *PostInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItems(ctx context.Context, params *PostInventoryItemsParams, body PostInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInventoryItemsIdWithBody(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInventoryItemsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInventoryItemsId(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, body DeleteInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInventoryItemsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryItemsIdWithBody(ctx context.Context, id string, params *GetInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryItemsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryItemsId(ctx context.Context, id string, params *GetInventoryItemsIdParams, body GetInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryItemsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdWithBody(ctx context.Context, id string, params *PostInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsId(ctx context.Context, id string, params *PostInventoryItemsIdParams, body PostInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryItemsIdLocationLevelsWithBody(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryItemsIdLocationLevelsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryItemsIdLocationLevels(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, body GetInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryItemsIdLocationLevelsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdLocationLevelsWithBody(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdLocationLevelsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdLocationLevels(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, body PostInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdLocationLevelsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdLocationLevelsBatchWithBody(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdLocationLevelsBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdLocationLevelsBatch(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, body PostInventoryItemsIdLocationLevelsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdLocationLevelsBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInventoryItemsIdLocationLevelsLocationIdWithBody(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInventoryItemsIdLocationLevelsLocationIdRequestWithBody(c.Server, id, locationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInventoryItemsIdLocationLevelsLocationId(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, body DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInventoryItemsIdLocationLevelsLocationIdRequest(c.Server, id, locationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdLocationLevelsLocationIdWithBody(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdLocationLevelsLocationIdRequestWithBody(c.Server, id, locationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryItemsIdLocationLevelsLocationId(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, body PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryItemsIdLocationLevelsLocationIdRequest(c.Server, id, locationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitesWithBody(ctx context.Context, params *GetInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvites(ctx context.Context, params *GetInvitesParams, body GetInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitesWithBody(ctx context.Context, params *PostInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvites(ctx context.Context, params *PostInvitesParams, body PostInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitesAcceptWithBody(ctx context.Context, params *PostInvitesAcceptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitesAcceptRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitesAccept(ctx context.Context, params *PostInvitesAcceptParams, body PostInvitesAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitesAcceptRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvitesIdWithBody(ctx context.Context, id string, params *DeleteInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvitesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvitesId(ctx context.Context, id string, params *DeleteInvitesIdParams, body DeleteInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvitesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitesIdWithBody(ctx context.Context, id string, params *GetInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitesId(ctx context.Context, id string, params *GetInvitesIdParams, body GetInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitesIdResendWithBody(ctx context.Context, id string, params *PostInvitesIdResendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitesIdResendRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitesIdResend(ctx context.Context, id string, params *PostInvitesIdResendParams, body PostInvitesIdResendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitesIdResendRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersWithBody(ctx context.Context, params *GetOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrders(ctx context.Context, params *GetOrdersParams, body GetOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersIdWithBody(ctx context.Context, id string, params *GetOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersId(ctx context.Context, id string, params *GetOrdersIdParams, body GetOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsWithBody(ctx context.Context, params *GetPaymentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayments(ctx context.Context, params *GetPaymentsParams, body GetPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsPaymentProvidersWithBody(ctx context.Context, params *GetPaymentsPaymentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsPaymentProvidersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsPaymentProviders(ctx context.Context, params *GetPaymentsPaymentProvidersParams, body GetPaymentsPaymentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsPaymentProvidersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsIdWithBody(ctx context.Context, id string, params *GetPaymentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsId(ctx context.Context, id string, params *GetPaymentsIdParams, body GetPaymentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsIdCaptureWithBody(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsIdCaptureRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsIdCapture(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, body PostPaymentsIdCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsIdCaptureRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsIdRefundWithBody(ctx context.Context, id string, params *PostPaymentsIdRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsIdRefundRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsIdRefund(ctx context.Context, id string, params *PostPaymentsIdRefundParams, body PostPaymentsIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsIdRefundRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPriceListsWithBody(ctx context.Context, params *GetPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPriceListsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPriceLists(ctx context.Context, params *GetPriceListsParams, body GetPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPriceListsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsWithBody(ctx context.Context, params *PostPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceLists(ctx context.Context, params *PostPriceListsParams, body PostPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePriceListsIdWithBody(ctx context.Context, id string, params *DeletePriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePriceListsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePriceListsId(ctx context.Context, id string, params *DeletePriceListsIdParams, body DeletePriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePriceListsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPriceListsIdWithBody(ctx context.Context, id string, params *GetPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPriceListsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPriceListsId(ctx context.Context, id string, params *GetPriceListsIdParams, body GetPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPriceListsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsIdWithBody(ctx context.Context, id string, params *PostPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsId(ctx context.Context, id string, params *PostPriceListsIdParams, body PostPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsIdPricesBatchWithBody(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsIdPricesBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsIdPricesBatch(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, body PostPriceListsIdPricesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsIdPricesBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsIdProductsWithBody(ctx context.Context, id string, params *PostPriceListsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsIdProductsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPriceListsIdProducts(ctx context.Context, id string, params *PostPriceListsIdProductsParams, body PostPriceListsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPriceListsIdProductsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingRuleTypesWithBody(ctx context.Context, params *GetPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingRuleTypesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingRuleTypes(ctx context.Context, params *GetPricingRuleTypesParams, body GetPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingRuleTypesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPricingRuleTypesWithBody(ctx context.Context, params *PostPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPricingRuleTypesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPricingRuleTypes(ctx context.Context, params *PostPricingRuleTypesParams, body PostPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPricingRuleTypesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePricingRuleTypesIdWithBody(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePricingRuleTypesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePricingRuleTypesId(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, body DeletePricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePricingRuleTypesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingRuleTypesIdWithBody(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingRuleTypesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingRuleTypesId(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, body GetPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingRuleTypesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPricingRuleTypesIdWithBody(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPricingRuleTypesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPricingRuleTypesId(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, body PostPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPricingRuleTypesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductCategoriesWithBody(ctx context.Context, params *GetProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductCategoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductCategories(ctx context.Context, params *GetProductCategoriesParams, body GetProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductCategoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductCategoriesWithBody(ctx context.Context, params *PostProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductCategoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductCategories(ctx context.Context, params *PostProductCategoriesParams, body PostProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductCategoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductCategoriesIdWithBody(ctx context.Context, id string, params *GetProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductCategoriesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductCategoriesId(ctx context.Context, id string, params *GetProductCategoriesIdParams, body GetProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductCategoriesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductCategoriesIdWithBody(ctx context.Context, id string, params *PostProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductCategoriesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductCategoriesId(ctx context.Context, id string, params *PostProductCategoriesIdParams, body PostProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductCategoriesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductCategoriesIdProductsWithBody(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductCategoriesIdProductsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductCategoriesIdProducts(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, body PostProductCategoriesIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductCategoriesIdProductsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductTypesWithBody(ctx context.Context, params *GetProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductTypesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductTypes(ctx context.Context, params *GetProductTypesParams, body GetProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductTypesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductTypesWithBody(ctx context.Context, params *PostProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductTypesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductTypes(ctx context.Context, params *PostProductTypesParams, body PostProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductTypesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductTypesIdWithBody(ctx context.Context, id string, params *DeleteProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductTypesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductTypesId(ctx context.Context, id string, params *DeleteProductTypesIdParams, body DeleteProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductTypesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductTypesIdWithBody(ctx context.Context, id string, params *GetProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductTypesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductTypesId(ctx context.Context, id string, params *GetProductTypesIdParams, body GetProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductTypesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductTypesIdWithBody(ctx context.Context, id string, params *PostProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductTypesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductTypesId(ctx context.Context, id string, params *PostProductTypesIdParams, body PostProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductTypesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsWithBody(ctx context.Context, params *GetProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, params *GetProductsParams, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsWithBody(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProducts(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsBatchWithBody(ctx context.Context, params *PostProductsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsBatchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsBatch(ctx context.Context, params *PostProductsBatchParams, body PostProductsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsBatchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsIdWithBody(ctx context.Context, id string, params *DeleteProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsId(ctx context.Context, id string, params *DeleteProductsIdParams, body DeleteProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdWithBody(ctx context.Context, id string, params *GetProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsId(ctx context.Context, id string, params *GetProductsIdParams, body GetProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdWithBody(ctx context.Context, id string, params *PostProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsId(ctx context.Context, id string, params *PostProductsIdParams, body PostProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdOptionsWithBody(ctx context.Context, id string, params *GetProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdOptionsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdOptions(ctx context.Context, id string, params *GetProductsIdOptionsParams, body GetProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdOptionsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdOptionsWithBody(ctx context.Context, id string, params *PostProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdOptionsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdOptions(ctx context.Context, id string, params *PostProductsIdOptionsParams, body PostProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdOptionsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsIdOptionsOptionIdWithBody(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsIdOptionsOptionIdRequestWithBody(c.Server, id, optionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsIdOptionsOptionId(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, body DeleteProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsIdOptionsOptionIdRequest(c.Server, id, optionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdOptionsOptionIdWithBody(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdOptionsOptionIdRequestWithBody(c.Server, id, optionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdOptionsOptionId(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, body GetProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdOptionsOptionIdRequest(c.Server, id, optionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdOptionsOptionIdWithBody(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdOptionsOptionIdRequestWithBody(c.Server, id, optionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdOptionsOptionId(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, body PostProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdOptionsOptionIdRequest(c.Server, id, optionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdVariantsWithBody(ctx context.Context, id string, params *GetProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdVariantsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdVariants(ctx context.Context, id string, params *GetProductsIdVariantsParams, body GetProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdVariantsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdVariantsWithBody(ctx context.Context, id string, params *PostProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdVariantsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdVariants(ctx context.Context, id string, params *PostProductsIdVariantsParams, body PostProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdVariantsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdVariantsBatchWithBody(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdVariantsBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdVariantsBatch(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, body PostProductsIdVariantsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdVariantsBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsIdVariantsVariantIdWithBody(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsIdVariantsVariantIdRequestWithBody(c.Server, id, variantId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsIdVariantsVariantId(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, body DeleteProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsIdVariantsVariantIdRequest(c.Server, id, variantId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdVariantsVariantIdWithBody(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdVariantsVariantIdRequestWithBody(c.Server, id, variantId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsIdVariantsVariantId(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, body GetProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdVariantsVariantIdRequest(c.Server, id, variantId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdVariantsVariantIdWithBody(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdVariantsVariantIdRequestWithBody(c.Server, id, variantId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsIdVariantsVariantId(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, body PostProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsIdVariantsVariantIdRequest(c.Server, id, variantId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsWithBody(ctx context.Context, params *GetPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotions(ctx context.Context, params *GetPromotionsParams, body GetPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsWithBody(ctx context.Context, params *PostPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotions(ctx context.Context, params *PostPromotionsParams, body PostPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsRuleAttributeOptionsRuleTypeWithBody(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRuleAttributeOptionsRuleTypeRequestWithBody(c.Server, ruleType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsRuleAttributeOptionsRuleType(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, body GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRuleAttributeOptionsRuleTypeRequest(c.Server, ruleType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsRuleOperatorOptionsWithBody(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRuleOperatorOptionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsRuleOperatorOptions(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, body GetPromotionsRuleOperatorOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRuleOperatorOptionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBody(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequestWithBody(c.Server, ruleType, ruleAttributeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, body GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequest(c.Server, ruleType, ruleAttributeId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePromotionsIdWithBody(ctx context.Context, id string, params *DeletePromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePromotionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePromotionsId(ctx context.Context, id string, params *DeletePromotionsIdParams, body DeletePromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePromotionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsIdWithBody(ctx context.Context, id string, params *GetPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsId(ctx context.Context, id string, params *GetPromotionsIdParams, body GetPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdWithBody(ctx context.Context, id string, params *PostPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsId(ctx context.Context, id string, params *PostPromotionsIdParams, body PostPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdBuyRulesBatchWithBody(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdBuyRulesBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdBuyRulesBatch(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, body PostPromotionsIdBuyRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdBuyRulesBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdRulesBatchWithBody(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdRulesBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdRulesBatch(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, body PostPromotionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdRulesBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdTargetRulesBatchWithBody(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdTargetRulesBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromotionsIdTargetRulesBatch(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, body PostPromotionsIdTargetRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromotionsIdTargetRulesBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsIdRuleTypeWithBody(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsIdRuleTypeRequestWithBody(c.Server, id, ruleType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotionsIdRuleType(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, body GetPromotionsIdRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionsIdRuleTypeRequest(c.Server, id, ruleType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegionsWithBody(ctx context.Context, params *GetRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegions(ctx context.Context, params *GetRegionsParams, body GetRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegionsWithBody(ctx context.Context, params *PostRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegions(ctx context.Context, params *PostRegionsParams, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegionsIdWithBody(ctx context.Context, id string, params *DeleteRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegionsId(ctx context.Context, id string, params *DeleteRegionsIdParams, body DeleteRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegionsIdWithBody(ctx context.Context, id string, params *GetRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegionsId(ctx context.Context, id string, params *GetRegionsIdParams, body GetRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegionsIdWithBody(ctx context.Context, id string, params *PostRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegionsId(ctx context.Context, id string, params *PostRegionsIdParams, body PostRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservationsWithBody(ctx context.Context, params *GetReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservations(ctx context.Context, params *GetReservationsParams, body GetReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservationsWithBody(ctx context.Context, params *PostReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservations(ctx context.Context, params *PostReservationsParams, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReservationsIdWithBody(ctx context.Context, id string, params *DeleteReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReservationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReservationsId(ctx context.Context, id string, params *DeleteReservationsIdParams, body DeleteReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReservationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservationsIdWithBody(ctx context.Context, id string, params *GetReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservationsId(ctx context.Context, id string, params *GetReservationsIdParams, body GetReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservationsIdWithBody(ctx context.Context, id string, params *PostReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservationsId(ctx context.Context, id string, params *PostReservationsIdParams, body PostReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalesChannelsWithBody(ctx context.Context, params *GetSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesChannelsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalesChannels(ctx context.Context, params *GetSalesChannelsParams, body GetSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesChannelsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesChannelsWithBody(ctx context.Context, params *PostSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesChannelsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesChannels(ctx context.Context, params *PostSalesChannelsParams, body PostSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesChannelsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSalesChannelsIdWithBody(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSalesChannelsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSalesChannelsId(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, body DeleteSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSalesChannelsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalesChannelsIdWithBody(ctx context.Context, id string, params *GetSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesChannelsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalesChannelsId(ctx context.Context, id string, params *GetSalesChannelsIdParams, body GetSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesChannelsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesChannelsIdWithBody(ctx context.Context, id string, params *PostSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesChannelsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesChannelsId(ctx context.Context, id string, params *PostSalesChannelsIdParams, body PostSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesChannelsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesChannelsIdProductsWithBody(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesChannelsIdProductsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesChannelsIdProducts(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, body PostSalesChannelsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesChannelsIdProductsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingOptionsWithBody(ctx context.Context, params *GetShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingOptionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingOptions(ctx context.Context, params *GetShippingOptionsParams, body GetShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingOptionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingOptionsWithBody(ctx context.Context, params *PostShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingOptionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingOptions(ctx context.Context, params *PostShippingOptionsParams, body PostShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingOptionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShippingOptionsIdWithBody(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShippingOptionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShippingOptionsId(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, body DeleteShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShippingOptionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingOptionsIdWithBody(ctx context.Context, id string, params *PostShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingOptionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingOptionsId(ctx context.Context, id string, params *PostShippingOptionsIdParams, body PostShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingOptionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingOptionsIdRulesBatchWithBody(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingOptionsIdRulesBatchRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingOptionsIdRulesBatch(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, body PostShippingOptionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingOptionsIdRulesBatchRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingProfilesWithBody(ctx context.Context, params *GetShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingProfiles(ctx context.Context, params *GetShippingProfilesParams, body GetShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingProfilesWithBody(ctx context.Context, params *PostShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShippingProfiles(ctx context.Context, params *PostShippingProfilesParams, body PostShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShippingProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShippingProfilesIdWithBody(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShippingProfilesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShippingProfilesId(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, body DeleteShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShippingProfilesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingProfilesIdWithBody(ctx context.Context, id string, params *GetShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingProfilesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShippingProfilesId(ctx context.Context, id string, params *GetShippingProfilesIdParams, body GetShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShippingProfilesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStockLocationsWithBody(ctx context.Context, params *GetStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStockLocationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStockLocations(ctx context.Context, params *GetStockLocationsParams, body GetStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStockLocationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsWithBody(ctx context.Context, params *PostStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocations(ctx context.Context, params *PostStockLocationsParams, body PostStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStockLocationsIdWithBody(ctx context.Context, id string, params *DeleteStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStockLocationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStockLocationsId(ctx context.Context, id string, params *DeleteStockLocationsIdParams, body DeleteStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStockLocationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStockLocationsIdWithBody(ctx context.Context, id string, params *GetStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStockLocationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStockLocationsId(ctx context.Context, id string, params *GetStockLocationsIdParams, body GetStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStockLocationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsIdWithBody(ctx context.Context, id string, params *PostStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsId(ctx context.Context, id string, params *PostStockLocationsIdParams, body PostStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsIdFulfillmentSetsWithBody(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsIdFulfillmentSetsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsIdFulfillmentSets(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, body PostStockLocationsIdFulfillmentSetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsIdFulfillmentSetsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsIdSalesChannelsWithBody(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsIdSalesChannelsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStockLocationsIdSalesChannels(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, body PostStockLocationsIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStockLocationsIdSalesChannelsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoresWithBody(ctx context.Context, params *GetStoresParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoresRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStores(ctx context.Context, params *GetStoresParams, body GetStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoresRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoresIdWithBody(ctx context.Context, id string, params *GetStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoresIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoresId(ctx context.Context, id string, params *GetStoresIdParams, body GetStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoresIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoresIdWithBody(ctx context.Context, id string, params *PostStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoresIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoresId(ctx context.Context, id string, params *PostStoresIdParams, body PostStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoresIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRatesWithBody(ctx context.Context, params *GetTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRates(ctx context.Context, params *GetTaxRatesParams, body GetTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesWithBody(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRates(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRatesIdWithBody(ctx context.Context, id string, params *DeleteTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRatesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRatesId(ctx context.Context, id string, params *DeleteTaxRatesIdParams, body DeleteTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRatesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRatesIdWithBody(ctx context.Context, id string, params *GetTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRatesId(ctx context.Context, id string, params *GetTaxRatesIdParams, body GetTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesIdWithBody(ctx context.Context, id string, params *PostTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesId(ctx context.Context, id string, params *PostTaxRatesIdParams, body PostTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesIdRulesWithBody(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesIdRulesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesIdRules(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, body PostTaxRatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesIdRulesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRatesIdRulesRuleIdWithBody(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRatesIdRulesRuleIdRequestWithBody(c.Server, id, ruleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRatesIdRulesRuleId(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, body DeleteTaxRatesIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRatesIdRulesRuleIdRequest(c.Server, id, ruleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegionsWithBody(ctx context.Context, params *GetTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegions(ctx context.Context, params *GetTaxRegionsParams, body GetTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRegionsWithBody(ctx context.Context, params *PostTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRegionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRegions(ctx context.Context, params *PostTaxRegionsParams, body PostTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRegionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRegionsIdWithBody(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRegionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRegionsId(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, body DeleteTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRegionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegionsIdWithBody(ctx context.Context, id string, params *GetTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegionsId(ctx context.Context, id string, params *GetTaxRegionsIdParams, body GetTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadsWithBody(ctx context.Context, params *PostUploadsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploads(ctx context.Context, params *PostUploadsParams, body PostUploadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUploadsIdWithBody(ctx context.Context, id string, params *DeleteUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUploadsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUploadsId(ctx context.Context, id string, params *DeleteUploadsIdParams, body DeleteUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUploadsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadsIdWithBody(ctx context.Context, id string, params *GetUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadsId(ctx context.Context, id string, params *GetUploadsIdParams, body GetUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersWithBody(ctx context.Context, params *GetUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMeWithBody(ctx context.Context, params *GetUsersMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, params *GetUsersMeParams, body GetUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersIdWithBody(ctx context.Context, id string, params *DeleteUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersId(ctx context.Context, id string, params *DeleteUsersIdParams, body DeleteUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersIdWithBody(ctx context.Context, id string, params *GetUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id string, params *GetUsersIdParams, body GetUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersIdWithBody(ctx context.Context, id string, params *PostUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersId(ctx context.Context, id string, params *PostUsersIdParams, body PostUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWithBody(ctx context.Context, params *GetWorkflowsExecutionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutions(ctx context.Context, params *GetWorkflowsExecutionsParams, body GetWorkflowsExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsIdWithBody(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsId(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, body GetWorkflowsExecutionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsExecutionsWorkflowIdRunWithBody(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsExecutionsWorkflowIdRunRequestWithBody(c.Server, workflowId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsExecutionsWorkflowIdRun(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, body PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsExecutionsWorkflowIdRunRequest(c.Server, workflowId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsExecutionsWorkflowIdStepsFailureWithBody(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequestWithBody(c.Server, workflowId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsExecutionsWorkflowIdStepsFailure(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, body PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequest(c.Server, workflowId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBody(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequestWithBody(c.Server, workflowId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsExecutionsWorkflowIdStepsSuccess(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, body PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequest(c.Server, workflowId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWorkflowIdSubscribeWithBody(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsWorkflowIdSubscribeRequestWithBody(c.Server, workflowId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWorkflowIdSubscribe(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsWorkflowIdSubscribeRequest(c.Server, workflowId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWorkflowIdTransactionIdWithBody(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequestWithBody(c.Server, workflowId, transactionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWorkflowIdTransactionId(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequest(c.Server, workflowId, transactionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBody(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequestWithBody(c.Server, workflowId, transactionId, stepId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequest(c.Server, workflowId, transactionId, stepId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiKeysRequest calls the generic GetApiKeys builder with application/json body
func NewGetApiKeysRequest(server string, params *GetApiKeysParams, body GetApiKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApiKeysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetApiKeysRequestWithBody generates requests for GetApiKeys with any type of body
func NewGetApiKeysRequestWithBody(server string, params *GetApiKeysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiKeysRequest calls the generic PostApiKeys builder with application/json body
func NewPostApiKeysRequest(server string, params *PostApiKeysParams, body PostApiKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKeysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiKeysRequestWithBody generates requests for PostApiKeys with any type of body
func NewPostApiKeysRequestWithBody(server string, params *PostApiKeysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeysIdRequest calls the generic DeleteApiKeysId builder with application/json body
func NewDeleteApiKeysIdRequest(server string, id string, params *DeleteApiKeysIdParams, body DeleteApiKeysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiKeysIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteApiKeysIdRequestWithBody generates requests for DeleteApiKeysId with any type of body
func NewDeleteApiKeysIdRequestWithBody(server string, id string, params *DeleteApiKeysIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiKeysIdRequest calls the generic GetApiKeysId builder with application/json body
func NewGetApiKeysIdRequest(server string, id string, params *GetApiKeysIdParams, body GetApiKeysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApiKeysIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetApiKeysIdRequestWithBody generates requests for GetApiKeysId with any type of body
func NewGetApiKeysIdRequestWithBody(server string, id string, params *GetApiKeysIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiKeysIdRequest calls the generic PostApiKeysId builder with application/json body
func NewPostApiKeysIdRequest(server string, id string, params *PostApiKeysIdParams, body PostApiKeysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKeysIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostApiKeysIdRequestWithBody generates requests for PostApiKeysId with any type of body
func NewPostApiKeysIdRequestWithBody(server string, id string, params *PostApiKeysIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiKeysIdRevokeRequest calls the generic PostApiKeysIdRevoke builder with application/json body
func NewPostApiKeysIdRevokeRequest(server string, id string, params *PostApiKeysIdRevokeParams, body PostApiKeysIdRevokeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKeysIdRevokeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostApiKeysIdRevokeRequestWithBody generates requests for PostApiKeysIdRevoke with any type of body
func NewPostApiKeysIdRevokeRequestWithBody(server string, id string, params *PostApiKeysIdRevokeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys/%s/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiKeysIdSalesChannelsRequest calls the generic PostApiKeysIdSalesChannels builder with application/json body
func NewPostApiKeysIdSalesChannelsRequest(server string, id string, params *PostApiKeysIdSalesChannelsParams, body PostApiKeysIdSalesChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKeysIdSalesChannelsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostApiKeysIdSalesChannelsRequestWithBody generates requests for PostApiKeysIdSalesChannels with any type of body
func NewPostApiKeysIdSalesChannelsRequestWithBody(server string, id string, params *PostApiKeysIdSalesChannelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/api-keys/%s/sales-channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCampaignsRequest calls the generic GetCampaigns builder with application/json body
func NewGetCampaignsRequest(server string, params *GetCampaignsParams, body GetCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetCampaignsRequestWithBody generates requests for GetCampaigns with any type of body
func NewGetCampaignsRequestWithBody(server string, params *GetCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCampaignsRequest calls the generic PostCampaigns builder with application/json body
func NewPostCampaignsRequest(server string, params *PostCampaignsParams, body PostCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCampaignsRequestWithBody generates requests for PostCampaigns with any type of body
func NewPostCampaignsRequestWithBody(server string, params *PostCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCampaignsIdRequest calls the generic DeleteCampaignsId builder with application/json body
func NewDeleteCampaignsIdRequest(server string, id string, params *DeleteCampaignsIdParams, body DeleteCampaignsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCampaignsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteCampaignsIdRequestWithBody generates requests for DeleteCampaignsId with any type of body
func NewDeleteCampaignsIdRequestWithBody(server string, id string, params *DeleteCampaignsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCampaignsIdRequest calls the generic GetCampaignsId builder with application/json body
func NewGetCampaignsIdRequest(server string, id string, params *GetCampaignsIdParams, body GetCampaignsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCampaignsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetCampaignsIdRequestWithBody generates requests for GetCampaignsId with any type of body
func NewGetCampaignsIdRequestWithBody(server string, id string, params *GetCampaignsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCampaignsIdRequest calls the generic PostCampaignsId builder with application/json body
func NewPostCampaignsIdRequest(server string, id string, params *PostCampaignsIdParams, body PostCampaignsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCampaignsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCampaignsIdRequestWithBody generates requests for PostCampaignsId with any type of body
func NewPostCampaignsIdRequestWithBody(server string, id string, params *PostCampaignsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionsRequest calls the generic GetCollections builder with application/json body
func NewGetCollectionsRequest(server string, params *GetCollectionsParams, body GetCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCollectionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetCollectionsRequestWithBody generates requests for GetCollections with any type of body
func NewGetCollectionsRequestWithBody(server string, params *GetCollectionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsRequest calls the generic PostCollections builder with application/json body
func NewPostCollectionsRequest(server string, params *PostCollectionsParams, body PostCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCollectionsRequestWithBody generates requests for PostCollections with any type of body
func NewPostCollectionsRequestWithBody(server string, params *PostCollectionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCollectionsIdRequest calls the generic DeleteCollectionsId builder with application/json body
func NewDeleteCollectionsIdRequest(server string, id string, params *DeleteCollectionsIdParams, body DeleteCollectionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCollectionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteCollectionsIdRequestWithBody generates requests for DeleteCollectionsId with any type of body
func NewDeleteCollectionsIdRequestWithBody(server string, id string, params *DeleteCollectionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionsIdRequest calls the generic GetCollectionsId builder with application/json body
func NewGetCollectionsIdRequest(server string, id string, params *GetCollectionsIdParams, body GetCollectionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCollectionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetCollectionsIdRequestWithBody generates requests for GetCollectionsId with any type of body
func NewGetCollectionsIdRequestWithBody(server string, id string, params *GetCollectionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsIdRequest calls the generic PostCollectionsId builder with application/json body
func NewPostCollectionsIdRequest(server string, id string, params *PostCollectionsIdParams, body PostCollectionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCollectionsIdRequestWithBody generates requests for PostCollectionsId with any type of body
func NewPostCollectionsIdRequestWithBody(server string, id string, params *PostCollectionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsIdProductsRequest calls the generic PostCollectionsIdProducts builder with application/json body
func NewPostCollectionsIdProductsRequest(server string, id string, params *PostCollectionsIdProductsParams, body PostCollectionsIdProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsIdProductsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCollectionsIdProductsRequestWithBody generates requests for PostCollectionsIdProducts with any type of body
func NewPostCollectionsIdProductsRequestWithBody(server string, id string, params *PostCollectionsIdProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/collections/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCurrenciesRequest calls the generic GetCurrencies builder with application/json body
func NewGetCurrenciesRequest(server string, params *GetCurrenciesParams, body GetCurrenciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCurrenciesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetCurrenciesRequestWithBody generates requests for GetCurrencies with any type of body
func NewGetCurrenciesRequestWithBody(server string, params *GetCurrenciesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCurrenciesCodeRequest calls the generic GetCurrenciesCode builder with application/json body
func NewGetCurrenciesCodeRequest(server string, code string, params *GetCurrenciesCodeParams, body GetCurrenciesCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCurrenciesCodeRequestWithBody(server, code, params, "application/json", bodyReader)
}

// NewGetCurrenciesCodeRequestWithBody generates requests for GetCurrenciesCode with any type of body
func NewGetCurrenciesCodeRequestWithBody(server string, code string, params *GetCurrenciesCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/currencies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomerGroupsRequest calls the generic GetCustomerGroups builder with application/json body
func NewGetCustomerGroupsRequest(server string, params *GetCustomerGroupsParams, body GetCustomerGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomerGroupsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetCustomerGroupsRequestWithBody generates requests for GetCustomerGroups with any type of body
func NewGetCustomerGroupsRequestWithBody(server string, params *GetCustomerGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customer-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomerGroupsRequest calls the generic PostCustomerGroups builder with application/json body
func NewPostCustomerGroupsRequest(server string, params *PostCustomerGroupsParams, body PostCustomerGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerGroupsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCustomerGroupsRequestWithBody generates requests for PostCustomerGroups with any type of body
func NewPostCustomerGroupsRequestWithBody(server string, params *PostCustomerGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customer-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomerGroupsIdRequest calls the generic DeleteCustomerGroupsId builder with application/json body
func NewDeleteCustomerGroupsIdRequest(server string, id string, params *DeleteCustomerGroupsIdParams, body DeleteCustomerGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCustomerGroupsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteCustomerGroupsIdRequestWithBody generates requests for DeleteCustomerGroupsId with any type of body
func NewDeleteCustomerGroupsIdRequestWithBody(server string, id string, params *DeleteCustomerGroupsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customer-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomerGroupsIdRequest calls the generic GetCustomerGroupsId builder with application/json body
func NewGetCustomerGroupsIdRequest(server string, id string, params *GetCustomerGroupsIdParams, body GetCustomerGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomerGroupsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetCustomerGroupsIdRequestWithBody generates requests for GetCustomerGroupsId with any type of body
func NewGetCustomerGroupsIdRequestWithBody(server string, id string, params *GetCustomerGroupsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customer-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomerGroupsIdRequest calls the generic PostCustomerGroupsId builder with application/json body
func NewPostCustomerGroupsIdRequest(server string, id string, params *PostCustomerGroupsIdParams, body PostCustomerGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerGroupsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCustomerGroupsIdRequestWithBody generates requests for PostCustomerGroupsId with any type of body
func NewPostCustomerGroupsIdRequestWithBody(server string, id string, params *PostCustomerGroupsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customer-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomerGroupsIdCustomersRequest calls the generic PostCustomerGroupsIdCustomers builder with application/json body
func NewPostCustomerGroupsIdCustomersRequest(server string, id string, params *PostCustomerGroupsIdCustomersParams, body PostCustomerGroupsIdCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerGroupsIdCustomersRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCustomerGroupsIdCustomersRequestWithBody generates requests for PostCustomerGroupsIdCustomers with any type of body
func NewPostCustomerGroupsIdCustomersRequestWithBody(server string, id string, params *PostCustomerGroupsIdCustomersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customer-groups/%s/customers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomersRequest calls the generic GetCustomers builder with application/json body
func NewGetCustomersRequest(server string, params *GetCustomersParams, body GetCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetCustomersRequestWithBody generates requests for GetCustomers with any type of body
func NewGetCustomersRequestWithBody(server string, params *GetCustomersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomersRequest calls the generic PostCustomers builder with application/json body
func NewPostCustomersRequest(server string, params *PostCustomersParams, body PostCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCustomersRequestWithBody generates requests for PostCustomers with any type of body
func NewPostCustomersRequestWithBody(server string, params *PostCustomersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomersIdRequest calls the generic DeleteCustomersId builder with application/json body
func NewDeleteCustomersIdRequest(server string, id string, params *DeleteCustomersIdParams, body DeleteCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCustomersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteCustomersIdRequestWithBody generates requests for DeleteCustomersId with any type of body
func NewDeleteCustomersIdRequestWithBody(server string, id string, params *DeleteCustomersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomersIdRequest calls the generic GetCustomersId builder with application/json body
func NewGetCustomersIdRequest(server string, id string, params *GetCustomersIdParams, body GetCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetCustomersIdRequestWithBody generates requests for GetCustomersId with any type of body
func NewGetCustomersIdRequestWithBody(server string, id string, params *GetCustomersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomersIdRequest calls the generic PostCustomersId builder with application/json body
func NewPostCustomersIdRequest(server string, id string, params *PostCustomersIdParams, body PostCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCustomersIdRequestWithBody generates requests for PostCustomersId with any type of body
func NewPostCustomersIdRequestWithBody(server string, id string, params *PostCustomersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomersIdAddressesRequest calls the generic GetCustomersIdAddresses builder with application/json body
func NewGetCustomersIdAddressesRequest(server string, id string, params *GetCustomersIdAddressesParams, body GetCustomersIdAddressesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomersIdAddressesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetCustomersIdAddressesRequestWithBody generates requests for GetCustomersIdAddresses with any type of body
func NewGetCustomersIdAddressesRequestWithBody(server string, id string, params *GetCustomersIdAddressesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomersIdAddressesRequest calls the generic PostCustomersIdAddresses builder with application/json body
func NewPostCustomersIdAddressesRequest(server string, id string, params *PostCustomersIdAddressesParams, body PostCustomersIdAddressesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersIdAddressesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCustomersIdAddressesRequestWithBody generates requests for PostCustomersIdAddresses with any type of body
func NewPostCustomersIdAddressesRequestWithBody(server string, id string, params *PostCustomersIdAddressesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomersIdAddressesAddressIdRequest calls the generic DeleteCustomersIdAddressesAddressId builder with application/json body
func NewDeleteCustomersIdAddressesAddressIdRequest(server string, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, body DeleteCustomersIdAddressesAddressIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCustomersIdAddressesAddressIdRequestWithBody(server, id, addressId, params, "application/json", bodyReader)
}

// NewDeleteCustomersIdAddressesAddressIdRequestWithBody generates requests for DeleteCustomersIdAddressesAddressId with any type of body
func NewDeleteCustomersIdAddressesAddressIdRequestWithBody(server string, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "address_id", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomersIdAddressesAddressIdRequest calls the generic GetCustomersIdAddressesAddressId builder with application/json body
func NewGetCustomersIdAddressesAddressIdRequest(server string, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, body GetCustomersIdAddressesAddressIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomersIdAddressesAddressIdRequestWithBody(server, id, addressId, params, "application/json", bodyReader)
}

// NewGetCustomersIdAddressesAddressIdRequestWithBody generates requests for GetCustomersIdAddressesAddressId with any type of body
func NewGetCustomersIdAddressesAddressIdRequestWithBody(server string, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "address_id", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCustomersIdAddressesAddressIdRequest calls the generic PostCustomersIdAddressesAddressId builder with application/json body
func NewPostCustomersIdAddressesAddressIdRequest(server string, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, body PostCustomersIdAddressesAddressIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersIdAddressesAddressIdRequestWithBody(server, id, addressId, params, "application/json", bodyReader)
}

// NewPostCustomersIdAddressesAddressIdRequestWithBody generates requests for PostCustomersIdAddressesAddressId with any type of body
func NewPostCustomersIdAddressesAddressIdRequestWithBody(server string, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "address_id", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/customers/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDraftOrdersRequest calls the generic GetDraftOrders builder with application/json body
func NewGetDraftOrdersRequest(server string, params *GetDraftOrdersParams, body GetDraftOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDraftOrdersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetDraftOrdersRequestWithBody generates requests for GetDraftOrders with any type of body
func NewGetDraftOrdersRequestWithBody(server string, params *GetDraftOrdersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/draft-orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDraftOrdersRequest calls the generic PostDraftOrders builder with application/json body
func NewPostDraftOrdersRequest(server string, params *PostDraftOrdersParams, body PostDraftOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDraftOrdersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDraftOrdersRequestWithBody generates requests for PostDraftOrders with any type of body
func NewPostDraftOrdersRequestWithBody(server string, params *PostDraftOrdersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/draft-orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDraftOrdersIdRequest calls the generic GetDraftOrdersId builder with application/json body
func NewGetDraftOrdersIdRequest(server string, id string, params *GetDraftOrdersIdParams, body GetDraftOrdersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDraftOrdersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetDraftOrdersIdRequestWithBody generates requests for GetDraftOrdersId with any type of body
func NewGetDraftOrdersIdRequestWithBody(server string, id string, params *GetDraftOrdersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/draft-orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFulfillmentProvidersRequest calls the generic GetFulfillmentProviders builder with application/json body
func NewGetFulfillmentProvidersRequest(server string, params *GetFulfillmentProvidersParams, body GetFulfillmentProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFulfillmentProvidersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetFulfillmentProvidersRequestWithBody generates requests for GetFulfillmentProviders with any type of body
func NewGetFulfillmentProvidersRequestWithBody(server string, params *GetFulfillmentProvidersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillment-providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFulfillmentSetsIdRequest calls the generic DeleteFulfillmentSetsId builder with application/json body
func NewDeleteFulfillmentSetsIdRequest(server string, id string, params *DeleteFulfillmentSetsIdParams, body DeleteFulfillmentSetsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFulfillmentSetsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteFulfillmentSetsIdRequestWithBody generates requests for DeleteFulfillmentSetsId with any type of body
func NewDeleteFulfillmentSetsIdRequestWithBody(server string, id string, params *DeleteFulfillmentSetsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillment-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFulfillmentSetsIdServiceZonesRequest calls the generic PostFulfillmentSetsIdServiceZones builder with application/json body
func NewPostFulfillmentSetsIdServiceZonesRequest(server string, id string, params *PostFulfillmentSetsIdServiceZonesParams, body PostFulfillmentSetsIdServiceZonesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFulfillmentSetsIdServiceZonesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostFulfillmentSetsIdServiceZonesRequestWithBody generates requests for PostFulfillmentSetsIdServiceZones with any type of body
func NewPostFulfillmentSetsIdServiceZonesRequestWithBody(server string, id string, params *PostFulfillmentSetsIdServiceZonesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillment-sets/%s/service-zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequest calls the generic DeleteFulfillmentSetsIdServiceZonesZoneId builder with application/json body
func NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequest(server string, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, body DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(server, id, zoneId, params, "application/json", bodyReader)
}

// NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequestWithBody generates requests for DeleteFulfillmentSetsIdServiceZonesZoneId with any type of body
func NewDeleteFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(server string, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zone_id", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillment-sets/%s/service-zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFulfillmentSetsIdServiceZonesZoneIdRequest calls the generic GetFulfillmentSetsIdServiceZonesZoneId builder with application/json body
func NewGetFulfillmentSetsIdServiceZonesZoneIdRequest(server string, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, body GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(server, id, zoneId, params, "application/json", bodyReader)
}

// NewGetFulfillmentSetsIdServiceZonesZoneIdRequestWithBody generates requests for GetFulfillmentSetsIdServiceZonesZoneId with any type of body
func NewGetFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(server string, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zone_id", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillment-sets/%s/service-zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFulfillmentSetsIdServiceZonesZoneIdRequest calls the generic PostFulfillmentSetsIdServiceZonesZoneId builder with application/json body
func NewPostFulfillmentSetsIdServiceZonesZoneIdRequest(server string, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, body PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(server, id, zoneId, params, "application/json", bodyReader)
}

// NewPostFulfillmentSetsIdServiceZonesZoneIdRequestWithBody generates requests for PostFulfillmentSetsIdServiceZonesZoneId with any type of body
func NewPostFulfillmentSetsIdServiceZonesZoneIdRequestWithBody(server string, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zone_id", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillment-sets/%s/service-zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFulfillmentsRequest calls the generic PostFulfillments builder with application/json body
func NewPostFulfillmentsRequest(server string, params *PostFulfillmentsParams, body PostFulfillmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFulfillmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFulfillmentsRequestWithBody generates requests for PostFulfillments with any type of body
func NewPostFulfillmentsRequestWithBody(server string, params *PostFulfillmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFulfillmentsIdCancelRequest calls the generic PostFulfillmentsIdCancel builder with application/json body
func NewPostFulfillmentsIdCancelRequest(server string, id string, params *PostFulfillmentsIdCancelParams, body PostFulfillmentsIdCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFulfillmentsIdCancelRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostFulfillmentsIdCancelRequestWithBody generates requests for PostFulfillmentsIdCancel with any type of body
func NewPostFulfillmentsIdCancelRequestWithBody(server string, id string, params *PostFulfillmentsIdCancelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillments/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFulfillmentsIdShipmentRequest calls the generic PostFulfillmentsIdShipment builder with application/json body
func NewPostFulfillmentsIdShipmentRequest(server string, id string, params *PostFulfillmentsIdShipmentParams, body PostFulfillmentsIdShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFulfillmentsIdShipmentRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostFulfillmentsIdShipmentRequestWithBody generates requests for PostFulfillmentsIdShipment with any type of body
func NewPostFulfillmentsIdShipmentRequestWithBody(server string, id string, params *PostFulfillmentsIdShipmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/fulfillments/%s/shipment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInventoryItemsRequest calls the generic GetInventoryItems builder with application/json body
func NewGetInventoryItemsRequest(server string, params *GetInventoryItemsParams, body GetInventoryItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInventoryItemsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetInventoryItemsRequestWithBody generates requests for GetInventoryItems with any type of body
func NewGetInventoryItemsRequestWithBody(server string, params *GetInventoryItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInventoryItemsRequest calls the generic PostInventoryItems builder with application/json body
func NewPostInventoryItemsRequest(server string, params *PostInventoryItemsParams, body PostInventoryItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryItemsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInventoryItemsRequestWithBody generates requests for PostInventoryItems with any type of body
func NewPostInventoryItemsRequestWithBody(server string, params *PostInventoryItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInventoryItemsIdRequest calls the generic DeleteInventoryItemsId builder with application/json body
func NewDeleteInventoryItemsIdRequest(server string, id string, params *DeleteInventoryItemsIdParams, body DeleteInventoryItemsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteInventoryItemsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteInventoryItemsIdRequestWithBody generates requests for DeleteInventoryItemsId with any type of body
func NewDeleteInventoryItemsIdRequestWithBody(server string, id string, params *DeleteInventoryItemsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInventoryItemsIdRequest calls the generic GetInventoryItemsId builder with application/json body
func NewGetInventoryItemsIdRequest(server string, id string, params *GetInventoryItemsIdParams, body GetInventoryItemsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInventoryItemsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetInventoryItemsIdRequestWithBody generates requests for GetInventoryItemsId with any type of body
func NewGetInventoryItemsIdRequestWithBody(server string, id string, params *GetInventoryItemsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInventoryItemsIdRequest calls the generic PostInventoryItemsId builder with application/json body
func NewPostInventoryItemsIdRequest(server string, id string, params *PostInventoryItemsIdParams, body PostInventoryItemsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryItemsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostInventoryItemsIdRequestWithBody generates requests for PostInventoryItemsId with any type of body
func NewPostInventoryItemsIdRequestWithBody(server string, id string, params *PostInventoryItemsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInventoryItemsIdLocationLevelsRequest calls the generic GetInventoryItemsIdLocationLevels builder with application/json body
func NewGetInventoryItemsIdLocationLevelsRequest(server string, id string, params *GetInventoryItemsIdLocationLevelsParams, body GetInventoryItemsIdLocationLevelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInventoryItemsIdLocationLevelsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetInventoryItemsIdLocationLevelsRequestWithBody generates requests for GetInventoryItemsIdLocationLevels with any type of body
func NewGetInventoryItemsIdLocationLevelsRequestWithBody(server string, id string, params *GetInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s/location-levels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInventoryItemsIdLocationLevelsRequest calls the generic PostInventoryItemsIdLocationLevels builder with application/json body
func NewPostInventoryItemsIdLocationLevelsRequest(server string, id string, params *PostInventoryItemsIdLocationLevelsParams, body PostInventoryItemsIdLocationLevelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryItemsIdLocationLevelsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostInventoryItemsIdLocationLevelsRequestWithBody generates requests for PostInventoryItemsIdLocationLevels with any type of body
func NewPostInventoryItemsIdLocationLevelsRequestWithBody(server string, id string, params *PostInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s/location-levels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInventoryItemsIdLocationLevelsBatchRequest calls the generic PostInventoryItemsIdLocationLevelsBatch builder with application/json body
func NewPostInventoryItemsIdLocationLevelsBatchRequest(server string, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, body PostInventoryItemsIdLocationLevelsBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryItemsIdLocationLevelsBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostInventoryItemsIdLocationLevelsBatchRequestWithBody generates requests for PostInventoryItemsIdLocationLevelsBatch with any type of body
func NewPostInventoryItemsIdLocationLevelsBatchRequestWithBody(server string, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s/location-levels/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInventoryItemsIdLocationLevelsLocationIdRequest calls the generic DeleteInventoryItemsIdLocationLevelsLocationId builder with application/json body
func NewDeleteInventoryItemsIdLocationLevelsLocationIdRequest(server string, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, body DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteInventoryItemsIdLocationLevelsLocationIdRequestWithBody(server, id, locationId, params, "application/json", bodyReader)
}

// NewDeleteInventoryItemsIdLocationLevelsLocationIdRequestWithBody generates requests for DeleteInventoryItemsIdLocationLevelsLocationId with any type of body
func NewDeleteInventoryItemsIdLocationLevelsLocationIdRequestWithBody(server string, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s/location-levels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInventoryItemsIdLocationLevelsLocationIdRequest calls the generic PostInventoryItemsIdLocationLevelsLocationId builder with application/json body
func NewPostInventoryItemsIdLocationLevelsLocationIdRequest(server string, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, body PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryItemsIdLocationLevelsLocationIdRequestWithBody(server, id, locationId, params, "application/json", bodyReader)
}

// NewPostInventoryItemsIdLocationLevelsLocationIdRequestWithBody generates requests for PostInventoryItemsIdLocationLevelsLocationId with any type of body
func NewPostInventoryItemsIdLocationLevelsLocationIdRequestWithBody(server string, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/inventory-items/%s/location-levels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvitesRequest calls the generic GetInvites builder with application/json body
func NewGetInvitesRequest(server string, params *GetInvitesParams, body GetInvitesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInvitesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetInvitesRequestWithBody generates requests for GetInvites with any type of body
func NewGetInvitesRequestWithBody(server string, params *GetInvitesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/invites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInvitesRequest calls the generic PostInvites builder with application/json body
func NewPostInvitesRequest(server string, params *PostInvitesParams, body PostInvitesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvitesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInvitesRequestWithBody generates requests for PostInvites with any type of body
func NewPostInvitesRequestWithBody(server string, params *PostInvitesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/invites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInvitesAcceptRequest calls the generic PostInvitesAccept builder with application/json body
func NewPostInvitesAcceptRequest(server string, params *PostInvitesAcceptParams, body PostInvitesAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvitesAcceptRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInvitesAcceptRequestWithBody generates requests for PostInvitesAccept with any type of body
func NewPostInvitesAcceptRequestWithBody(server string, params *PostInvitesAcceptParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/invites/accept")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInvitesIdRequest calls the generic DeleteInvitesId builder with application/json body
func NewDeleteInvitesIdRequest(server string, id string, params *DeleteInvitesIdParams, body DeleteInvitesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteInvitesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteInvitesIdRequestWithBody generates requests for DeleteInvitesId with any type of body
func NewDeleteInvitesIdRequestWithBody(server string, id string, params *DeleteInvitesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvitesIdRequest calls the generic GetInvitesId builder with application/json body
func NewGetInvitesIdRequest(server string, id string, params *GetInvitesIdParams, body GetInvitesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInvitesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetInvitesIdRequestWithBody generates requests for GetInvitesId with any type of body
func NewGetInvitesIdRequestWithBody(server string, id string, params *GetInvitesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInvitesIdResendRequest calls the generic PostInvitesIdResend builder with application/json body
func NewPostInvitesIdResendRequest(server string, id string, params *PostInvitesIdResendParams, body PostInvitesIdResendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvitesIdResendRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostInvitesIdResendRequestWithBody generates requests for PostInvitesIdResend with any type of body
func NewPostInvitesIdResendRequestWithBody(server string, id string, params *PostInvitesIdResendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/invites/%s/resend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrdersRequest calls the generic GetOrders builder with application/json body
func NewGetOrdersRequest(server string, params *GetOrdersParams, body GetOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOrdersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetOrdersRequestWithBody generates requests for GetOrders with any type of body
func NewGetOrdersRequestWithBody(server string, params *GetOrdersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrdersIdRequest calls the generic GetOrdersId builder with application/json body
func NewGetOrdersIdRequest(server string, id string, params *GetOrdersIdParams, body GetOrdersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOrdersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetOrdersIdRequestWithBody generates requests for GetOrdersId with any type of body
func NewGetOrdersIdRequestWithBody(server string, id string, params *GetOrdersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaymentsRequest calls the generic GetPayments builder with application/json body
func NewGetPaymentsRequest(server string, params *GetPaymentsParams, body GetPaymentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPaymentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPaymentsRequestWithBody generates requests for GetPayments with any type of body
func NewGetPaymentsRequestWithBody(server string, params *GetPaymentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/payments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaymentsPaymentProvidersRequest calls the generic GetPaymentsPaymentProviders builder with application/json body
func NewGetPaymentsPaymentProvidersRequest(server string, params *GetPaymentsPaymentProvidersParams, body GetPaymentsPaymentProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPaymentsPaymentProvidersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPaymentsPaymentProvidersRequestWithBody generates requests for GetPaymentsPaymentProviders with any type of body
func NewGetPaymentsPaymentProvidersRequestWithBody(server string, params *GetPaymentsPaymentProvidersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/payments/payment-providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaymentsIdRequest calls the generic GetPaymentsId builder with application/json body
func NewGetPaymentsIdRequest(server string, id string, params *GetPaymentsIdParams, body GetPaymentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPaymentsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetPaymentsIdRequestWithBody generates requests for GetPaymentsId with any type of body
func NewGetPaymentsIdRequestWithBody(server string, id string, params *GetPaymentsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/payments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPaymentsIdCaptureRequest calls the generic PostPaymentsIdCapture builder with application/json body
func NewPostPaymentsIdCaptureRequest(server string, id string, params *PostPaymentsIdCaptureParams, body PostPaymentsIdCaptureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPaymentsIdCaptureRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPaymentsIdCaptureRequestWithBody generates requests for PostPaymentsIdCapture with any type of body
func NewPostPaymentsIdCaptureRequestWithBody(server string, id string, params *PostPaymentsIdCaptureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/payments/%s/capture", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPaymentsIdRefundRequest calls the generic PostPaymentsIdRefund builder with application/json body
func NewPostPaymentsIdRefundRequest(server string, id string, params *PostPaymentsIdRefundParams, body PostPaymentsIdRefundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPaymentsIdRefundRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPaymentsIdRefundRequestWithBody generates requests for PostPaymentsIdRefund with any type of body
func NewPostPaymentsIdRefundRequestWithBody(server string, id string, params *PostPaymentsIdRefundParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/payments/%s/refund", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPriceListsRequest calls the generic GetPriceLists builder with application/json body
func NewGetPriceListsRequest(server string, params *GetPriceListsParams, body GetPriceListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPriceListsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPriceListsRequestWithBody generates requests for GetPriceLists with any type of body
func NewGetPriceListsRequestWithBody(server string, params *GetPriceListsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPriceListsRequest calls the generic PostPriceLists builder with application/json body
func NewPostPriceListsRequest(server string, params *PostPriceListsParams, body PostPriceListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPriceListsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPriceListsRequestWithBody generates requests for PostPriceLists with any type of body
func NewPostPriceListsRequestWithBody(server string, params *PostPriceListsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePriceListsIdRequest calls the generic DeletePriceListsId builder with application/json body
func NewDeletePriceListsIdRequest(server string, id string, params *DeletePriceListsIdParams, body DeletePriceListsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePriceListsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeletePriceListsIdRequestWithBody generates requests for DeletePriceListsId with any type of body
func NewDeletePriceListsIdRequestWithBody(server string, id string, params *DeletePriceListsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPriceListsIdRequest calls the generic GetPriceListsId builder with application/json body
func NewGetPriceListsIdRequest(server string, id string, params *GetPriceListsIdParams, body GetPriceListsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPriceListsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetPriceListsIdRequestWithBody generates requests for GetPriceListsId with any type of body
func NewGetPriceListsIdRequestWithBody(server string, id string, params *GetPriceListsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPriceListsIdRequest calls the generic PostPriceListsId builder with application/json body
func NewPostPriceListsIdRequest(server string, id string, params *PostPriceListsIdParams, body PostPriceListsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPriceListsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPriceListsIdRequestWithBody generates requests for PostPriceListsId with any type of body
func NewPostPriceListsIdRequestWithBody(server string, id string, params *PostPriceListsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPriceListsIdPricesBatchRequest calls the generic PostPriceListsIdPricesBatch builder with application/json body
func NewPostPriceListsIdPricesBatchRequest(server string, id string, params *PostPriceListsIdPricesBatchParams, body PostPriceListsIdPricesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPriceListsIdPricesBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPriceListsIdPricesBatchRequestWithBody generates requests for PostPriceListsIdPricesBatch with any type of body
func NewPostPriceListsIdPricesBatchRequestWithBody(server string, id string, params *PostPriceListsIdPricesBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists/%s/prices/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPriceListsIdProductsRequest calls the generic PostPriceListsIdProducts builder with application/json body
func NewPostPriceListsIdProductsRequest(server string, id string, params *PostPriceListsIdProductsParams, body PostPriceListsIdProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPriceListsIdProductsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPriceListsIdProductsRequestWithBody generates requests for PostPriceListsIdProducts with any type of body
func NewPostPriceListsIdProductsRequestWithBody(server string, id string, params *PostPriceListsIdProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/price-lists/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPricingRuleTypesRequest calls the generic GetPricingRuleTypes builder with application/json body
func NewGetPricingRuleTypesRequest(server string, params *GetPricingRuleTypesParams, body GetPricingRuleTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPricingRuleTypesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPricingRuleTypesRequestWithBody generates requests for GetPricingRuleTypes with any type of body
func NewGetPricingRuleTypesRequestWithBody(server string, params *GetPricingRuleTypesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/pricing/rule-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPricingRuleTypesRequest calls the generic PostPricingRuleTypes builder with application/json body
func NewPostPricingRuleTypesRequest(server string, params *PostPricingRuleTypesParams, body PostPricingRuleTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPricingRuleTypesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPricingRuleTypesRequestWithBody generates requests for PostPricingRuleTypes with any type of body
func NewPostPricingRuleTypesRequestWithBody(server string, params *PostPricingRuleTypesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/pricing/rule-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePricingRuleTypesIdRequest calls the generic DeletePricingRuleTypesId builder with application/json body
func NewDeletePricingRuleTypesIdRequest(server string, id string, params *DeletePricingRuleTypesIdParams, body DeletePricingRuleTypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePricingRuleTypesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeletePricingRuleTypesIdRequestWithBody generates requests for DeletePricingRuleTypesId with any type of body
func NewDeletePricingRuleTypesIdRequestWithBody(server string, id string, params *DeletePricingRuleTypesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/pricing/rule-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPricingRuleTypesIdRequest calls the generic GetPricingRuleTypesId builder with application/json body
func NewGetPricingRuleTypesIdRequest(server string, id string, params *GetPricingRuleTypesIdParams, body GetPricingRuleTypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPricingRuleTypesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetPricingRuleTypesIdRequestWithBody generates requests for GetPricingRuleTypesId with any type of body
func NewGetPricingRuleTypesIdRequestWithBody(server string, id string, params *GetPricingRuleTypesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/pricing/rule-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPricingRuleTypesIdRequest calls the generic PostPricingRuleTypesId builder with application/json body
func NewPostPricingRuleTypesIdRequest(server string, id string, params *PostPricingRuleTypesIdParams, body PostPricingRuleTypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPricingRuleTypesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPricingRuleTypesIdRequestWithBody generates requests for PostPricingRuleTypesId with any type of body
func NewPostPricingRuleTypesIdRequestWithBody(server string, id string, params *PostPricingRuleTypesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/pricing/rule-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductCategoriesRequest calls the generic GetProductCategories builder with application/json body
func NewGetProductCategoriesRequest(server string, params *GetProductCategoriesParams, body GetProductCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductCategoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetProductCategoriesRequestWithBody generates requests for GetProductCategories with any type of body
func NewGetProductCategoriesRequestWithBody(server string, params *GetProductCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductCategoriesRequest calls the generic PostProductCategories builder with application/json body
func NewPostProductCategoriesRequest(server string, params *PostProductCategoriesParams, body PostProductCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductCategoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProductCategoriesRequestWithBody generates requests for PostProductCategories with any type of body
func NewPostProductCategoriesRequestWithBody(server string, params *PostProductCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductCategoriesIdRequest calls the generic GetProductCategoriesId builder with application/json body
func NewGetProductCategoriesIdRequest(server string, id string, params *GetProductCategoriesIdParams, body GetProductCategoriesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductCategoriesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetProductCategoriesIdRequestWithBody generates requests for GetProductCategoriesId with any type of body
func NewGetProductCategoriesIdRequestWithBody(server string, id string, params *GetProductCategoriesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductCategoriesIdRequest calls the generic PostProductCategoriesId builder with application/json body
func NewPostProductCategoriesIdRequest(server string, id string, params *PostProductCategoriesIdParams, body PostProductCategoriesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductCategoriesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductCategoriesIdRequestWithBody generates requests for PostProductCategoriesId with any type of body
func NewPostProductCategoriesIdRequestWithBody(server string, id string, params *PostProductCategoriesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductCategoriesIdProductsRequest calls the generic PostProductCategoriesIdProducts builder with application/json body
func NewPostProductCategoriesIdProductsRequest(server string, id string, params *PostProductCategoriesIdProductsParams, body PostProductCategoriesIdProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductCategoriesIdProductsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductCategoriesIdProductsRequestWithBody generates requests for PostProductCategoriesIdProducts with any type of body
func NewPostProductCategoriesIdProductsRequestWithBody(server string, id string, params *PostProductCategoriesIdProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-categories/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductTypesRequest calls the generic GetProductTypes builder with application/json body
func NewGetProductTypesRequest(server string, params *GetProductTypesParams, body GetProductTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductTypesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetProductTypesRequestWithBody generates requests for GetProductTypes with any type of body
func NewGetProductTypesRequestWithBody(server string, params *GetProductTypesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductTypesRequest calls the generic PostProductTypes builder with application/json body
func NewPostProductTypesRequest(server string, params *PostProductTypesParams, body PostProductTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductTypesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProductTypesRequestWithBody generates requests for PostProductTypes with any type of body
func NewPostProductTypesRequestWithBody(server string, params *PostProductTypesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductTypesIdRequest calls the generic DeleteProductTypesId builder with application/json body
func NewDeleteProductTypesIdRequest(server string, id string, params *DeleteProductTypesIdParams, body DeleteProductTypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductTypesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteProductTypesIdRequestWithBody generates requests for DeleteProductTypesId with any type of body
func NewDeleteProductTypesIdRequestWithBody(server string, id string, params *DeleteProductTypesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductTypesIdRequest calls the generic GetProductTypesId builder with application/json body
func NewGetProductTypesIdRequest(server string, id string, params *GetProductTypesIdParams, body GetProductTypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductTypesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetProductTypesIdRequestWithBody generates requests for GetProductTypesId with any type of body
func NewGetProductTypesIdRequestWithBody(server string, id string, params *GetProductTypesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductTypesIdRequest calls the generic PostProductTypesId builder with application/json body
func NewPostProductTypesIdRequest(server string, id string, params *PostProductTypesIdParams, body PostProductTypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductTypesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductTypesIdRequestWithBody generates requests for PostProductTypesId with any type of body
func NewPostProductTypesIdRequestWithBody(server string, id string, params *PostProductTypesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/product-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsRequest calls the generic GetProducts builder with application/json body
func NewGetProductsRequest(server string, params *GetProductsParams, body GetProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetProductsRequestWithBody generates requests for GetProducts with any type of body
func NewGetProductsRequestWithBody(server string, params *GetProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsRequest calls the generic PostProducts builder with application/json body
func NewPostProductsRequest(server string, params *PostProductsParams, body PostProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProductsRequestWithBody generates requests for PostProducts with any type of body
func NewPostProductsRequestWithBody(server string, params *PostProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsBatchRequest calls the generic PostProductsBatch builder with application/json body
func NewPostProductsBatchRequest(server string, params *PostProductsBatchParams, body PostProductsBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsBatchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProductsBatchRequestWithBody generates requests for PostProductsBatch with any type of body
func NewPostProductsBatchRequestWithBody(server string, params *PostProductsBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductsIdRequest calls the generic DeleteProductsId builder with application/json body
func NewDeleteProductsIdRequest(server string, id string, params *DeleteProductsIdParams, body DeleteProductsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteProductsIdRequestWithBody generates requests for DeleteProductsId with any type of body
func NewDeleteProductsIdRequestWithBody(server string, id string, params *DeleteProductsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsIdRequest calls the generic GetProductsId builder with application/json body
func NewGetProductsIdRequest(server string, id string, params *GetProductsIdParams, body GetProductsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetProductsIdRequestWithBody generates requests for GetProductsId with any type of body
func NewGetProductsIdRequestWithBody(server string, id string, params *GetProductsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsIdRequest calls the generic PostProductsId builder with application/json body
func NewPostProductsIdRequest(server string, id string, params *PostProductsIdParams, body PostProductsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductsIdRequestWithBody generates requests for PostProductsId with any type of body
func NewPostProductsIdRequestWithBody(server string, id string, params *PostProductsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsIdOptionsRequest calls the generic GetProductsIdOptions builder with application/json body
func NewGetProductsIdOptionsRequest(server string, id string, params *GetProductsIdOptionsParams, body GetProductsIdOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsIdOptionsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetProductsIdOptionsRequestWithBody generates requests for GetProductsIdOptions with any type of body
func NewGetProductsIdOptionsRequestWithBody(server string, id string, params *GetProductsIdOptionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsIdOptionsRequest calls the generic PostProductsIdOptions builder with application/json body
func NewPostProductsIdOptionsRequest(server string, id string, params *PostProductsIdOptionsParams, body PostProductsIdOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsIdOptionsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductsIdOptionsRequestWithBody generates requests for PostProductsIdOptions with any type of body
func NewPostProductsIdOptionsRequestWithBody(server string, id string, params *PostProductsIdOptionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductsIdOptionsOptionIdRequest calls the generic DeleteProductsIdOptionsOptionId builder with application/json body
func NewDeleteProductsIdOptionsOptionIdRequest(server string, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, body DeleteProductsIdOptionsOptionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductsIdOptionsOptionIdRequestWithBody(server, id, optionId, params, "application/json", bodyReader)
}

// NewDeleteProductsIdOptionsOptionIdRequestWithBody generates requests for DeleteProductsIdOptionsOptionId with any type of body
func NewDeleteProductsIdOptionsOptionIdRequestWithBody(server string, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "option_id", runtime.ParamLocationPath, optionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/options/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsIdOptionsOptionIdRequest calls the generic GetProductsIdOptionsOptionId builder with application/json body
func NewGetProductsIdOptionsOptionIdRequest(server string, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, body GetProductsIdOptionsOptionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsIdOptionsOptionIdRequestWithBody(server, id, optionId, params, "application/json", bodyReader)
}

// NewGetProductsIdOptionsOptionIdRequestWithBody generates requests for GetProductsIdOptionsOptionId with any type of body
func NewGetProductsIdOptionsOptionIdRequestWithBody(server string, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "option_id", runtime.ParamLocationPath, optionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/options/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsIdOptionsOptionIdRequest calls the generic PostProductsIdOptionsOptionId builder with application/json body
func NewPostProductsIdOptionsOptionIdRequest(server string, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, body PostProductsIdOptionsOptionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsIdOptionsOptionIdRequestWithBody(server, id, optionId, params, "application/json", bodyReader)
}

// NewPostProductsIdOptionsOptionIdRequestWithBody generates requests for PostProductsIdOptionsOptionId with any type of body
func NewPostProductsIdOptionsOptionIdRequestWithBody(server string, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "option_id", runtime.ParamLocationPath, optionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/options/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsIdVariantsRequest calls the generic GetProductsIdVariants builder with application/json body
func NewGetProductsIdVariantsRequest(server string, id string, params *GetProductsIdVariantsParams, body GetProductsIdVariantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsIdVariantsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetProductsIdVariantsRequestWithBody generates requests for GetProductsIdVariants with any type of body
func NewGetProductsIdVariantsRequestWithBody(server string, id string, params *GetProductsIdVariantsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/variants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsIdVariantsRequest calls the generic PostProductsIdVariants builder with application/json body
func NewPostProductsIdVariantsRequest(server string, id string, params *PostProductsIdVariantsParams, body PostProductsIdVariantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsIdVariantsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductsIdVariantsRequestWithBody generates requests for PostProductsIdVariants with any type of body
func NewPostProductsIdVariantsRequestWithBody(server string, id string, params *PostProductsIdVariantsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/variants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsIdVariantsBatchRequest calls the generic PostProductsIdVariantsBatch builder with application/json body
func NewPostProductsIdVariantsBatchRequest(server string, id string, params *PostProductsIdVariantsBatchParams, body PostProductsIdVariantsBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsIdVariantsBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostProductsIdVariantsBatchRequestWithBody generates requests for PostProductsIdVariantsBatch with any type of body
func NewPostProductsIdVariantsBatchRequestWithBody(server string, id string, params *PostProductsIdVariantsBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/variants/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductsIdVariantsVariantIdRequest calls the generic DeleteProductsIdVariantsVariantId builder with application/json body
func NewDeleteProductsIdVariantsVariantIdRequest(server string, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, body DeleteProductsIdVariantsVariantIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductsIdVariantsVariantIdRequestWithBody(server, id, variantId, params, "application/json", bodyReader)
}

// NewDeleteProductsIdVariantsVariantIdRequestWithBody generates requests for DeleteProductsIdVariantsVariantId with any type of body
func NewDeleteProductsIdVariantsVariantIdRequestWithBody(server string, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variant_id", runtime.ParamLocationPath, variantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/variants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsIdVariantsVariantIdRequest calls the generic GetProductsIdVariantsVariantId builder with application/json body
func NewGetProductsIdVariantsVariantIdRequest(server string, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, body GetProductsIdVariantsVariantIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsIdVariantsVariantIdRequestWithBody(server, id, variantId, params, "application/json", bodyReader)
}

// NewGetProductsIdVariantsVariantIdRequestWithBody generates requests for GetProductsIdVariantsVariantId with any type of body
func NewGetProductsIdVariantsVariantIdRequestWithBody(server string, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variant_id", runtime.ParamLocationPath, variantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/variants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsIdVariantsVariantIdRequest calls the generic PostProductsIdVariantsVariantId builder with application/json body
func NewPostProductsIdVariantsVariantIdRequest(server string, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, body PostProductsIdVariantsVariantIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsIdVariantsVariantIdRequestWithBody(server, id, variantId, params, "application/json", bodyReader)
}

// NewPostProductsIdVariantsVariantIdRequestWithBody generates requests for PostProductsIdVariantsVariantId with any type of body
func NewPostProductsIdVariantsVariantIdRequestWithBody(server string, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variant_id", runtime.ParamLocationPath, variantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/products/%s/variants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromotionsRequest calls the generic GetPromotions builder with application/json body
func NewGetPromotionsRequest(server string, params *GetPromotionsParams, body GetPromotionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPromotionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPromotionsRequestWithBody generates requests for GetPromotions with any type of body
func NewGetPromotionsRequestWithBody(server string, params *GetPromotionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPromotionsRequest calls the generic PostPromotions builder with application/json body
func NewPostPromotionsRequest(server string, params *PostPromotionsParams, body PostPromotionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPromotionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPromotionsRequestWithBody generates requests for PostPromotions with any type of body
func NewPostPromotionsRequestWithBody(server string, params *PostPromotionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromotionsRuleAttributeOptionsRuleTypeRequest calls the generic GetPromotionsRuleAttributeOptionsRuleType builder with application/json body
func NewGetPromotionsRuleAttributeOptionsRuleTypeRequest(server string, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, body GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPromotionsRuleAttributeOptionsRuleTypeRequestWithBody(server, ruleType, params, "application/json", bodyReader)
}

// NewGetPromotionsRuleAttributeOptionsRuleTypeRequestWithBody generates requests for GetPromotionsRuleAttributeOptionsRuleType with any type of body
func NewGetPromotionsRuleAttributeOptionsRuleTypeRequestWithBody(server string, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_type", runtime.ParamLocationPath, ruleType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/rule-attribute-options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromotionsRuleOperatorOptionsRequest calls the generic GetPromotionsRuleOperatorOptions builder with application/json body
func NewGetPromotionsRuleOperatorOptionsRequest(server string, params *GetPromotionsRuleOperatorOptionsParams, body GetPromotionsRuleOperatorOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPromotionsRuleOperatorOptionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPromotionsRuleOperatorOptionsRequestWithBody generates requests for GetPromotionsRuleOperatorOptions with any type of body
func NewGetPromotionsRuleOperatorOptionsRequestWithBody(server string, params *GetPromotionsRuleOperatorOptionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/rule-operator-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequest calls the generic GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId builder with application/json body
func NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequest(server string, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, body GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequestWithBody(server, ruleType, ruleAttributeId, params, "application/json", bodyReader)
}

// NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequestWithBody generates requests for GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId with any type of body
func NewGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdRequestWithBody(server string, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_type", runtime.ParamLocationPath, ruleType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_attribute_id", runtime.ParamLocationPath, ruleAttributeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/rule-value-options/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePromotionsIdRequest calls the generic DeletePromotionsId builder with application/json body
func NewDeletePromotionsIdRequest(server string, id string, params *DeletePromotionsIdParams, body DeletePromotionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePromotionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeletePromotionsIdRequestWithBody generates requests for DeletePromotionsId with any type of body
func NewDeletePromotionsIdRequestWithBody(server string, id string, params *DeletePromotionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromotionsIdRequest calls the generic GetPromotionsId builder with application/json body
func NewGetPromotionsIdRequest(server string, id string, params *GetPromotionsIdParams, body GetPromotionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPromotionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetPromotionsIdRequestWithBody generates requests for GetPromotionsId with any type of body
func NewGetPromotionsIdRequestWithBody(server string, id string, params *GetPromotionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPromotionsIdRequest calls the generic PostPromotionsId builder with application/json body
func NewPostPromotionsIdRequest(server string, id string, params *PostPromotionsIdParams, body PostPromotionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPromotionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPromotionsIdRequestWithBody generates requests for PostPromotionsId with any type of body
func NewPostPromotionsIdRequestWithBody(server string, id string, params *PostPromotionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPromotionsIdBuyRulesBatchRequest calls the generic PostPromotionsIdBuyRulesBatch builder with application/json body
func NewPostPromotionsIdBuyRulesBatchRequest(server string, id string, params *PostPromotionsIdBuyRulesBatchParams, body PostPromotionsIdBuyRulesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPromotionsIdBuyRulesBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPromotionsIdBuyRulesBatchRequestWithBody generates requests for PostPromotionsIdBuyRulesBatch with any type of body
func NewPostPromotionsIdBuyRulesBatchRequestWithBody(server string, id string, params *PostPromotionsIdBuyRulesBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s/buy-rules/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPromotionsIdRulesBatchRequest calls the generic PostPromotionsIdRulesBatch builder with application/json body
func NewPostPromotionsIdRulesBatchRequest(server string, id string, params *PostPromotionsIdRulesBatchParams, body PostPromotionsIdRulesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPromotionsIdRulesBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPromotionsIdRulesBatchRequestWithBody generates requests for PostPromotionsIdRulesBatch with any type of body
func NewPostPromotionsIdRulesBatchRequestWithBody(server string, id string, params *PostPromotionsIdRulesBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s/rules/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPromotionsIdTargetRulesBatchRequest calls the generic PostPromotionsIdTargetRulesBatch builder with application/json body
func NewPostPromotionsIdTargetRulesBatchRequest(server string, id string, params *PostPromotionsIdTargetRulesBatchParams, body PostPromotionsIdTargetRulesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPromotionsIdTargetRulesBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostPromotionsIdTargetRulesBatchRequestWithBody generates requests for PostPromotionsIdTargetRulesBatch with any type of body
func NewPostPromotionsIdTargetRulesBatchRequestWithBody(server string, id string, params *PostPromotionsIdTargetRulesBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s/target-rules/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromotionsIdRuleTypeRequest calls the generic GetPromotionsIdRuleType builder with application/json body
func NewGetPromotionsIdRuleTypeRequest(server string, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, body GetPromotionsIdRuleTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPromotionsIdRuleTypeRequestWithBody(server, id, ruleType, params, "application/json", bodyReader)
}

// NewGetPromotionsIdRuleTypeRequestWithBody generates requests for GetPromotionsIdRuleType with any type of body
func NewGetPromotionsIdRuleTypeRequestWithBody(server string, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_type", runtime.ParamLocationPath, ruleType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/promotions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRegionsRequest calls the generic GetRegions builder with application/json body
func NewGetRegionsRequest(server string, params *GetRegionsParams, body GetRegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRegionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetRegionsRequestWithBody generates requests for GetRegions with any type of body
func NewGetRegionsRequestWithBody(server string, params *GetRegionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRegionsRequest calls the generic PostRegions builder with application/json body
func NewPostRegionsRequest(server string, params *PostRegionsParams, body PostRegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRegionsRequestWithBody generates requests for PostRegions with any type of body
func NewPostRegionsRequestWithBody(server string, params *PostRegionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRegionsIdRequest calls the generic DeleteRegionsId builder with application/json body
func NewDeleteRegionsIdRequest(server string, id string, params *DeleteRegionsIdParams, body DeleteRegionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRegionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteRegionsIdRequestWithBody generates requests for DeleteRegionsId with any type of body
func NewDeleteRegionsIdRequestWithBody(server string, id string, params *DeleteRegionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRegionsIdRequest calls the generic GetRegionsId builder with application/json body
func NewGetRegionsIdRequest(server string, id string, params *GetRegionsIdParams, body GetRegionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRegionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetRegionsIdRequestWithBody generates requests for GetRegionsId with any type of body
func NewGetRegionsIdRequestWithBody(server string, id string, params *GetRegionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRegionsIdRequest calls the generic PostRegionsId builder with application/json body
func NewPostRegionsIdRequest(server string, id string, params *PostRegionsIdParams, body PostRegionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostRegionsIdRequestWithBody generates requests for PostRegionsId with any type of body
func NewPostRegionsIdRequestWithBody(server string, id string, params *PostRegionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReservationsRequest calls the generic GetReservations builder with application/json body
func NewGetReservationsRequest(server string, params *GetReservationsParams, body GetReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReservationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetReservationsRequestWithBody generates requests for GetReservations with any type of body
func NewGetReservationsRequestWithBody(server string, params *GetReservationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/reservations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReservationsRequest calls the generic PostReservations builder with application/json body
func NewPostReservationsRequest(server string, params *PostReservationsParams, body PostReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReservationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostReservationsRequestWithBody generates requests for PostReservations with any type of body
func NewPostReservationsRequestWithBody(server string, params *PostReservationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/reservations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReservationsIdRequest calls the generic DeleteReservationsId builder with application/json body
func NewDeleteReservationsIdRequest(server string, id string, params *DeleteReservationsIdParams, body DeleteReservationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteReservationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteReservationsIdRequestWithBody generates requests for DeleteReservationsId with any type of body
func NewDeleteReservationsIdRequestWithBody(server string, id string, params *DeleteReservationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReservationsIdRequest calls the generic GetReservationsId builder with application/json body
func NewGetReservationsIdRequest(server string, id string, params *GetReservationsIdParams, body GetReservationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReservationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetReservationsIdRequestWithBody generates requests for GetReservationsId with any type of body
func NewGetReservationsIdRequestWithBody(server string, id string, params *GetReservationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReservationsIdRequest calls the generic PostReservationsId builder with application/json body
func NewPostReservationsIdRequest(server string, id string, params *PostReservationsIdParams, body PostReservationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReservationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostReservationsIdRequestWithBody generates requests for PostReservationsId with any type of body
func NewPostReservationsIdRequestWithBody(server string, id string, params *PostReservationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalesChannelsRequest calls the generic GetSalesChannels builder with application/json body
func NewGetSalesChannelsRequest(server string, params *GetSalesChannelsParams, body GetSalesChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSalesChannelsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetSalesChannelsRequestWithBody generates requests for GetSalesChannels with any type of body
func NewGetSalesChannelsRequestWithBody(server string, params *GetSalesChannelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sales-channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSalesChannelsRequest calls the generic PostSalesChannels builder with application/json body
func NewPostSalesChannelsRequest(server string, params *PostSalesChannelsParams, body PostSalesChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSalesChannelsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSalesChannelsRequestWithBody generates requests for PostSalesChannels with any type of body
func NewPostSalesChannelsRequestWithBody(server string, params *PostSalesChannelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sales-channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSalesChannelsIdRequest calls the generic DeleteSalesChannelsId builder with application/json body
func NewDeleteSalesChannelsIdRequest(server string, id string, params *DeleteSalesChannelsIdParams, body DeleteSalesChannelsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSalesChannelsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteSalesChannelsIdRequestWithBody generates requests for DeleteSalesChannelsId with any type of body
func NewDeleteSalesChannelsIdRequestWithBody(server string, id string, params *DeleteSalesChannelsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sales-channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalesChannelsIdRequest calls the generic GetSalesChannelsId builder with application/json body
func NewGetSalesChannelsIdRequest(server string, id string, params *GetSalesChannelsIdParams, body GetSalesChannelsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSalesChannelsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetSalesChannelsIdRequestWithBody generates requests for GetSalesChannelsId with any type of body
func NewGetSalesChannelsIdRequestWithBody(server string, id string, params *GetSalesChannelsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sales-channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSalesChannelsIdRequest calls the generic PostSalesChannelsId builder with application/json body
func NewPostSalesChannelsIdRequest(server string, id string, params *PostSalesChannelsIdParams, body PostSalesChannelsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSalesChannelsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostSalesChannelsIdRequestWithBody generates requests for PostSalesChannelsId with any type of body
func NewPostSalesChannelsIdRequestWithBody(server string, id string, params *PostSalesChannelsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sales-channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSalesChannelsIdProductsRequest calls the generic PostSalesChannelsIdProducts builder with application/json body
func NewPostSalesChannelsIdProductsRequest(server string, id string, params *PostSalesChannelsIdProductsParams, body PostSalesChannelsIdProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSalesChannelsIdProductsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostSalesChannelsIdProductsRequestWithBody generates requests for PostSalesChannelsIdProducts with any type of body
func NewPostSalesChannelsIdProductsRequestWithBody(server string, id string, params *PostSalesChannelsIdProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sales-channels/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShippingOptionsRequest calls the generic GetShippingOptions builder with application/json body
func NewGetShippingOptionsRequest(server string, params *GetShippingOptionsParams, body GetShippingOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetShippingOptionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetShippingOptionsRequestWithBody generates requests for GetShippingOptions with any type of body
func NewGetShippingOptionsRequestWithBody(server string, params *GetShippingOptionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostShippingOptionsRequest calls the generic PostShippingOptions builder with application/json body
func NewPostShippingOptionsRequest(server string, params *PostShippingOptionsParams, body PostShippingOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShippingOptionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostShippingOptionsRequestWithBody generates requests for PostShippingOptions with any type of body
func NewPostShippingOptionsRequestWithBody(server string, params *PostShippingOptionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShippingOptionsIdRequest calls the generic DeleteShippingOptionsId builder with application/json body
func NewDeleteShippingOptionsIdRequest(server string, id string, params *DeleteShippingOptionsIdParams, body DeleteShippingOptionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteShippingOptionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteShippingOptionsIdRequestWithBody generates requests for DeleteShippingOptionsId with any type of body
func NewDeleteShippingOptionsIdRequestWithBody(server string, id string, params *DeleteShippingOptionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostShippingOptionsIdRequest calls the generic PostShippingOptionsId builder with application/json body
func NewPostShippingOptionsIdRequest(server string, id string, params *PostShippingOptionsIdParams, body PostShippingOptionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShippingOptionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostShippingOptionsIdRequestWithBody generates requests for PostShippingOptionsId with any type of body
func NewPostShippingOptionsIdRequestWithBody(server string, id string, params *PostShippingOptionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostShippingOptionsIdRulesBatchRequest calls the generic PostShippingOptionsIdRulesBatch builder with application/json body
func NewPostShippingOptionsIdRulesBatchRequest(server string, id string, params *PostShippingOptionsIdRulesBatchParams, body PostShippingOptionsIdRulesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShippingOptionsIdRulesBatchRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostShippingOptionsIdRulesBatchRequestWithBody generates requests for PostShippingOptionsIdRulesBatch with any type of body
func NewPostShippingOptionsIdRulesBatchRequestWithBody(server string, id string, params *PostShippingOptionsIdRulesBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-options/%s/rules/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShippingProfilesRequest calls the generic GetShippingProfiles builder with application/json body
func NewGetShippingProfilesRequest(server string, params *GetShippingProfilesParams, body GetShippingProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetShippingProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetShippingProfilesRequestWithBody generates requests for GetShippingProfiles with any type of body
func NewGetShippingProfilesRequestWithBody(server string, params *GetShippingProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostShippingProfilesRequest calls the generic PostShippingProfiles builder with application/json body
func NewPostShippingProfilesRequest(server string, params *PostShippingProfilesParams, body PostShippingProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShippingProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostShippingProfilesRequestWithBody generates requests for PostShippingProfiles with any type of body
func NewPostShippingProfilesRequestWithBody(server string, params *PostShippingProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShippingProfilesIdRequest calls the generic DeleteShippingProfilesId builder with application/json body
func NewDeleteShippingProfilesIdRequest(server string, id string, params *DeleteShippingProfilesIdParams, body DeleteShippingProfilesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteShippingProfilesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteShippingProfilesIdRequestWithBody generates requests for DeleteShippingProfilesId with any type of body
func NewDeleteShippingProfilesIdRequestWithBody(server string, id string, params *DeleteShippingProfilesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShippingProfilesIdRequest calls the generic GetShippingProfilesId builder with application/json body
func NewGetShippingProfilesIdRequest(server string, id string, params *GetShippingProfilesIdParams, body GetShippingProfilesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetShippingProfilesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetShippingProfilesIdRequestWithBody generates requests for GetShippingProfilesId with any type of body
func NewGetShippingProfilesIdRequestWithBody(server string, id string, params *GetShippingProfilesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/shipping-profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStockLocationsRequest calls the generic GetStockLocations builder with application/json body
func NewGetStockLocationsRequest(server string, params *GetStockLocationsParams, body GetStockLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStockLocationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetStockLocationsRequestWithBody generates requests for GetStockLocations with any type of body
func NewGetStockLocationsRequestWithBody(server string, params *GetStockLocationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStockLocationsRequest calls the generic PostStockLocations builder with application/json body
func NewPostStockLocationsRequest(server string, params *PostStockLocationsParams, body PostStockLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStockLocationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostStockLocationsRequestWithBody generates requests for PostStockLocations with any type of body
func NewPostStockLocationsRequestWithBody(server string, params *PostStockLocationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStockLocationsIdRequest calls the generic DeleteStockLocationsId builder with application/json body
func NewDeleteStockLocationsIdRequest(server string, id string, params *DeleteStockLocationsIdParams, body DeleteStockLocationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteStockLocationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteStockLocationsIdRequestWithBody generates requests for DeleteStockLocationsId with any type of body
func NewDeleteStockLocationsIdRequestWithBody(server string, id string, params *DeleteStockLocationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStockLocationsIdRequest calls the generic GetStockLocationsId builder with application/json body
func NewGetStockLocationsIdRequest(server string, id string, params *GetStockLocationsIdParams, body GetStockLocationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStockLocationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetStockLocationsIdRequestWithBody generates requests for GetStockLocationsId with any type of body
func NewGetStockLocationsIdRequestWithBody(server string, id string, params *GetStockLocationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStockLocationsIdRequest calls the generic PostStockLocationsId builder with application/json body
func NewPostStockLocationsIdRequest(server string, id string, params *PostStockLocationsIdParams, body PostStockLocationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStockLocationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostStockLocationsIdRequestWithBody generates requests for PostStockLocationsId with any type of body
func NewPostStockLocationsIdRequestWithBody(server string, id string, params *PostStockLocationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStockLocationsIdFulfillmentSetsRequest calls the generic PostStockLocationsIdFulfillmentSets builder with application/json body
func NewPostStockLocationsIdFulfillmentSetsRequest(server string, id string, params *PostStockLocationsIdFulfillmentSetsParams, body PostStockLocationsIdFulfillmentSetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStockLocationsIdFulfillmentSetsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostStockLocationsIdFulfillmentSetsRequestWithBody generates requests for PostStockLocationsIdFulfillmentSets with any type of body
func NewPostStockLocationsIdFulfillmentSetsRequestWithBody(server string, id string, params *PostStockLocationsIdFulfillmentSetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations/%s/fulfillment-sets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStockLocationsIdSalesChannelsRequest calls the generic PostStockLocationsIdSalesChannels builder with application/json body
func NewPostStockLocationsIdSalesChannelsRequest(server string, id string, params *PostStockLocationsIdSalesChannelsParams, body PostStockLocationsIdSalesChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStockLocationsIdSalesChannelsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostStockLocationsIdSalesChannelsRequestWithBody generates requests for PostStockLocationsIdSalesChannels with any type of body
func NewPostStockLocationsIdSalesChannelsRequestWithBody(server string, id string, params *PostStockLocationsIdSalesChannelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stock-locations/%s/sales-channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStoresRequest calls the generic GetStores builder with application/json body
func NewGetStoresRequest(server string, params *GetStoresParams, body GetStoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStoresRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetStoresRequestWithBody generates requests for GetStores with any type of body
func NewGetStoresRequestWithBody(server string, params *GetStoresParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStoresIdRequest calls the generic GetStoresId builder with application/json body
func NewGetStoresIdRequest(server string, id string, params *GetStoresIdParams, body GetStoresIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStoresIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetStoresIdRequestWithBody generates requests for GetStoresId with any type of body
func NewGetStoresIdRequestWithBody(server string, id string, params *GetStoresIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStoresIdRequest calls the generic PostStoresId builder with application/json body
func NewPostStoresIdRequest(server string, id string, params *PostStoresIdParams, body PostStoresIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStoresIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostStoresIdRequestWithBody generates requests for PostStoresId with any type of body
func NewPostStoresIdRequestWithBody(server string, id string, params *PostStoresIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxRatesRequest calls the generic GetTaxRates builder with application/json body
func NewGetTaxRatesRequest(server string, params *GetTaxRatesParams, body GetTaxRatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTaxRatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetTaxRatesRequestWithBody generates requests for GetTaxRates with any type of body
func NewGetTaxRatesRequestWithBody(server string, params *GetTaxRatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTaxRatesRequest calls the generic PostTaxRates builder with application/json body
func NewPostTaxRatesRequest(server string, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxRatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTaxRatesRequestWithBody generates requests for PostTaxRates with any type of body
func NewPostTaxRatesRequestWithBody(server string, params *PostTaxRatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxRatesIdRequest calls the generic DeleteTaxRatesId builder with application/json body
func NewDeleteTaxRatesIdRequest(server string, id string, params *DeleteTaxRatesIdParams, body DeleteTaxRatesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTaxRatesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteTaxRatesIdRequestWithBody generates requests for DeleteTaxRatesId with any type of body
func NewDeleteTaxRatesIdRequestWithBody(server string, id string, params *DeleteTaxRatesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxRatesIdRequest calls the generic GetTaxRatesId builder with application/json body
func NewGetTaxRatesIdRequest(server string, id string, params *GetTaxRatesIdParams, body GetTaxRatesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTaxRatesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetTaxRatesIdRequestWithBody generates requests for GetTaxRatesId with any type of body
func NewGetTaxRatesIdRequestWithBody(server string, id string, params *GetTaxRatesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTaxRatesIdRequest calls the generic PostTaxRatesId builder with application/json body
func NewPostTaxRatesIdRequest(server string, id string, params *PostTaxRatesIdParams, body PostTaxRatesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxRatesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostTaxRatesIdRequestWithBody generates requests for PostTaxRatesId with any type of body
func NewPostTaxRatesIdRequestWithBody(server string, id string, params *PostTaxRatesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTaxRatesIdRulesRequest calls the generic PostTaxRatesIdRules builder with application/json body
func NewPostTaxRatesIdRulesRequest(server string, id string, params *PostTaxRatesIdRulesParams, body PostTaxRatesIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxRatesIdRulesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostTaxRatesIdRulesRequestWithBody generates requests for PostTaxRatesIdRules with any type of body
func NewPostTaxRatesIdRulesRequestWithBody(server string, id string, params *PostTaxRatesIdRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxRatesIdRulesRuleIdRequest calls the generic DeleteTaxRatesIdRulesRuleId builder with application/json body
func NewDeleteTaxRatesIdRulesRuleIdRequest(server string, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, body DeleteTaxRatesIdRulesRuleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTaxRatesIdRulesRuleIdRequestWithBody(server, id, ruleId, params, "application/json", bodyReader)
}

// NewDeleteTaxRatesIdRulesRuleIdRequestWithBody generates requests for DeleteTaxRatesIdRulesRuleId with any type of body
func NewDeleteTaxRatesIdRulesRuleIdRequestWithBody(server string, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-rates/%s/rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxRegionsRequest calls the generic GetTaxRegions builder with application/json body
func NewGetTaxRegionsRequest(server string, params *GetTaxRegionsParams, body GetTaxRegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTaxRegionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetTaxRegionsRequestWithBody generates requests for GetTaxRegions with any type of body
func NewGetTaxRegionsRequestWithBody(server string, params *GetTaxRegionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTaxRegionsRequest calls the generic PostTaxRegions builder with application/json body
func NewPostTaxRegionsRequest(server string, params *PostTaxRegionsParams, body PostTaxRegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxRegionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTaxRegionsRequestWithBody generates requests for PostTaxRegions with any type of body
func NewPostTaxRegionsRequestWithBody(server string, params *PostTaxRegionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxRegionsIdRequest calls the generic DeleteTaxRegionsId builder with application/json body
func NewDeleteTaxRegionsIdRequest(server string, id string, params *DeleteTaxRegionsIdParams, body DeleteTaxRegionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTaxRegionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteTaxRegionsIdRequestWithBody generates requests for DeleteTaxRegionsId with any type of body
func NewDeleteTaxRegionsIdRequestWithBody(server string, id string, params *DeleteTaxRegionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxRegionsIdRequest calls the generic GetTaxRegionsId builder with application/json body
func NewGetTaxRegionsIdRequest(server string, id string, params *GetTaxRegionsIdParams, body GetTaxRegionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTaxRegionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetTaxRegionsIdRequestWithBody generates requests for GetTaxRegionsId with any type of body
func NewGetTaxRegionsIdRequestWithBody(server string, id string, params *GetTaxRegionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tax-regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUploadsRequest calls the generic PostUploads builder with application/json body
func NewPostUploadsRequest(server string, params *PostUploadsParams, body PostUploadsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUploadsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUploadsRequestWithBody generates requests for PostUploads with any type of body
func NewPostUploadsRequestWithBody(server string, params *PostUploadsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/uploads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUploadsIdRequest calls the generic DeleteUploadsId builder with application/json body
func NewDeleteUploadsIdRequest(server string, id string, params *DeleteUploadsIdParams, body DeleteUploadsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUploadsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteUploadsIdRequestWithBody generates requests for DeleteUploadsId with any type of body
func NewDeleteUploadsIdRequestWithBody(server string, id string, params *DeleteUploadsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/uploads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUploadsIdRequest calls the generic GetUploadsId builder with application/json body
func NewGetUploadsIdRequest(server string, id string, params *GetUploadsIdParams, body GetUploadsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUploadsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetUploadsIdRequestWithBody generates requests for GetUploadsId with any type of body
func NewGetUploadsIdRequestWithBody(server string, id string, params *GetUploadsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/uploads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest calls the generic GetUsers builder with application/json body
func NewGetUsersRequest(server string, params *GetUsersParams, body GetUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetUsersRequestWithBody generates requests for GetUsers with any type of body
func NewGetUsersRequestWithBody(server string, params *GetUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, params *PostUsersParams, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, params *PostUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersMeRequest calls the generic GetUsersMe builder with application/json body
func NewGetUsersMeRequest(server string, params *GetUsersMeParams, body GetUsersMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsersMeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetUsersMeRequestWithBody generates requests for GetUsersMe with any type of body
func NewGetUsersMeRequestWithBody(server string, params *GetUsersMeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersIdRequest calls the generic DeleteUsersId builder with application/json body
func NewDeleteUsersIdRequest(server string, id string, params *DeleteUsersIdParams, body DeleteUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUsersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteUsersIdRequestWithBody generates requests for DeleteUsersId with any type of body
func NewDeleteUsersIdRequestWithBody(server string, id string, params *DeleteUsersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdRequest calls the generic GetUsersId builder with application/json body
func NewGetUsersIdRequest(server string, id string, params *GetUsersIdParams, body GetUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetUsersIdRequestWithBody generates requests for GetUsersId with any type of body
func NewGetUsersIdRequestWithBody(server string, id string, params *GetUsersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersIdRequest calls the generic PostUsersId builder with application/json body
func NewPostUsersIdRequest(server string, id string, params *PostUsersIdParams, body PostUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostUsersIdRequestWithBody generates requests for PostUsersId with any type of body
func NewPostUsersIdRequestWithBody(server string, id string, params *PostUsersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkflowsExecutionsRequest calls the generic GetWorkflowsExecutions builder with application/json body
func NewGetWorkflowsExecutionsRequest(server string, params *GetWorkflowsExecutionsParams, body GetWorkflowsExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkflowsExecutionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetWorkflowsExecutionsRequestWithBody generates requests for GetWorkflowsExecutions with any type of body
func NewGetWorkflowsExecutionsRequestWithBody(server string, params *GetWorkflowsExecutionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkflowsExecutionsIdRequest calls the generic GetWorkflowsExecutionsId builder with application/json body
func NewGetWorkflowsExecutionsIdRequest(server string, id string, params *GetWorkflowsExecutionsIdParams, body GetWorkflowsExecutionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkflowsExecutionsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewGetWorkflowsExecutionsIdRequestWithBody generates requests for GetWorkflowsExecutionsId with any type of body
func NewGetWorkflowsExecutionsIdRequestWithBody(server string, id string, params *GetWorkflowsExecutionsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostWorkflowsExecutionsWorkflowIdRunRequest calls the generic PostWorkflowsExecutionsWorkflowIdRun builder with application/json body
func NewPostWorkflowsExecutionsWorkflowIdRunRequest(server string, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, body PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsExecutionsWorkflowIdRunRequestWithBody(server, workflowId, params, "application/json", bodyReader)
}

// NewPostWorkflowsExecutionsWorkflowIdRunRequestWithBody generates requests for PostWorkflowsExecutionsWorkflowIdRun with any type of body
func NewPostWorkflowsExecutionsWorkflowIdRunRequestWithBody(server string, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequest calls the generic PostWorkflowsExecutionsWorkflowIdStepsFailure builder with application/json body
func NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequest(server string, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, body PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequestWithBody(server, workflowId, params, "application/json", bodyReader)
}

// NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequestWithBody generates requests for PostWorkflowsExecutionsWorkflowIdStepsFailure with any type of body
func NewPostWorkflowsExecutionsWorkflowIdStepsFailureRequestWithBody(server string, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s/steps/failure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequest calls the generic PostWorkflowsExecutionsWorkflowIdStepsSuccess builder with application/json body
func NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequest(server string, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, body PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequestWithBody(server, workflowId, params, "application/json", bodyReader)
}

// NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequestWithBody generates requests for PostWorkflowsExecutionsWorkflowIdStepsSuccess with any type of body
func NewPostWorkflowsExecutionsWorkflowIdStepsSuccessRequestWithBody(server string, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s/steps/success", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkflowsExecutionsWorkflowIdSubscribeRequest calls the generic GetWorkflowsExecutionsWorkflowIdSubscribe builder with application/json body
func NewGetWorkflowsExecutionsWorkflowIdSubscribeRequest(server string, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkflowsExecutionsWorkflowIdSubscribeRequestWithBody(server, workflowId, params, "application/json", bodyReader)
}

// NewGetWorkflowsExecutionsWorkflowIdSubscribeRequestWithBody generates requests for GetWorkflowsExecutionsWorkflowIdSubscribe with any type of body
func NewGetWorkflowsExecutionsWorkflowIdSubscribeRequestWithBody(server string, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s/subscribe", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequest calls the generic GetWorkflowsExecutionsWorkflowIdTransactionId builder with application/json body
func NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequest(server string, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequestWithBody(server, workflowId, transactionId, params, "application/json", bodyReader)
}

// NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequestWithBody generates requests for GetWorkflowsExecutionsWorkflowIdTransactionId with any type of body
func NewGetWorkflowsExecutionsWorkflowIdTransactionIdRequestWithBody(server string, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequest calls the generic GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe builder with application/json body
func NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequest(server string, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequestWithBody(server, workflowId, transactionId, stepId, params, "application/json", bodyReader)
}

// NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequestWithBody generates requests for GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe with any type of body
func NewGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeRequestWithBody(server string, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "step_id", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/workflows-executions/%s/%s/%s/subscribe", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiKeysWithBodyWithResponse request with any body
	GetApiKeysWithBodyWithResponse(ctx context.Context, params *GetApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error)

	GetApiKeysWithResponse(ctx context.Context, params *GetApiKeysParams, body GetApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error)

	// PostApiKeysWithBodyWithResponse request with any body
	PostApiKeysWithBodyWithResponse(ctx context.Context, params *PostApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysResponse, error)

	PostApiKeysWithResponse(ctx context.Context, params *PostApiKeysParams, body PostApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysResponse, error)

	// DeleteApiKeysIdWithBodyWithResponse request with any body
	DeleteApiKeysIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiKeysIdResponse, error)

	DeleteApiKeysIdWithResponse(ctx context.Context, id string, params *DeleteApiKeysIdParams, body DeleteApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiKeysIdResponse, error)

	// GetApiKeysIdWithBodyWithResponse request with any body
	GetApiKeysIdWithBodyWithResponse(ctx context.Context, id string, params *GetApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiKeysIdResponse, error)

	GetApiKeysIdWithResponse(ctx context.Context, id string, params *GetApiKeysIdParams, body GetApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiKeysIdResponse, error)

	// PostApiKeysIdWithBodyWithResponse request with any body
	PostApiKeysIdWithBodyWithResponse(ctx context.Context, id string, params *PostApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysIdResponse, error)

	PostApiKeysIdWithResponse(ctx context.Context, id string, params *PostApiKeysIdParams, body PostApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysIdResponse, error)

	// PostApiKeysIdRevokeWithBodyWithResponse request with any body
	PostApiKeysIdRevokeWithBodyWithResponse(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysIdRevokeResponse, error)

	PostApiKeysIdRevokeWithResponse(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, body PostApiKeysIdRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysIdRevokeResponse, error)

	// PostApiKeysIdSalesChannelsWithBodyWithResponse request with any body
	PostApiKeysIdSalesChannelsWithBodyWithResponse(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysIdSalesChannelsResponse, error)

	PostApiKeysIdSalesChannelsWithResponse(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, body PostApiKeysIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysIdSalesChannelsResponse, error)

	// GetCampaignsWithBodyWithResponse request with any body
	GetCampaignsWithBodyWithResponse(ctx context.Context, params *GetCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error)

	GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, body GetCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error)

	// PostCampaignsWithBodyWithResponse request with any body
	PostCampaignsWithBodyWithResponse(ctx context.Context, params *PostCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error)

	PostCampaignsWithResponse(ctx context.Context, params *PostCampaignsParams, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error)

	// DeleteCampaignsIdWithBodyWithResponse request with any body
	DeleteCampaignsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error)

	DeleteCampaignsIdWithResponse(ctx context.Context, id string, params *DeleteCampaignsIdParams, body DeleteCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error)

	// GetCampaignsIdWithBodyWithResponse request with any body
	GetCampaignsIdWithBodyWithResponse(ctx context.Context, id string, params *GetCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error)

	GetCampaignsIdWithResponse(ctx context.Context, id string, params *GetCampaignsIdParams, body GetCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error)

	// PostCampaignsIdWithBodyWithResponse request with any body
	PostCampaignsIdWithBodyWithResponse(ctx context.Context, id string, params *PostCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsIdResponse, error)

	PostCampaignsIdWithResponse(ctx context.Context, id string, params *PostCampaignsIdParams, body PostCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsIdResponse, error)

	// GetCollectionsWithBodyWithResponse request with any body
	GetCollectionsWithBodyWithResponse(ctx context.Context, params *GetCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	GetCollectionsWithResponse(ctx context.Context, params *GetCollectionsParams, body GetCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	// PostCollectionsWithBodyWithResponse request with any body
	PostCollectionsWithBodyWithResponse(ctx context.Context, params *PostCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error)

	PostCollectionsWithResponse(ctx context.Context, params *PostCollectionsParams, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error)

	// DeleteCollectionsIdWithBodyWithResponse request with any body
	DeleteCollectionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCollectionsIdResponse, error)

	DeleteCollectionsIdWithResponse(ctx context.Context, id string, params *DeleteCollectionsIdParams, body DeleteCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCollectionsIdResponse, error)

	// GetCollectionsIdWithBodyWithResponse request with any body
	GetCollectionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCollectionsIdResponse, error)

	GetCollectionsIdWithResponse(ctx context.Context, id string, params *GetCollectionsIdParams, body GetCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCollectionsIdResponse, error)

	// PostCollectionsIdWithBodyWithResponse request with any body
	PostCollectionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsIdResponse, error)

	PostCollectionsIdWithResponse(ctx context.Context, id string, params *PostCollectionsIdParams, body PostCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsIdResponse, error)

	// PostCollectionsIdProductsWithBodyWithResponse request with any body
	PostCollectionsIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostCollectionsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsIdProductsResponse, error)

	PostCollectionsIdProductsWithResponse(ctx context.Context, id string, params *PostCollectionsIdProductsParams, body PostCollectionsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsIdProductsResponse, error)

	// GetCurrenciesWithBodyWithResponse request with any body
	GetCurrenciesWithBodyWithResponse(ctx context.Context, params *GetCurrenciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error)

	GetCurrenciesWithResponse(ctx context.Context, params *GetCurrenciesParams, body GetCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error)

	// GetCurrenciesCodeWithBodyWithResponse request with any body
	GetCurrenciesCodeWithBodyWithResponse(ctx context.Context, code string, params *GetCurrenciesCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCurrenciesCodeResponse, error)

	GetCurrenciesCodeWithResponse(ctx context.Context, code string, params *GetCurrenciesCodeParams, body GetCurrenciesCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCurrenciesCodeResponse, error)

	// GetCustomerGroupsWithBodyWithResponse request with any body
	GetCustomerGroupsWithBodyWithResponse(ctx context.Context, params *GetCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomerGroupsResponse, error)

	GetCustomerGroupsWithResponse(ctx context.Context, params *GetCustomerGroupsParams, body GetCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomerGroupsResponse, error)

	// PostCustomerGroupsWithBodyWithResponse request with any body
	PostCustomerGroupsWithBodyWithResponse(ctx context.Context, params *PostCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerGroupsResponse, error)

	PostCustomerGroupsWithResponse(ctx context.Context, params *PostCustomerGroupsParams, body PostCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerGroupsResponse, error)

	// DeleteCustomerGroupsIdWithBodyWithResponse request with any body
	DeleteCustomerGroupsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomerGroupsIdResponse, error)

	DeleteCustomerGroupsIdWithResponse(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, body DeleteCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomerGroupsIdResponse, error)

	// GetCustomerGroupsIdWithBodyWithResponse request with any body
	GetCustomerGroupsIdWithBodyWithResponse(ctx context.Context, id string, params *GetCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomerGroupsIdResponse, error)

	GetCustomerGroupsIdWithResponse(ctx context.Context, id string, params *GetCustomerGroupsIdParams, body GetCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomerGroupsIdResponse, error)

	// PostCustomerGroupsIdWithBodyWithResponse request with any body
	PostCustomerGroupsIdWithBodyWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdResponse, error)

	PostCustomerGroupsIdWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdParams, body PostCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdResponse, error)

	// PostCustomerGroupsIdCustomersWithBodyWithResponse request with any body
	PostCustomerGroupsIdCustomersWithBodyWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdCustomersResponse, error)

	PostCustomerGroupsIdCustomersWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, body PostCustomerGroupsIdCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdCustomersResponse, error)

	// GetCustomersWithBodyWithResponse request with any body
	GetCustomersWithBodyWithResponse(ctx context.Context, params *GetCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error)

	GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, body GetCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error)

	// PostCustomersWithBodyWithResponse request with any body
	PostCustomersWithBodyWithResponse(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error)

	PostCustomersWithResponse(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error)

	// DeleteCustomersIdWithBodyWithResponse request with any body
	DeleteCustomersIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error)

	DeleteCustomersIdWithResponse(ctx context.Context, id string, params *DeleteCustomersIdParams, body DeleteCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error)

	// GetCustomersIdWithBodyWithResponse request with any body
	GetCustomersIdWithBodyWithResponse(ctx context.Context, id string, params *GetCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error)

	GetCustomersIdWithResponse(ctx context.Context, id string, params *GetCustomersIdParams, body GetCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error)

	// PostCustomersIdWithBodyWithResponse request with any body
	PostCustomersIdWithBodyWithResponse(ctx context.Context, id string, params *PostCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersIdResponse, error)

	PostCustomersIdWithResponse(ctx context.Context, id string, params *PostCustomersIdParams, body PostCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersIdResponse, error)

	// GetCustomersIdAddressesWithBodyWithResponse request with any body
	GetCustomersIdAddressesWithBodyWithResponse(ctx context.Context, id string, params *GetCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesResponse, error)

	GetCustomersIdAddressesWithResponse(ctx context.Context, id string, params *GetCustomersIdAddressesParams, body GetCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesResponse, error)

	// PostCustomersIdAddressesWithBodyWithResponse request with any body
	PostCustomersIdAddressesWithBodyWithResponse(ctx context.Context, id string, params *PostCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesResponse, error)

	PostCustomersIdAddressesWithResponse(ctx context.Context, id string, params *PostCustomersIdAddressesParams, body PostCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesResponse, error)

	// DeleteCustomersIdAddressesAddressIdWithBodyWithResponse request with any body
	DeleteCustomersIdAddressesAddressIdWithBodyWithResponse(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomersIdAddressesAddressIdResponse, error)

	DeleteCustomersIdAddressesAddressIdWithResponse(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, body DeleteCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomersIdAddressesAddressIdResponse, error)

	// GetCustomersIdAddressesAddressIdWithBodyWithResponse request with any body
	GetCustomersIdAddressesAddressIdWithBodyWithResponse(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesAddressIdResponse, error)

	GetCustomersIdAddressesAddressIdWithResponse(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, body GetCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesAddressIdResponse, error)

	// PostCustomersIdAddressesAddressIdWithBodyWithResponse request with any body
	PostCustomersIdAddressesAddressIdWithBodyWithResponse(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesAddressIdResponse, error)

	PostCustomersIdAddressesAddressIdWithResponse(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, body PostCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesAddressIdResponse, error)

	// GetDraftOrdersWithBodyWithResponse request with any body
	GetDraftOrdersWithBodyWithResponse(ctx context.Context, params *GetDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDraftOrdersResponse, error)

	GetDraftOrdersWithResponse(ctx context.Context, params *GetDraftOrdersParams, body GetDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDraftOrdersResponse, error)

	// PostDraftOrdersWithBodyWithResponse request with any body
	PostDraftOrdersWithBodyWithResponse(ctx context.Context, params *PostDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDraftOrdersResponse, error)

	PostDraftOrdersWithResponse(ctx context.Context, params *PostDraftOrdersParams, body PostDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDraftOrdersResponse, error)

	// GetDraftOrdersIdWithBodyWithResponse request with any body
	GetDraftOrdersIdWithBodyWithResponse(ctx context.Context, id string, params *GetDraftOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDraftOrdersIdResponse, error)

	GetDraftOrdersIdWithResponse(ctx context.Context, id string, params *GetDraftOrdersIdParams, body GetDraftOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDraftOrdersIdResponse, error)

	// GetFulfillmentProvidersWithBodyWithResponse request with any body
	GetFulfillmentProvidersWithBodyWithResponse(ctx context.Context, params *GetFulfillmentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFulfillmentProvidersResponse, error)

	GetFulfillmentProvidersWithResponse(ctx context.Context, params *GetFulfillmentProvidersParams, body GetFulfillmentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFulfillmentProvidersResponse, error)

	// DeleteFulfillmentSetsIdWithBodyWithResponse request with any body
	DeleteFulfillmentSetsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdResponse, error)

	DeleteFulfillmentSetsIdWithResponse(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, body DeleteFulfillmentSetsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdResponse, error)

	// PostFulfillmentSetsIdServiceZonesWithBodyWithResponse request with any body
	PostFulfillmentSetsIdServiceZonesWithBodyWithResponse(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesResponse, error)

	PostFulfillmentSetsIdServiceZonesWithResponse(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, body PostFulfillmentSetsIdServiceZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesResponse, error)

	// DeleteFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse request with any body
	DeleteFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdServiceZonesZoneIdResponse, error)

	DeleteFulfillmentSetsIdServiceZonesZoneIdWithResponse(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, body DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdServiceZonesZoneIdResponse, error)

	// GetFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse request with any body
	GetFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFulfillmentSetsIdServiceZonesZoneIdResponse, error)

	GetFulfillmentSetsIdServiceZonesZoneIdWithResponse(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, body GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFulfillmentSetsIdServiceZonesZoneIdResponse, error)

	// PostFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse request with any body
	PostFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesZoneIdResponse, error)

	PostFulfillmentSetsIdServiceZonesZoneIdWithResponse(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, body PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesZoneIdResponse, error)

	// PostFulfillmentsWithBodyWithResponse request with any body
	PostFulfillmentsWithBodyWithResponse(ctx context.Context, params *PostFulfillmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentsResponse, error)

	PostFulfillmentsWithResponse(ctx context.Context, params *PostFulfillmentsParams, body PostFulfillmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentsResponse, error)

	// PostFulfillmentsIdCancelWithBodyWithResponse request with any body
	PostFulfillmentsIdCancelWithBodyWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdCancelResponse, error)

	PostFulfillmentsIdCancelWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, body PostFulfillmentsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdCancelResponse, error)

	// PostFulfillmentsIdShipmentWithBodyWithResponse request with any body
	PostFulfillmentsIdShipmentWithBodyWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdShipmentResponse, error)

	PostFulfillmentsIdShipmentWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, body PostFulfillmentsIdShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdShipmentResponse, error)

	// GetInventoryItemsWithBodyWithResponse request with any body
	GetInventoryItemsWithBodyWithResponse(ctx context.Context, params *GetInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInventoryItemsResponse, error)

	GetInventoryItemsWithResponse(ctx context.Context, params *GetInventoryItemsParams, body GetInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInventoryItemsResponse, error)

	// PostInventoryItemsWithBodyWithResponse request with any body
	PostInventoryItemsWithBodyWithResponse(ctx context.Context, params *PostInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsResponse, error)

	PostInventoryItemsWithResponse(ctx context.Context, params *PostInventoryItemsParams, body PostInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsResponse, error)

	// DeleteInventoryItemsIdWithBodyWithResponse request with any body
	DeleteInventoryItemsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdResponse, error)

	DeleteInventoryItemsIdWithResponse(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, body DeleteInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdResponse, error)

	// GetInventoryItemsIdWithBodyWithResponse request with any body
	GetInventoryItemsIdWithBodyWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdResponse, error)

	GetInventoryItemsIdWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdParams, body GetInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdResponse, error)

	// PostInventoryItemsIdWithBodyWithResponse request with any body
	PostInventoryItemsIdWithBodyWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdResponse, error)

	PostInventoryItemsIdWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdParams, body PostInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdResponse, error)

	// GetInventoryItemsIdLocationLevelsWithBodyWithResponse request with any body
	GetInventoryItemsIdLocationLevelsWithBodyWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdLocationLevelsResponse, error)

	GetInventoryItemsIdLocationLevelsWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, body GetInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdLocationLevelsResponse, error)

	// PostInventoryItemsIdLocationLevelsWithBodyWithResponse request with any body
	PostInventoryItemsIdLocationLevelsWithBodyWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsResponse, error)

	PostInventoryItemsIdLocationLevelsWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, body PostInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsResponse, error)

	// PostInventoryItemsIdLocationLevelsBatchWithBodyWithResponse request with any body
	PostInventoryItemsIdLocationLevelsBatchWithBodyWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsBatchResponse, error)

	PostInventoryItemsIdLocationLevelsBatchWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, body PostInventoryItemsIdLocationLevelsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsBatchResponse, error)

	// DeleteInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse request with any body
	DeleteInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdLocationLevelsLocationIdResponse, error)

	DeleteInventoryItemsIdLocationLevelsLocationIdWithResponse(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, body DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdLocationLevelsLocationIdResponse, error)

	// PostInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse request with any body
	PostInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsLocationIdResponse, error)

	PostInventoryItemsIdLocationLevelsLocationIdWithResponse(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, body PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsLocationIdResponse, error)

	// GetInvitesWithBodyWithResponse request with any body
	GetInvitesWithBodyWithResponse(ctx context.Context, params *GetInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInvitesResponse, error)

	GetInvitesWithResponse(ctx context.Context, params *GetInvitesParams, body GetInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInvitesResponse, error)

	// PostInvitesWithBodyWithResponse request with any body
	PostInvitesWithBodyWithResponse(ctx context.Context, params *PostInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitesResponse, error)

	PostInvitesWithResponse(ctx context.Context, params *PostInvitesParams, body PostInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitesResponse, error)

	// PostInvitesAcceptWithBodyWithResponse request with any body
	PostInvitesAcceptWithBodyWithResponse(ctx context.Context, params *PostInvitesAcceptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitesAcceptResponse, error)

	PostInvitesAcceptWithResponse(ctx context.Context, params *PostInvitesAcceptParams, body PostInvitesAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitesAcceptResponse, error)

	// DeleteInvitesIdWithBodyWithResponse request with any body
	DeleteInvitesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInvitesIdResponse, error)

	DeleteInvitesIdWithResponse(ctx context.Context, id string, params *DeleteInvitesIdParams, body DeleteInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInvitesIdResponse, error)

	// GetInvitesIdWithBodyWithResponse request with any body
	GetInvitesIdWithBodyWithResponse(ctx context.Context, id string, params *GetInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInvitesIdResponse, error)

	GetInvitesIdWithResponse(ctx context.Context, id string, params *GetInvitesIdParams, body GetInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInvitesIdResponse, error)

	// PostInvitesIdResendWithBodyWithResponse request with any body
	PostInvitesIdResendWithBodyWithResponse(ctx context.Context, id string, params *PostInvitesIdResendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitesIdResendResponse, error)

	PostInvitesIdResendWithResponse(ctx context.Context, id string, params *PostInvitesIdResendParams, body PostInvitesIdResendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitesIdResendResponse, error)

	// GetOrdersWithBodyWithResponse request with any body
	GetOrdersWithBodyWithResponse(ctx context.Context, params *GetOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error)

	GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams, body GetOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error)

	// GetOrdersIdWithBodyWithResponse request with any body
	GetOrdersIdWithBodyWithResponse(ctx context.Context, id string, params *GetOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrdersIdResponse, error)

	GetOrdersIdWithResponse(ctx context.Context, id string, params *GetOrdersIdParams, body GetOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrdersIdResponse, error)

	// GetPaymentsWithBodyWithResponse request with any body
	GetPaymentsWithBodyWithResponse(ctx context.Context, params *GetPaymentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPaymentsResponse, error)

	GetPaymentsWithResponse(ctx context.Context, params *GetPaymentsParams, body GetPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPaymentsResponse, error)

	// GetPaymentsPaymentProvidersWithBodyWithResponse request with any body
	GetPaymentsPaymentProvidersWithBodyWithResponse(ctx context.Context, params *GetPaymentsPaymentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPaymentsPaymentProvidersResponse, error)

	GetPaymentsPaymentProvidersWithResponse(ctx context.Context, params *GetPaymentsPaymentProvidersParams, body GetPaymentsPaymentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPaymentsPaymentProvidersResponse, error)

	// GetPaymentsIdWithBodyWithResponse request with any body
	GetPaymentsIdWithBodyWithResponse(ctx context.Context, id string, params *GetPaymentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPaymentsIdResponse, error)

	GetPaymentsIdWithResponse(ctx context.Context, id string, params *GetPaymentsIdParams, body GetPaymentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPaymentsIdResponse, error)

	// PostPaymentsIdCaptureWithBodyWithResponse request with any body
	PostPaymentsIdCaptureWithBodyWithResponse(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsIdCaptureResponse, error)

	PostPaymentsIdCaptureWithResponse(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, body PostPaymentsIdCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsIdCaptureResponse, error)

	// PostPaymentsIdRefundWithBodyWithResponse request with any body
	PostPaymentsIdRefundWithBodyWithResponse(ctx context.Context, id string, params *PostPaymentsIdRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsIdRefundResponse, error)

	PostPaymentsIdRefundWithResponse(ctx context.Context, id string, params *PostPaymentsIdRefundParams, body PostPaymentsIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsIdRefundResponse, error)

	// GetPriceListsWithBodyWithResponse request with any body
	GetPriceListsWithBodyWithResponse(ctx context.Context, params *GetPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPriceListsResponse, error)

	GetPriceListsWithResponse(ctx context.Context, params *GetPriceListsParams, body GetPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPriceListsResponse, error)

	// PostPriceListsWithBodyWithResponse request with any body
	PostPriceListsWithBodyWithResponse(ctx context.Context, params *PostPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsResponse, error)

	PostPriceListsWithResponse(ctx context.Context, params *PostPriceListsParams, body PostPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsResponse, error)

	// DeletePriceListsIdWithBodyWithResponse request with any body
	DeletePriceListsIdWithBodyWithResponse(ctx context.Context, id string, params *DeletePriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePriceListsIdResponse, error)

	DeletePriceListsIdWithResponse(ctx context.Context, id string, params *DeletePriceListsIdParams, body DeletePriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePriceListsIdResponse, error)

	// GetPriceListsIdWithBodyWithResponse request with any body
	GetPriceListsIdWithBodyWithResponse(ctx context.Context, id string, params *GetPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPriceListsIdResponse, error)

	GetPriceListsIdWithResponse(ctx context.Context, id string, params *GetPriceListsIdParams, body GetPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPriceListsIdResponse, error)

	// PostPriceListsIdWithBodyWithResponse request with any body
	PostPriceListsIdWithBodyWithResponse(ctx context.Context, id string, params *PostPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsIdResponse, error)

	PostPriceListsIdWithResponse(ctx context.Context, id string, params *PostPriceListsIdParams, body PostPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsIdResponse, error)

	// PostPriceListsIdPricesBatchWithBodyWithResponse request with any body
	PostPriceListsIdPricesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsIdPricesBatchResponse, error)

	PostPriceListsIdPricesBatchWithResponse(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, body PostPriceListsIdPricesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsIdPricesBatchResponse, error)

	// PostPriceListsIdProductsWithBodyWithResponse request with any body
	PostPriceListsIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostPriceListsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsIdProductsResponse, error)

	PostPriceListsIdProductsWithResponse(ctx context.Context, id string, params *PostPriceListsIdProductsParams, body PostPriceListsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsIdProductsResponse, error)

	// GetPricingRuleTypesWithBodyWithResponse request with any body
	GetPricingRuleTypesWithBodyWithResponse(ctx context.Context, params *GetPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesResponse, error)

	GetPricingRuleTypesWithResponse(ctx context.Context, params *GetPricingRuleTypesParams, body GetPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesResponse, error)

	// PostPricingRuleTypesWithBodyWithResponse request with any body
	PostPricingRuleTypesWithBodyWithResponse(ctx context.Context, params *PostPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesResponse, error)

	PostPricingRuleTypesWithResponse(ctx context.Context, params *PostPricingRuleTypesParams, body PostPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesResponse, error)

	// DeletePricingRuleTypesIdWithBodyWithResponse request with any body
	DeletePricingRuleTypesIdWithBodyWithResponse(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePricingRuleTypesIdResponse, error)

	DeletePricingRuleTypesIdWithResponse(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, body DeletePricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePricingRuleTypesIdResponse, error)

	// GetPricingRuleTypesIdWithBodyWithResponse request with any body
	GetPricingRuleTypesIdWithBodyWithResponse(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesIdResponse, error)

	GetPricingRuleTypesIdWithResponse(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, body GetPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesIdResponse, error)

	// PostPricingRuleTypesIdWithBodyWithResponse request with any body
	PostPricingRuleTypesIdWithBodyWithResponse(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesIdResponse, error)

	PostPricingRuleTypesIdWithResponse(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, body PostPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesIdResponse, error)

	// GetProductCategoriesWithBodyWithResponse request with any body
	GetProductCategoriesWithBodyWithResponse(ctx context.Context, params *GetProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductCategoriesResponse, error)

	GetProductCategoriesWithResponse(ctx context.Context, params *GetProductCategoriesParams, body GetProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductCategoriesResponse, error)

	// PostProductCategoriesWithBodyWithResponse request with any body
	PostProductCategoriesWithBodyWithResponse(ctx context.Context, params *PostProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductCategoriesResponse, error)

	PostProductCategoriesWithResponse(ctx context.Context, params *PostProductCategoriesParams, body PostProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductCategoriesResponse, error)

	// GetProductCategoriesIdWithBodyWithResponse request with any body
	GetProductCategoriesIdWithBodyWithResponse(ctx context.Context, id string, params *GetProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductCategoriesIdResponse, error)

	GetProductCategoriesIdWithResponse(ctx context.Context, id string, params *GetProductCategoriesIdParams, body GetProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductCategoriesIdResponse, error)

	// PostProductCategoriesIdWithBodyWithResponse request with any body
	PostProductCategoriesIdWithBodyWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdResponse, error)

	PostProductCategoriesIdWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdParams, body PostProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdResponse, error)

	// PostProductCategoriesIdProductsWithBodyWithResponse request with any body
	PostProductCategoriesIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdProductsResponse, error)

	PostProductCategoriesIdProductsWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, body PostProductCategoriesIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdProductsResponse, error)

	// GetProductTypesWithBodyWithResponse request with any body
	GetProductTypesWithBodyWithResponse(ctx context.Context, params *GetProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductTypesResponse, error)

	GetProductTypesWithResponse(ctx context.Context, params *GetProductTypesParams, body GetProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductTypesResponse, error)

	// PostProductTypesWithBodyWithResponse request with any body
	PostProductTypesWithBodyWithResponse(ctx context.Context, params *PostProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductTypesResponse, error)

	PostProductTypesWithResponse(ctx context.Context, params *PostProductTypesParams, body PostProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductTypesResponse, error)

	// DeleteProductTypesIdWithBodyWithResponse request with any body
	DeleteProductTypesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductTypesIdResponse, error)

	DeleteProductTypesIdWithResponse(ctx context.Context, id string, params *DeleteProductTypesIdParams, body DeleteProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductTypesIdResponse, error)

	// GetProductTypesIdWithBodyWithResponse request with any body
	GetProductTypesIdWithBodyWithResponse(ctx context.Context, id string, params *GetProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductTypesIdResponse, error)

	GetProductTypesIdWithResponse(ctx context.Context, id string, params *GetProductTypesIdParams, body GetProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductTypesIdResponse, error)

	// PostProductTypesIdWithBodyWithResponse request with any body
	PostProductTypesIdWithBodyWithResponse(ctx context.Context, id string, params *PostProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductTypesIdResponse, error)

	PostProductTypesIdWithResponse(ctx context.Context, id string, params *PostProductTypesIdParams, body PostProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductTypesIdResponse, error)

	// GetProductsWithBodyWithResponse request with any body
	GetProductsWithBodyWithResponse(ctx context.Context, params *GetProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// PostProductsWithBodyWithResponse request with any body
	PostProductsWithBodyWithResponse(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	PostProductsWithResponse(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	// PostProductsBatchWithBodyWithResponse request with any body
	PostProductsBatchWithBodyWithResponse(ctx context.Context, params *PostProductsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsBatchResponse, error)

	PostProductsBatchWithResponse(ctx context.Context, params *PostProductsBatchParams, body PostProductsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsBatchResponse, error)

	// DeleteProductsIdWithBodyWithResponse request with any body
	DeleteProductsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsIdResponse, error)

	DeleteProductsIdWithResponse(ctx context.Context, id string, params *DeleteProductsIdParams, body DeleteProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsIdResponse, error)

	// GetProductsIdWithBodyWithResponse request with any body
	GetProductsIdWithBodyWithResponse(ctx context.Context, id string, params *GetProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error)

	GetProductsIdWithResponse(ctx context.Context, id string, params *GetProductsIdParams, body GetProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error)

	// PostProductsIdWithBodyWithResponse request with any body
	PostProductsIdWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdResponse, error)

	PostProductsIdWithResponse(ctx context.Context, id string, params *PostProductsIdParams, body PostProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdResponse, error)

	// GetProductsIdOptionsWithBodyWithResponse request with any body
	GetProductsIdOptionsWithBodyWithResponse(ctx context.Context, id string, params *GetProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsResponse, error)

	GetProductsIdOptionsWithResponse(ctx context.Context, id string, params *GetProductsIdOptionsParams, body GetProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsResponse, error)

	// PostProductsIdOptionsWithBodyWithResponse request with any body
	PostProductsIdOptionsWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsResponse, error)

	PostProductsIdOptionsWithResponse(ctx context.Context, id string, params *PostProductsIdOptionsParams, body PostProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsResponse, error)

	// DeleteProductsIdOptionsOptionIdWithBodyWithResponse request with any body
	DeleteProductsIdOptionsOptionIdWithBodyWithResponse(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsIdOptionsOptionIdResponse, error)

	DeleteProductsIdOptionsOptionIdWithResponse(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, body DeleteProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsIdOptionsOptionIdResponse, error)

	// GetProductsIdOptionsOptionIdWithBodyWithResponse request with any body
	GetProductsIdOptionsOptionIdWithBodyWithResponse(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsOptionIdResponse, error)

	GetProductsIdOptionsOptionIdWithResponse(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, body GetProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsOptionIdResponse, error)

	// PostProductsIdOptionsOptionIdWithBodyWithResponse request with any body
	PostProductsIdOptionsOptionIdWithBodyWithResponse(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsOptionIdResponse, error)

	PostProductsIdOptionsOptionIdWithResponse(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, body PostProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsOptionIdResponse, error)

	// GetProductsIdVariantsWithBodyWithResponse request with any body
	GetProductsIdVariantsWithBodyWithResponse(ctx context.Context, id string, params *GetProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsResponse, error)

	GetProductsIdVariantsWithResponse(ctx context.Context, id string, params *GetProductsIdVariantsParams, body GetProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsResponse, error)

	// PostProductsIdVariantsWithBodyWithResponse request with any body
	PostProductsIdVariantsWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsResponse, error)

	PostProductsIdVariantsWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsParams, body PostProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsResponse, error)

	// PostProductsIdVariantsBatchWithBodyWithResponse request with any body
	PostProductsIdVariantsBatchWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsBatchResponse, error)

	PostProductsIdVariantsBatchWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, body PostProductsIdVariantsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsBatchResponse, error)

	// DeleteProductsIdVariantsVariantIdWithBodyWithResponse request with any body
	DeleteProductsIdVariantsVariantIdWithBodyWithResponse(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsIdVariantsVariantIdResponse, error)

	DeleteProductsIdVariantsVariantIdWithResponse(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, body DeleteProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsIdVariantsVariantIdResponse, error)

	// GetProductsIdVariantsVariantIdWithBodyWithResponse request with any body
	GetProductsIdVariantsVariantIdWithBodyWithResponse(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsVariantIdResponse, error)

	GetProductsIdVariantsVariantIdWithResponse(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, body GetProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsVariantIdResponse, error)

	// PostProductsIdVariantsVariantIdWithBodyWithResponse request with any body
	PostProductsIdVariantsVariantIdWithBodyWithResponse(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsVariantIdResponse, error)

	PostProductsIdVariantsVariantIdWithResponse(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, body PostProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsVariantIdResponse, error)

	// GetPromotionsWithBodyWithResponse request with any body
	GetPromotionsWithBodyWithResponse(ctx context.Context, params *GetPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsResponse, error)

	GetPromotionsWithResponse(ctx context.Context, params *GetPromotionsParams, body GetPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsResponse, error)

	// PostPromotionsWithBodyWithResponse request with any body
	PostPromotionsWithBodyWithResponse(ctx context.Context, params *PostPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsResponse, error)

	PostPromotionsWithResponse(ctx context.Context, params *PostPromotionsParams, body PostPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsResponse, error)

	// GetPromotionsRuleAttributeOptionsRuleTypeWithBodyWithResponse request with any body
	GetPromotionsRuleAttributeOptionsRuleTypeWithBodyWithResponse(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsRuleAttributeOptionsRuleTypeResponse, error)

	GetPromotionsRuleAttributeOptionsRuleTypeWithResponse(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, body GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsRuleAttributeOptionsRuleTypeResponse, error)

	// GetPromotionsRuleOperatorOptionsWithBodyWithResponse request with any body
	GetPromotionsRuleOperatorOptionsWithBodyWithResponse(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsRuleOperatorOptionsResponse, error)

	GetPromotionsRuleOperatorOptionsWithResponse(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, body GetPromotionsRuleOperatorOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsRuleOperatorOptionsResponse, error)

	// GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBodyWithResponse request with any body
	GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBodyWithResponse(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse, error)

	GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithResponse(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, body GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse, error)

	// DeletePromotionsIdWithBodyWithResponse request with any body
	DeletePromotionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeletePromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePromotionsIdResponse, error)

	DeletePromotionsIdWithResponse(ctx context.Context, id string, params *DeletePromotionsIdParams, body DeletePromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePromotionsIdResponse, error)

	// GetPromotionsIdWithBodyWithResponse request with any body
	GetPromotionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsIdResponse, error)

	GetPromotionsIdWithResponse(ctx context.Context, id string, params *GetPromotionsIdParams, body GetPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsIdResponse, error)

	// PostPromotionsIdWithBodyWithResponse request with any body
	PostPromotionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdResponse, error)

	PostPromotionsIdWithResponse(ctx context.Context, id string, params *PostPromotionsIdParams, body PostPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdResponse, error)

	// PostPromotionsIdBuyRulesBatchWithBodyWithResponse request with any body
	PostPromotionsIdBuyRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdBuyRulesBatchResponse, error)

	PostPromotionsIdBuyRulesBatchWithResponse(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, body PostPromotionsIdBuyRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdBuyRulesBatchResponse, error)

	// PostPromotionsIdRulesBatchWithBodyWithResponse request with any body
	PostPromotionsIdRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdRulesBatchResponse, error)

	PostPromotionsIdRulesBatchWithResponse(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, body PostPromotionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdRulesBatchResponse, error)

	// PostPromotionsIdTargetRulesBatchWithBodyWithResponse request with any body
	PostPromotionsIdTargetRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdTargetRulesBatchResponse, error)

	PostPromotionsIdTargetRulesBatchWithResponse(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, body PostPromotionsIdTargetRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdTargetRulesBatchResponse, error)

	// GetPromotionsIdRuleTypeWithBodyWithResponse request with any body
	GetPromotionsIdRuleTypeWithBodyWithResponse(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsIdRuleTypeResponse, error)

	GetPromotionsIdRuleTypeWithResponse(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, body GetPromotionsIdRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsIdRuleTypeResponse, error)

	// GetRegionsWithBodyWithResponse request with any body
	GetRegionsWithBodyWithResponse(ctx context.Context, params *GetRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRegionsResponse, error)

	GetRegionsWithResponse(ctx context.Context, params *GetRegionsParams, body GetRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRegionsResponse, error)

	// PostRegionsWithBodyWithResponse request with any body
	PostRegionsWithBodyWithResponse(ctx context.Context, params *PostRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error)

	PostRegionsWithResponse(ctx context.Context, params *PostRegionsParams, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error)

	// DeleteRegionsIdWithBodyWithResponse request with any body
	DeleteRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRegionsIdResponse, error)

	DeleteRegionsIdWithResponse(ctx context.Context, id string, params *DeleteRegionsIdParams, body DeleteRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRegionsIdResponse, error)

	// GetRegionsIdWithBodyWithResponse request with any body
	GetRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRegionsIdResponse, error)

	GetRegionsIdWithResponse(ctx context.Context, id string, params *GetRegionsIdParams, body GetRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRegionsIdResponse, error)

	// PostRegionsIdWithBodyWithResponse request with any body
	PostRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegionsIdResponse, error)

	PostRegionsIdWithResponse(ctx context.Context, id string, params *PostRegionsIdParams, body PostRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegionsIdResponse, error)

	// GetReservationsWithBodyWithResponse request with any body
	GetReservationsWithBodyWithResponse(ctx context.Context, params *GetReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error)

	GetReservationsWithResponse(ctx context.Context, params *GetReservationsParams, body GetReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error)

	// PostReservationsWithBodyWithResponse request with any body
	PostReservationsWithBodyWithResponse(ctx context.Context, params *PostReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error)

	PostReservationsWithResponse(ctx context.Context, params *PostReservationsParams, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error)

	// DeleteReservationsIdWithBodyWithResponse request with any body
	DeleteReservationsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteReservationsIdResponse, error)

	DeleteReservationsIdWithResponse(ctx context.Context, id string, params *DeleteReservationsIdParams, body DeleteReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteReservationsIdResponse, error)

	// GetReservationsIdWithBodyWithResponse request with any body
	GetReservationsIdWithBodyWithResponse(ctx context.Context, id string, params *GetReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error)

	GetReservationsIdWithResponse(ctx context.Context, id string, params *GetReservationsIdParams, body GetReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error)

	// PostReservationsIdWithBodyWithResponse request with any body
	PostReservationsIdWithBodyWithResponse(ctx context.Context, id string, params *PostReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsIdResponse, error)

	PostReservationsIdWithResponse(ctx context.Context, id string, params *PostReservationsIdParams, body PostReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsIdResponse, error)

	// GetSalesChannelsWithBodyWithResponse request with any body
	GetSalesChannelsWithBodyWithResponse(ctx context.Context, params *GetSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSalesChannelsResponse, error)

	GetSalesChannelsWithResponse(ctx context.Context, params *GetSalesChannelsParams, body GetSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSalesChannelsResponse, error)

	// PostSalesChannelsWithBodyWithResponse request with any body
	PostSalesChannelsWithBodyWithResponse(ctx context.Context, params *PostSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesChannelsResponse, error)

	PostSalesChannelsWithResponse(ctx context.Context, params *PostSalesChannelsParams, body PostSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesChannelsResponse, error)

	// DeleteSalesChannelsIdWithBodyWithResponse request with any body
	DeleteSalesChannelsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSalesChannelsIdResponse, error)

	DeleteSalesChannelsIdWithResponse(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, body DeleteSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSalesChannelsIdResponse, error)

	// GetSalesChannelsIdWithBodyWithResponse request with any body
	GetSalesChannelsIdWithBodyWithResponse(ctx context.Context, id string, params *GetSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSalesChannelsIdResponse, error)

	GetSalesChannelsIdWithResponse(ctx context.Context, id string, params *GetSalesChannelsIdParams, body GetSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSalesChannelsIdResponse, error)

	// PostSalesChannelsIdWithBodyWithResponse request with any body
	PostSalesChannelsIdWithBodyWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdResponse, error)

	PostSalesChannelsIdWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdParams, body PostSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdResponse, error)

	// PostSalesChannelsIdProductsWithBodyWithResponse request with any body
	PostSalesChannelsIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdProductsResponse, error)

	PostSalesChannelsIdProductsWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, body PostSalesChannelsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdProductsResponse, error)

	// GetShippingOptionsWithBodyWithResponse request with any body
	GetShippingOptionsWithBodyWithResponse(ctx context.Context, params *GetShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetShippingOptionsResponse, error)

	GetShippingOptionsWithResponse(ctx context.Context, params *GetShippingOptionsParams, body GetShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetShippingOptionsResponse, error)

	// PostShippingOptionsWithBodyWithResponse request with any body
	PostShippingOptionsWithBodyWithResponse(ctx context.Context, params *PostShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingOptionsResponse, error)

	PostShippingOptionsWithResponse(ctx context.Context, params *PostShippingOptionsParams, body PostShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingOptionsResponse, error)

	// DeleteShippingOptionsIdWithBodyWithResponse request with any body
	DeleteShippingOptionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteShippingOptionsIdResponse, error)

	DeleteShippingOptionsIdWithResponse(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, body DeleteShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteShippingOptionsIdResponse, error)

	// PostShippingOptionsIdWithBodyWithResponse request with any body
	PostShippingOptionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdResponse, error)

	PostShippingOptionsIdWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdParams, body PostShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdResponse, error)

	// PostShippingOptionsIdRulesBatchWithBodyWithResponse request with any body
	PostShippingOptionsIdRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdRulesBatchResponse, error)

	PostShippingOptionsIdRulesBatchWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, body PostShippingOptionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdRulesBatchResponse, error)

	// GetShippingProfilesWithBodyWithResponse request with any body
	GetShippingProfilesWithBodyWithResponse(ctx context.Context, params *GetShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetShippingProfilesResponse, error)

	GetShippingProfilesWithResponse(ctx context.Context, params *GetShippingProfilesParams, body GetShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetShippingProfilesResponse, error)

	// PostShippingProfilesWithBodyWithResponse request with any body
	PostShippingProfilesWithBodyWithResponse(ctx context.Context, params *PostShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingProfilesResponse, error)

	PostShippingProfilesWithResponse(ctx context.Context, params *PostShippingProfilesParams, body PostShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingProfilesResponse, error)

	// DeleteShippingProfilesIdWithBodyWithResponse request with any body
	DeleteShippingProfilesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteShippingProfilesIdResponse, error)

	DeleteShippingProfilesIdWithResponse(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, body DeleteShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteShippingProfilesIdResponse, error)

	// GetShippingProfilesIdWithBodyWithResponse request with any body
	GetShippingProfilesIdWithBodyWithResponse(ctx context.Context, id string, params *GetShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetShippingProfilesIdResponse, error)

	GetShippingProfilesIdWithResponse(ctx context.Context, id string, params *GetShippingProfilesIdParams, body GetShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetShippingProfilesIdResponse, error)

	// GetStockLocationsWithBodyWithResponse request with any body
	GetStockLocationsWithBodyWithResponse(ctx context.Context, params *GetStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStockLocationsResponse, error)

	GetStockLocationsWithResponse(ctx context.Context, params *GetStockLocationsParams, body GetStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStockLocationsResponse, error)

	// PostStockLocationsWithBodyWithResponse request with any body
	PostStockLocationsWithBodyWithResponse(ctx context.Context, params *PostStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsResponse, error)

	PostStockLocationsWithResponse(ctx context.Context, params *PostStockLocationsParams, body PostStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsResponse, error)

	// DeleteStockLocationsIdWithBodyWithResponse request with any body
	DeleteStockLocationsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteStockLocationsIdResponse, error)

	DeleteStockLocationsIdWithResponse(ctx context.Context, id string, params *DeleteStockLocationsIdParams, body DeleteStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteStockLocationsIdResponse, error)

	// GetStockLocationsIdWithBodyWithResponse request with any body
	GetStockLocationsIdWithBodyWithResponse(ctx context.Context, id string, params *GetStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStockLocationsIdResponse, error)

	GetStockLocationsIdWithResponse(ctx context.Context, id string, params *GetStockLocationsIdParams, body GetStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStockLocationsIdResponse, error)

	// PostStockLocationsIdWithBodyWithResponse request with any body
	PostStockLocationsIdWithBodyWithResponse(ctx context.Context, id string, params *PostStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsIdResponse, error)

	PostStockLocationsIdWithResponse(ctx context.Context, id string, params *PostStockLocationsIdParams, body PostStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsIdResponse, error)

	// PostStockLocationsIdFulfillmentSetsWithBodyWithResponse request with any body
	PostStockLocationsIdFulfillmentSetsWithBodyWithResponse(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsIdFulfillmentSetsResponse, error)

	PostStockLocationsIdFulfillmentSetsWithResponse(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, body PostStockLocationsIdFulfillmentSetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsIdFulfillmentSetsResponse, error)

	// PostStockLocationsIdSalesChannelsWithBodyWithResponse request with any body
	PostStockLocationsIdSalesChannelsWithBodyWithResponse(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsIdSalesChannelsResponse, error)

	PostStockLocationsIdSalesChannelsWithResponse(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, body PostStockLocationsIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsIdSalesChannelsResponse, error)

	// GetStoresWithBodyWithResponse request with any body
	GetStoresWithBodyWithResponse(ctx context.Context, params *GetStoresParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStoresResponse, error)

	GetStoresWithResponse(ctx context.Context, params *GetStoresParams, body GetStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStoresResponse, error)

	// GetStoresIdWithBodyWithResponse request with any body
	GetStoresIdWithBodyWithResponse(ctx context.Context, id string, params *GetStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStoresIdResponse, error)

	GetStoresIdWithResponse(ctx context.Context, id string, params *GetStoresIdParams, body GetStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStoresIdResponse, error)

	// PostStoresIdWithBodyWithResponse request with any body
	PostStoresIdWithBodyWithResponse(ctx context.Context, id string, params *PostStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoresIdResponse, error)

	PostStoresIdWithResponse(ctx context.Context, id string, params *PostStoresIdParams, body PostStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoresIdResponse, error)

	// GetTaxRatesWithBodyWithResponse request with any body
	GetTaxRatesWithBodyWithResponse(ctx context.Context, params *GetTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error)

	GetTaxRatesWithResponse(ctx context.Context, params *GetTaxRatesParams, body GetTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error)

	// PostTaxRatesWithBodyWithResponse request with any body
	PostTaxRatesWithBodyWithResponse(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error)

	PostTaxRatesWithResponse(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error)

	// DeleteTaxRatesIdWithBodyWithResponse request with any body
	DeleteTaxRatesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdResponse, error)

	DeleteTaxRatesIdWithResponse(ctx context.Context, id string, params *DeleteTaxRatesIdParams, body DeleteTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdResponse, error)

	// GetTaxRatesIdWithBodyWithResponse request with any body
	GetTaxRatesIdWithBodyWithResponse(ctx context.Context, id string, params *GetTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRatesIdResponse, error)

	GetTaxRatesIdWithResponse(ctx context.Context, id string, params *GetTaxRatesIdParams, body GetTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRatesIdResponse, error)

	// PostTaxRatesIdWithBodyWithResponse request with any body
	PostTaxRatesIdWithBodyWithResponse(ctx context.Context, id string, params *PostTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesIdResponse, error)

	PostTaxRatesIdWithResponse(ctx context.Context, id string, params *PostTaxRatesIdParams, body PostTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesIdResponse, error)

	// PostTaxRatesIdRulesWithBodyWithResponse request with any body
	PostTaxRatesIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesIdRulesResponse, error)

	PostTaxRatesIdRulesWithResponse(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, body PostTaxRatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesIdRulesResponse, error)

	// DeleteTaxRatesIdRulesRuleIdWithBodyWithResponse request with any body
	DeleteTaxRatesIdRulesRuleIdWithBodyWithResponse(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdRulesRuleIdResponse, error)

	DeleteTaxRatesIdRulesRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, body DeleteTaxRatesIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdRulesRuleIdResponse, error)

	// GetTaxRegionsWithBodyWithResponse request with any body
	GetTaxRegionsWithBodyWithResponse(ctx context.Context, params *GetTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRegionsResponse, error)

	GetTaxRegionsWithResponse(ctx context.Context, params *GetTaxRegionsParams, body GetTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRegionsResponse, error)

	// PostTaxRegionsWithBodyWithResponse request with any body
	PostTaxRegionsWithBodyWithResponse(ctx context.Context, params *PostTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRegionsResponse, error)

	PostTaxRegionsWithResponse(ctx context.Context, params *PostTaxRegionsParams, body PostTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRegionsResponse, error)

	// DeleteTaxRegionsIdWithBodyWithResponse request with any body
	DeleteTaxRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTaxRegionsIdResponse, error)

	DeleteTaxRegionsIdWithResponse(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, body DeleteTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTaxRegionsIdResponse, error)

	// GetTaxRegionsIdWithBodyWithResponse request with any body
	GetTaxRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRegionsIdResponse, error)

	GetTaxRegionsIdWithResponse(ctx context.Context, id string, params *GetTaxRegionsIdParams, body GetTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRegionsIdResponse, error)

	// PostUploadsWithBodyWithResponse request with any body
	PostUploadsWithBodyWithResponse(ctx context.Context, params *PostUploadsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadsResponse, error)

	PostUploadsWithResponse(ctx context.Context, params *PostUploadsParams, body PostUploadsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUploadsResponse, error)

	// DeleteUploadsIdWithBodyWithResponse request with any body
	DeleteUploadsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUploadsIdResponse, error)

	DeleteUploadsIdWithResponse(ctx context.Context, id string, params *DeleteUploadsIdParams, body DeleteUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUploadsIdResponse, error)

	// GetUploadsIdWithBodyWithResponse request with any body
	GetUploadsIdWithBodyWithResponse(ctx context.Context, id string, params *GetUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadsIdResponse, error)

	GetUploadsIdWithResponse(ctx context.Context, id string, params *GetUploadsIdParams, body GetUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadsIdResponse, error)

	// GetUsersWithBodyWithResponse request with any body
	GetUsersWithBodyWithResponse(ctx context.Context, params *GetUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsersWithBodyWithResponse request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// GetUsersMeWithBodyWithResponse request with any body
	GetUsersMeWithBodyWithResponse(ctx context.Context, params *GetUsersMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	GetUsersMeWithResponse(ctx context.Context, params *GetUsersMeParams, body GetUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// DeleteUsersIdWithBodyWithResponse request with any body
	DeleteUsersIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUsersIdResponse, error)

	DeleteUsersIdWithResponse(ctx context.Context, id string, params *DeleteUsersIdParams, body DeleteUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUsersIdResponse, error)

	// GetUsersIdWithBodyWithResponse request with any body
	GetUsersIdWithBodyWithResponse(ctx context.Context, id string, params *GetUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	GetUsersIdWithResponse(ctx context.Context, id string, params *GetUsersIdParams, body GetUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// PostUsersIdWithBodyWithResponse request with any body
	PostUsersIdWithBodyWithResponse(ctx context.Context, id string, params *PostUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersIdResponse, error)

	PostUsersIdWithResponse(ctx context.Context, id string, params *PostUsersIdParams, body PostUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersIdResponse, error)

	// GetWorkflowsExecutionsWithBodyWithResponse request with any body
	GetWorkflowsExecutionsWithBodyWithResponse(ctx context.Context, params *GetWorkflowsExecutionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsResponse, error)

	GetWorkflowsExecutionsWithResponse(ctx context.Context, params *GetWorkflowsExecutionsParams, body GetWorkflowsExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsResponse, error)

	// GetWorkflowsExecutionsIdWithBodyWithResponse request with any body
	GetWorkflowsExecutionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsIdResponse, error)

	GetWorkflowsExecutionsIdWithResponse(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, body GetWorkflowsExecutionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsIdResponse, error)

	// PostWorkflowsExecutionsWorkflowIdRunWithBodyWithResponse request with any body
	PostWorkflowsExecutionsWorkflowIdRunWithBodyWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdRunResponse, error)

	PostWorkflowsExecutionsWorkflowIdRunWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, body PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdRunResponse, error)

	// PostWorkflowsExecutionsWorkflowIdStepsFailureWithBodyWithResponse request with any body
	PostWorkflowsExecutionsWorkflowIdStepsFailureWithBodyWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsFailureResponse, error)

	PostWorkflowsExecutionsWorkflowIdStepsFailureWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, body PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsFailureResponse, error)

	// PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBodyWithResponse request with any body
	PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBodyWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse, error)

	PostWorkflowsExecutionsWorkflowIdStepsSuccessWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, body PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse, error)

	// GetWorkflowsExecutionsWorkflowIdSubscribeWithBodyWithResponse request with any body
	GetWorkflowsExecutionsWorkflowIdSubscribeWithBodyWithResponse(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdSubscribeResponse, error)

	GetWorkflowsExecutionsWorkflowIdSubscribeWithResponse(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdSubscribeResponse, error)

	// GetWorkflowsExecutionsWorkflowIdTransactionIdWithBodyWithResponse request with any body
	GetWorkflowsExecutionsWorkflowIdTransactionIdWithBodyWithResponse(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdResponse, error)

	GetWorkflowsExecutionsWorkflowIdTransactionIdWithResponse(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdResponse, error)

	// GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBodyWithResponse request with any body
	GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBodyWithResponse(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse, error)

	GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithResponse(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse, error)
}

type GetApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetApiKeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostApiKeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKeysIdRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostApiKeysIdRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKeysIdRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKeysIdSalesChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostApiKeysIdSalesChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKeysIdSalesChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsIdProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCollectionsIdProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsIdProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrenciesCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCurrenciesCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrenciesCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCustomerGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomerGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomerGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteCustomerGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomerGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCustomerGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomerGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerGroupsIdCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomerGroupsIdCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerGroupsIdCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminCustomerListResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminCustomerResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminCustomerResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminCustomerResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersIdAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomersIdAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersIdAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomersIdAddressesAddressIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteCustomersIdAddressesAddressIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomersIdAddressesAddressIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdAddressesAddressIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdAddressesAddressIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdAddressesAddressIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersIdAddressesAddressIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostCustomersIdAddressesAddressIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersIdAddressesAddressIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDraftOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetDraftOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDraftOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDraftOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostDraftOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDraftOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDraftOrdersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetDraftOrdersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDraftOrdersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFulfillmentProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetFulfillmentProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFulfillmentProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFulfillmentSetsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminFulfillmentSetsDeleteResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteFulfillmentSetsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFulfillmentSetsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFulfillmentSetsIdServiceZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostFulfillmentSetsIdServiceZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFulfillmentSetsIdServiceZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFulfillmentSetsIdServiceZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminServiceZoneDeleteResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteFulfillmentSetsIdServiceZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFulfillmentSetsIdServiceZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFulfillmentSetsIdServiceZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminServiceZoneResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetFulfillmentSetsIdServiceZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFulfillmentSetsIdServiceZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFulfillmentSetsIdServiceZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminFulfillmentSetResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostFulfillmentSetsIdServiceZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFulfillmentSetsIdServiceZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFulfillmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostFulfillmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFulfillmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFulfillmentsIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostFulfillmentsIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFulfillmentsIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFulfillmentsIdShipmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostFulfillmentsIdShipmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFulfillmentsIdShipmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetInventoryItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInventoryItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInventoryItemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteInventoryItemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInventoryItemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryItemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetInventoryItemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryItemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryItemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInventoryItemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryItemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryItemsIdLocationLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetInventoryItemsIdLocationLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryItemsIdLocationLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryItemsIdLocationLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInventoryItemsIdLocationLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryItemsIdLocationLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryItemsIdLocationLevelsBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInventoryItemsIdLocationLevelsBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryItemsIdLocationLevelsBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInventoryItemsIdLocationLevelsLocationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteInventoryItemsIdLocationLevelsLocationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInventoryItemsIdLocationLevelsLocationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryItemsIdLocationLevelsLocationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInventoryItemsIdLocationLevelsLocationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryItemsIdLocationLevelsLocationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetInvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvitesAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInvitesAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvitesAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvitesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteInvitesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvitesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvitesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetInvitesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvitesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvitesIdResendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostInvitesIdResendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvitesIdResendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetOrdersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsPaymentProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPaymentsPaymentProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsPaymentProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPaymentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPaymentsIdCaptureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPaymentsIdCaptureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPaymentsIdCaptureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPaymentsIdRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPaymentsIdRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPaymentsIdRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPriceListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPriceListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPriceListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPriceListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPriceListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPriceListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePriceListsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeletePriceListsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePriceListsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPriceListsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPriceListsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPriceListsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPriceListsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPriceListsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPriceListsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPriceListsIdPricesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPriceListsIdPricesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPriceListsIdPricesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPriceListsIdProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPriceListsIdProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPriceListsIdProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingRuleTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPricingRuleTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingRuleTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPricingRuleTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPricingRuleTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPricingRuleTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePricingRuleTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeletePricingRuleTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePricingRuleTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingRuleTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPricingRuleTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingRuleTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPricingRuleTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPricingRuleTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPricingRuleTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminProductCategoryListResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminProductCategoryResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductCategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminProductCategoryResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductCategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductCategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductCategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminProductCategoryResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductCategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductCategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductCategoriesIdProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminProductCategoryResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductCategoriesIdProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductCategoriesIdProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteProductTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteProductsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductsIdOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsIdOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsIdOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsIdOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductsIdOptionsOptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteProductsIdOptionsOptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductsIdOptionsOptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdOptionsOptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductsIdOptionsOptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdOptionsOptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsIdOptionsOptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsIdOptionsOptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsIdOptionsOptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductsIdVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsIdVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsIdVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsIdVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsIdVariantsBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsIdVariantsBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsIdVariantsBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductsIdVariantsVariantIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteProductsIdVariantsVariantIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductsIdVariantsVariantIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdVariantsVariantIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetProductsIdVariantsVariantIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdVariantsVariantIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsIdVariantsVariantIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostProductsIdVariantsVariantIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsIdVariantsVariantIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPromotionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPromotionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPromotionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPromotionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionsRuleAttributeOptionsRuleTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPromotionsRuleAttributeOptionsRuleTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionsRuleAttributeOptionsRuleTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionsRuleOperatorOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPromotionsRuleOperatorOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionsRuleOperatorOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePromotionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeletePromotionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePromotionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPromotionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPromotionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPromotionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPromotionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPromotionsIdBuyRulesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPromotionsIdBuyRulesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPromotionsIdBuyRulesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPromotionsIdRulesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPromotionsIdRulesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPromotionsIdRulesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPromotionsIdTargetRulesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostPromotionsIdTargetRulesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPromotionsIdTargetRulesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionsIdRuleTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetPromotionsIdRuleTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionsIdRuleTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRegionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteRegionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRegionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetRegionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostRegionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetSalesChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostSalesChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSalesChannelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteSalesChannelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSalesChannelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesChannelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetSalesChannelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesChannelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesChannelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostSalesChannelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesChannelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesChannelsIdProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostSalesChannelsIdProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesChannelsIdProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShippingOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingOptionListResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetShippingOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShippingOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShippingOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingOptionRetrieveResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostShippingOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShippingOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShippingOptionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingOptionDeleteResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteShippingOptionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShippingOptionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShippingOptionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingOptionRetrieveResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostShippingOptionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShippingOptionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShippingOptionsIdRulesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostShippingOptionsIdRulesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShippingOptionsIdRulesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShippingProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingProfilesResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetShippingProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShippingProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShippingProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingProfileResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostShippingProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShippingProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShippingProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingProfileDeleteResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteShippingProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShippingProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShippingProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminShippingProfileResponse
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetShippingProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShippingProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStockLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetStockLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStockLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStockLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostStockLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStockLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStockLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteStockLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStockLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStockLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetStockLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStockLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStockLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostStockLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStockLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStockLocationsIdFulfillmentSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostStockLocationsIdFulfillmentSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStockLocationsIdFulfillmentSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStockLocationsIdSalesChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostStockLocationsIdSalesChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStockLocationsIdSalesChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetStoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoresIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetStoresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStoresIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostStoresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStoresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxRatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteTaxRatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxRatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetTaxRatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostTaxRatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRatesIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostTaxRatesIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRatesIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxRatesIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteTaxRatesIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxRatesIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetTaxRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostTaxRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxRegionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteTaxRegionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxRegionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRegionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetTaxRegionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRegionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostUploadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUploadsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteUploadsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUploadsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUploadsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetUploadsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUploadsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r DeleteUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsExecutionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsExecutionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsExecutionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsExecutionsWorkflowIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsExecutionsWorkflowIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsExecutionsWorkflowIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsExecutionsWorkflowIdStepsFailureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsExecutionsWorkflowIdStepsFailureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsExecutionsWorkflowIdStepsFailureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsExecutionsWorkflowIdSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsExecutionsWorkflowIdSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsExecutionsWorkflowIdSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsExecutionsWorkflowIdTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsExecutionsWorkflowIdTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsExecutionsWorkflowIdTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400Error
	JSON404      *NotFoundError
	JSON409      *InvalidStateError
	JSON422      *InvalidRequestError
	JSON500      *N500Error
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiKeysWithBodyWithResponse request with arbitrary body returning *GetApiKeysResponse
func (c *ClientWithResponses) GetApiKeysWithBodyWithResponse(ctx context.Context, params *GetApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error) {
	rsp, err := c.GetApiKeysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysResponse(rsp)
}

func (c *ClientWithResponses) GetApiKeysWithResponse(ctx context.Context, params *GetApiKeysParams, body GetApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error) {
	rsp, err := c.GetApiKeys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysResponse(rsp)
}

// PostApiKeysWithBodyWithResponse request with arbitrary body returning *PostApiKeysResponse
func (c *ClientWithResponses) PostApiKeysWithBodyWithResponse(ctx context.Context, params *PostApiKeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysResponse, error) {
	rsp, err := c.PostApiKeysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysResponse(rsp)
}

func (c *ClientWithResponses) PostApiKeysWithResponse(ctx context.Context, params *PostApiKeysParams, body PostApiKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysResponse, error) {
	rsp, err := c.PostApiKeys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysResponse(rsp)
}

// DeleteApiKeysIdWithBodyWithResponse request with arbitrary body returning *DeleteApiKeysIdResponse
func (c *ClientWithResponses) DeleteApiKeysIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiKeysIdResponse, error) {
	rsp, err := c.DeleteApiKeysIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeysIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiKeysIdWithResponse(ctx context.Context, id string, params *DeleteApiKeysIdParams, body DeleteApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiKeysIdResponse, error) {
	rsp, err := c.DeleteApiKeysId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeysIdResponse(rsp)
}

// GetApiKeysIdWithBodyWithResponse request with arbitrary body returning *GetApiKeysIdResponse
func (c *ClientWithResponses) GetApiKeysIdWithBodyWithResponse(ctx context.Context, id string, params *GetApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiKeysIdResponse, error) {
	rsp, err := c.GetApiKeysIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysIdResponse(rsp)
}

func (c *ClientWithResponses) GetApiKeysIdWithResponse(ctx context.Context, id string, params *GetApiKeysIdParams, body GetApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiKeysIdResponse, error) {
	rsp, err := c.GetApiKeysId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysIdResponse(rsp)
}

// PostApiKeysIdWithBodyWithResponse request with arbitrary body returning *PostApiKeysIdResponse
func (c *ClientWithResponses) PostApiKeysIdWithBodyWithResponse(ctx context.Context, id string, params *PostApiKeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysIdResponse, error) {
	rsp, err := c.PostApiKeysIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiKeysIdWithResponse(ctx context.Context, id string, params *PostApiKeysIdParams, body PostApiKeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysIdResponse, error) {
	rsp, err := c.PostApiKeysId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysIdResponse(rsp)
}

// PostApiKeysIdRevokeWithBodyWithResponse request with arbitrary body returning *PostApiKeysIdRevokeResponse
func (c *ClientWithResponses) PostApiKeysIdRevokeWithBodyWithResponse(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysIdRevokeResponse, error) {
	rsp, err := c.PostApiKeysIdRevokeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysIdRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostApiKeysIdRevokeWithResponse(ctx context.Context, id string, params *PostApiKeysIdRevokeParams, body PostApiKeysIdRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysIdRevokeResponse, error) {
	rsp, err := c.PostApiKeysIdRevoke(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysIdRevokeResponse(rsp)
}

// PostApiKeysIdSalesChannelsWithBodyWithResponse request with arbitrary body returning *PostApiKeysIdSalesChannelsResponse
func (c *ClientWithResponses) PostApiKeysIdSalesChannelsWithBodyWithResponse(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeysIdSalesChannelsResponse, error) {
	rsp, err := c.PostApiKeysIdSalesChannelsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysIdSalesChannelsResponse(rsp)
}

func (c *ClientWithResponses) PostApiKeysIdSalesChannelsWithResponse(ctx context.Context, id string, params *PostApiKeysIdSalesChannelsParams, body PostApiKeysIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeysIdSalesChannelsResponse, error) {
	rsp, err := c.PostApiKeysIdSalesChannels(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeysIdSalesChannelsResponse(rsp)
}

// GetCampaignsWithBodyWithResponse request with arbitrary body returning *GetCampaignsResponse
func (c *ClientWithResponses) GetCampaignsWithBodyWithResponse(ctx context.Context, params *GetCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error) {
	rsp, err := c.GetCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsResponse(rsp)
}

func (c *ClientWithResponses) GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, body GetCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error) {
	rsp, err := c.GetCampaigns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsResponse(rsp)
}

// PostCampaignsWithBodyWithResponse request with arbitrary body returning *PostCampaignsResponse
func (c *ClientWithResponses) PostCampaignsWithBodyWithResponse(ctx context.Context, params *PostCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error) {
	rsp, err := c.PostCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsResponse(rsp)
}

func (c *ClientWithResponses) PostCampaignsWithResponse(ctx context.Context, params *PostCampaignsParams, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error) {
	rsp, err := c.PostCampaigns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsResponse(rsp)
}

// DeleteCampaignsIdWithBodyWithResponse request with arbitrary body returning *DeleteCampaignsIdResponse
func (c *ClientWithResponses) DeleteCampaignsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error) {
	rsp, err := c.DeleteCampaignsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaignsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCampaignsIdWithResponse(ctx context.Context, id string, params *DeleteCampaignsIdParams, body DeleteCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error) {
	rsp, err := c.DeleteCampaignsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaignsIdResponse(rsp)
}

// GetCampaignsIdWithBodyWithResponse request with arbitrary body returning *GetCampaignsIdResponse
func (c *ClientWithResponses) GetCampaignsIdWithBodyWithResponse(ctx context.Context, id string, params *GetCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error) {
	rsp, err := c.GetCampaignsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsIdResponse(rsp)
}

func (c *ClientWithResponses) GetCampaignsIdWithResponse(ctx context.Context, id string, params *GetCampaignsIdParams, body GetCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error) {
	rsp, err := c.GetCampaignsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsIdResponse(rsp)
}

// PostCampaignsIdWithBodyWithResponse request with arbitrary body returning *PostCampaignsIdResponse
func (c *ClientWithResponses) PostCampaignsIdWithBodyWithResponse(ctx context.Context, id string, params *PostCampaignsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsIdResponse, error) {
	rsp, err := c.PostCampaignsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsIdResponse(rsp)
}

func (c *ClientWithResponses) PostCampaignsIdWithResponse(ctx context.Context, id string, params *PostCampaignsIdParams, body PostCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsIdResponse, error) {
	rsp, err := c.PostCampaignsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsIdResponse(rsp)
}

// GetCollectionsWithBodyWithResponse request with arbitrary body returning *GetCollectionsResponse
func (c *ClientWithResponses) GetCollectionsWithBodyWithResponse(ctx context.Context, params *GetCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollectionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

func (c *ClientWithResponses) GetCollectionsWithResponse(ctx context.Context, params *GetCollectionsParams, body GetCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollections(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

// PostCollectionsWithBodyWithResponse request with arbitrary body returning *PostCollectionsResponse
func (c *ClientWithResponses) PostCollectionsWithBodyWithResponse(ctx context.Context, params *PostCollectionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error) {
	rsp, err := c.PostCollectionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsWithResponse(ctx context.Context, params *PostCollectionsParams, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error) {
	rsp, err := c.PostCollections(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsResponse(rsp)
}

// DeleteCollectionsIdWithBodyWithResponse request with arbitrary body returning *DeleteCollectionsIdResponse
func (c *ClientWithResponses) DeleteCollectionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCollectionsIdResponse, error) {
	rsp, err := c.DeleteCollectionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCollectionsIdWithResponse(ctx context.Context, id string, params *DeleteCollectionsIdParams, body DeleteCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCollectionsIdResponse, error) {
	rsp, err := c.DeleteCollectionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionsIdResponse(rsp)
}

// GetCollectionsIdWithBodyWithResponse request with arbitrary body returning *GetCollectionsIdResponse
func (c *ClientWithResponses) GetCollectionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCollectionsIdResponse, error) {
	rsp, err := c.GetCollectionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsIdResponse(rsp)
}

func (c *ClientWithResponses) GetCollectionsIdWithResponse(ctx context.Context, id string, params *GetCollectionsIdParams, body GetCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCollectionsIdResponse, error) {
	rsp, err := c.GetCollectionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsIdResponse(rsp)
}

// PostCollectionsIdWithBodyWithResponse request with arbitrary body returning *PostCollectionsIdResponse
func (c *ClientWithResponses) PostCollectionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostCollectionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsIdResponse, error) {
	rsp, err := c.PostCollectionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsIdResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsIdWithResponse(ctx context.Context, id string, params *PostCollectionsIdParams, body PostCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsIdResponse, error) {
	rsp, err := c.PostCollectionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsIdResponse(rsp)
}

// PostCollectionsIdProductsWithBodyWithResponse request with arbitrary body returning *PostCollectionsIdProductsResponse
func (c *ClientWithResponses) PostCollectionsIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostCollectionsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsIdProductsResponse, error) {
	rsp, err := c.PostCollectionsIdProductsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsIdProductsResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsIdProductsWithResponse(ctx context.Context, id string, params *PostCollectionsIdProductsParams, body PostCollectionsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsIdProductsResponse, error) {
	rsp, err := c.PostCollectionsIdProducts(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsIdProductsResponse(rsp)
}

// GetCurrenciesWithBodyWithResponse request with arbitrary body returning *GetCurrenciesResponse
func (c *ClientWithResponses) GetCurrenciesWithBodyWithResponse(ctx context.Context, params *GetCurrenciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error) {
	rsp, err := c.GetCurrenciesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesResponse(rsp)
}

func (c *ClientWithResponses) GetCurrenciesWithResponse(ctx context.Context, params *GetCurrenciesParams, body GetCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error) {
	rsp, err := c.GetCurrencies(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesResponse(rsp)
}

// GetCurrenciesCodeWithBodyWithResponse request with arbitrary body returning *GetCurrenciesCodeResponse
func (c *ClientWithResponses) GetCurrenciesCodeWithBodyWithResponse(ctx context.Context, code string, params *GetCurrenciesCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCurrenciesCodeResponse, error) {
	rsp, err := c.GetCurrenciesCodeWithBody(ctx, code, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesCodeResponse(rsp)
}

func (c *ClientWithResponses) GetCurrenciesCodeWithResponse(ctx context.Context, code string, params *GetCurrenciesCodeParams, body GetCurrenciesCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCurrenciesCodeResponse, error) {
	rsp, err := c.GetCurrenciesCode(ctx, code, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesCodeResponse(rsp)
}

// GetCustomerGroupsWithBodyWithResponse request with arbitrary body returning *GetCustomerGroupsResponse
func (c *ClientWithResponses) GetCustomerGroupsWithBodyWithResponse(ctx context.Context, params *GetCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomerGroupsResponse, error) {
	rsp, err := c.GetCustomerGroupsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerGroupsResponse(rsp)
}

func (c *ClientWithResponses) GetCustomerGroupsWithResponse(ctx context.Context, params *GetCustomerGroupsParams, body GetCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomerGroupsResponse, error) {
	rsp, err := c.GetCustomerGroups(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerGroupsResponse(rsp)
}

// PostCustomerGroupsWithBodyWithResponse request with arbitrary body returning *PostCustomerGroupsResponse
func (c *ClientWithResponses) PostCustomerGroupsWithBodyWithResponse(ctx context.Context, params *PostCustomerGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerGroupsResponse, error) {
	rsp, err := c.PostCustomerGroupsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerGroupsWithResponse(ctx context.Context, params *PostCustomerGroupsParams, body PostCustomerGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerGroupsResponse, error) {
	rsp, err := c.PostCustomerGroups(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerGroupsResponse(rsp)
}

// DeleteCustomerGroupsIdWithBodyWithResponse request with arbitrary body returning *DeleteCustomerGroupsIdResponse
func (c *ClientWithResponses) DeleteCustomerGroupsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomerGroupsIdResponse, error) {
	rsp, err := c.DeleteCustomerGroupsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomerGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCustomerGroupsIdWithResponse(ctx context.Context, id string, params *DeleteCustomerGroupsIdParams, body DeleteCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomerGroupsIdResponse, error) {
	rsp, err := c.DeleteCustomerGroupsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomerGroupsIdResponse(rsp)
}

// GetCustomerGroupsIdWithBodyWithResponse request with arbitrary body returning *GetCustomerGroupsIdResponse
func (c *ClientWithResponses) GetCustomerGroupsIdWithBodyWithResponse(ctx context.Context, id string, params *GetCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomerGroupsIdResponse, error) {
	rsp, err := c.GetCustomerGroupsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) GetCustomerGroupsIdWithResponse(ctx context.Context, id string, params *GetCustomerGroupsIdParams, body GetCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomerGroupsIdResponse, error) {
	rsp, err := c.GetCustomerGroupsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerGroupsIdResponse(rsp)
}

// PostCustomerGroupsIdWithBodyWithResponse request with arbitrary body returning *PostCustomerGroupsIdResponse
func (c *ClientWithResponses) PostCustomerGroupsIdWithBodyWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdResponse, error) {
	rsp, err := c.PostCustomerGroupsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerGroupsIdWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdParams, body PostCustomerGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdResponse, error) {
	rsp, err := c.PostCustomerGroupsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerGroupsIdResponse(rsp)
}

// PostCustomerGroupsIdCustomersWithBodyWithResponse request with arbitrary body returning *PostCustomerGroupsIdCustomersResponse
func (c *ClientWithResponses) PostCustomerGroupsIdCustomersWithBodyWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdCustomersResponse, error) {
	rsp, err := c.PostCustomerGroupsIdCustomersWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerGroupsIdCustomersResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerGroupsIdCustomersWithResponse(ctx context.Context, id string, params *PostCustomerGroupsIdCustomersParams, body PostCustomerGroupsIdCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerGroupsIdCustomersResponse, error) {
	rsp, err := c.PostCustomerGroupsIdCustomers(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerGroupsIdCustomersResponse(rsp)
}

// GetCustomersWithBodyWithResponse request with arbitrary body returning *GetCustomersResponse
func (c *ClientWithResponses) GetCustomersWithBodyWithResponse(ctx context.Context, params *GetCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

func (c *ClientWithResponses) GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, body GetCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

// PostCustomersWithBodyWithResponse request with arbitrary body returning *PostCustomersResponse
func (c *ClientWithResponses) PostCustomersWithBodyWithResponse(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersWithResponse(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

// DeleteCustomersIdWithBodyWithResponse request with arbitrary body returning *DeleteCustomersIdResponse
func (c *ClientWithResponses) DeleteCustomersIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error) {
	rsp, err := c.DeleteCustomersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCustomersIdWithResponse(ctx context.Context, id string, params *DeleteCustomersIdParams, body DeleteCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error) {
	rsp, err := c.DeleteCustomersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdResponse(rsp)
}

// GetCustomersIdWithBodyWithResponse request with arbitrary body returning *GetCustomersIdResponse
func (c *ClientWithResponses) GetCustomersIdWithBodyWithResponse(ctx context.Context, id string, params *GetCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error) {
	rsp, err := c.GetCustomersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) GetCustomersIdWithResponse(ctx context.Context, id string, params *GetCustomersIdParams, body GetCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error) {
	rsp, err := c.GetCustomersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdResponse(rsp)
}

// PostCustomersIdWithBodyWithResponse request with arbitrary body returning *PostCustomersIdResponse
func (c *ClientWithResponses) PostCustomersIdWithBodyWithResponse(ctx context.Context, id string, params *PostCustomersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersIdResponse, error) {
	rsp, err := c.PostCustomersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersIdWithResponse(ctx context.Context, id string, params *PostCustomersIdParams, body PostCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersIdResponse, error) {
	rsp, err := c.PostCustomersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdResponse(rsp)
}

// GetCustomersIdAddressesWithBodyWithResponse request with arbitrary body returning *GetCustomersIdAddressesResponse
func (c *ClientWithResponses) GetCustomersIdAddressesWithBodyWithResponse(ctx context.Context, id string, params *GetCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesResponse, error) {
	rsp, err := c.GetCustomersIdAddressesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdAddressesResponse(rsp)
}

func (c *ClientWithResponses) GetCustomersIdAddressesWithResponse(ctx context.Context, id string, params *GetCustomersIdAddressesParams, body GetCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesResponse, error) {
	rsp, err := c.GetCustomersIdAddresses(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdAddressesResponse(rsp)
}

// PostCustomersIdAddressesWithBodyWithResponse request with arbitrary body returning *PostCustomersIdAddressesResponse
func (c *ClientWithResponses) PostCustomersIdAddressesWithBodyWithResponse(ctx context.Context, id string, params *PostCustomersIdAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesResponse, error) {
	rsp, err := c.PostCustomersIdAddressesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdAddressesResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersIdAddressesWithResponse(ctx context.Context, id string, params *PostCustomersIdAddressesParams, body PostCustomersIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesResponse, error) {
	rsp, err := c.PostCustomersIdAddresses(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdAddressesResponse(rsp)
}

// DeleteCustomersIdAddressesAddressIdWithBodyWithResponse request with arbitrary body returning *DeleteCustomersIdAddressesAddressIdResponse
func (c *ClientWithResponses) DeleteCustomersIdAddressesAddressIdWithBodyWithResponse(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomersIdAddressesAddressIdResponse, error) {
	rsp, err := c.DeleteCustomersIdAddressesAddressIdWithBody(ctx, id, addressId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdAddressesAddressIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCustomersIdAddressesAddressIdWithResponse(ctx context.Context, id string, addressId string, params *DeleteCustomersIdAddressesAddressIdParams, body DeleteCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomersIdAddressesAddressIdResponse, error) {
	rsp, err := c.DeleteCustomersIdAddressesAddressId(ctx, id, addressId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdAddressesAddressIdResponse(rsp)
}

// GetCustomersIdAddressesAddressIdWithBodyWithResponse request with arbitrary body returning *GetCustomersIdAddressesAddressIdResponse
func (c *ClientWithResponses) GetCustomersIdAddressesAddressIdWithBodyWithResponse(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesAddressIdResponse, error) {
	rsp, err := c.GetCustomersIdAddressesAddressIdWithBody(ctx, id, addressId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdAddressesAddressIdResponse(rsp)
}

func (c *ClientWithResponses) GetCustomersIdAddressesAddressIdWithResponse(ctx context.Context, id string, addressId string, params *GetCustomersIdAddressesAddressIdParams, body GetCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomersIdAddressesAddressIdResponse, error) {
	rsp, err := c.GetCustomersIdAddressesAddressId(ctx, id, addressId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdAddressesAddressIdResponse(rsp)
}

// PostCustomersIdAddressesAddressIdWithBodyWithResponse request with arbitrary body returning *PostCustomersIdAddressesAddressIdResponse
func (c *ClientWithResponses) PostCustomersIdAddressesAddressIdWithBodyWithResponse(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesAddressIdResponse, error) {
	rsp, err := c.PostCustomersIdAddressesAddressIdWithBody(ctx, id, addressId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdAddressesAddressIdResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersIdAddressesAddressIdWithResponse(ctx context.Context, id string, addressId string, params *PostCustomersIdAddressesAddressIdParams, body PostCustomersIdAddressesAddressIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersIdAddressesAddressIdResponse, error) {
	rsp, err := c.PostCustomersIdAddressesAddressId(ctx, id, addressId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdAddressesAddressIdResponse(rsp)
}

// GetDraftOrdersWithBodyWithResponse request with arbitrary body returning *GetDraftOrdersResponse
func (c *ClientWithResponses) GetDraftOrdersWithBodyWithResponse(ctx context.Context, params *GetDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDraftOrdersResponse, error) {
	rsp, err := c.GetDraftOrdersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDraftOrdersResponse(rsp)
}

func (c *ClientWithResponses) GetDraftOrdersWithResponse(ctx context.Context, params *GetDraftOrdersParams, body GetDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDraftOrdersResponse, error) {
	rsp, err := c.GetDraftOrders(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDraftOrdersResponse(rsp)
}

// PostDraftOrdersWithBodyWithResponse request with arbitrary body returning *PostDraftOrdersResponse
func (c *ClientWithResponses) PostDraftOrdersWithBodyWithResponse(ctx context.Context, params *PostDraftOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDraftOrdersResponse, error) {
	rsp, err := c.PostDraftOrdersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDraftOrdersResponse(rsp)
}

func (c *ClientWithResponses) PostDraftOrdersWithResponse(ctx context.Context, params *PostDraftOrdersParams, body PostDraftOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDraftOrdersResponse, error) {
	rsp, err := c.PostDraftOrders(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDraftOrdersResponse(rsp)
}

// GetDraftOrdersIdWithBodyWithResponse request with arbitrary body returning *GetDraftOrdersIdResponse
func (c *ClientWithResponses) GetDraftOrdersIdWithBodyWithResponse(ctx context.Context, id string, params *GetDraftOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDraftOrdersIdResponse, error) {
	rsp, err := c.GetDraftOrdersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDraftOrdersIdResponse(rsp)
}

func (c *ClientWithResponses) GetDraftOrdersIdWithResponse(ctx context.Context, id string, params *GetDraftOrdersIdParams, body GetDraftOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDraftOrdersIdResponse, error) {
	rsp, err := c.GetDraftOrdersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDraftOrdersIdResponse(rsp)
}

// GetFulfillmentProvidersWithBodyWithResponse request with arbitrary body returning *GetFulfillmentProvidersResponse
func (c *ClientWithResponses) GetFulfillmentProvidersWithBodyWithResponse(ctx context.Context, params *GetFulfillmentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFulfillmentProvidersResponse, error) {
	rsp, err := c.GetFulfillmentProvidersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentProvidersResponse(rsp)
}

func (c *ClientWithResponses) GetFulfillmentProvidersWithResponse(ctx context.Context, params *GetFulfillmentProvidersParams, body GetFulfillmentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFulfillmentProvidersResponse, error) {
	rsp, err := c.GetFulfillmentProviders(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentProvidersResponse(rsp)
}

// DeleteFulfillmentSetsIdWithBodyWithResponse request with arbitrary body returning *DeleteFulfillmentSetsIdResponse
func (c *ClientWithResponses) DeleteFulfillmentSetsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdResponse, error) {
	rsp, err := c.DeleteFulfillmentSetsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFulfillmentSetsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteFulfillmentSetsIdWithResponse(ctx context.Context, id string, params *DeleteFulfillmentSetsIdParams, body DeleteFulfillmentSetsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdResponse, error) {
	rsp, err := c.DeleteFulfillmentSetsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFulfillmentSetsIdResponse(rsp)
}

// PostFulfillmentSetsIdServiceZonesWithBodyWithResponse request with arbitrary body returning *PostFulfillmentSetsIdServiceZonesResponse
func (c *ClientWithResponses) PostFulfillmentSetsIdServiceZonesWithBodyWithResponse(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesResponse, error) {
	rsp, err := c.PostFulfillmentSetsIdServiceZonesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentSetsIdServiceZonesResponse(rsp)
}

func (c *ClientWithResponses) PostFulfillmentSetsIdServiceZonesWithResponse(ctx context.Context, id string, params *PostFulfillmentSetsIdServiceZonesParams, body PostFulfillmentSetsIdServiceZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesResponse, error) {
	rsp, err := c.PostFulfillmentSetsIdServiceZones(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentSetsIdServiceZonesResponse(rsp)
}

// DeleteFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse request with arbitrary body returning *DeleteFulfillmentSetsIdServiceZonesZoneIdResponse
func (c *ClientWithResponses) DeleteFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	rsp, err := c.DeleteFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx, id, zoneId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFulfillmentSetsIdServiceZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteFulfillmentSetsIdServiceZonesZoneIdWithResponse(ctx context.Context, id string, zoneId string, params *DeleteFulfillmentSetsIdServiceZonesZoneIdParams, body DeleteFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	rsp, err := c.DeleteFulfillmentSetsIdServiceZonesZoneId(ctx, id, zoneId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFulfillmentSetsIdServiceZonesZoneIdResponse(rsp)
}

// GetFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse request with arbitrary body returning *GetFulfillmentSetsIdServiceZonesZoneIdResponse
func (c *ClientWithResponses) GetFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	rsp, err := c.GetFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx, id, zoneId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentSetsIdServiceZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) GetFulfillmentSetsIdServiceZonesZoneIdWithResponse(ctx context.Context, id string, zoneId string, params *GetFulfillmentSetsIdServiceZonesZoneIdParams, body GetFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	rsp, err := c.GetFulfillmentSetsIdServiceZonesZoneId(ctx, id, zoneId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentSetsIdServiceZonesZoneIdResponse(rsp)
}

// PostFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse request with arbitrary body returning *PostFulfillmentSetsIdServiceZonesZoneIdResponse
func (c *ClientWithResponses) PostFulfillmentSetsIdServiceZonesZoneIdWithBodyWithResponse(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	rsp, err := c.PostFulfillmentSetsIdServiceZonesZoneIdWithBody(ctx, id, zoneId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentSetsIdServiceZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) PostFulfillmentSetsIdServiceZonesZoneIdWithResponse(ctx context.Context, id string, zoneId string, params *PostFulfillmentSetsIdServiceZonesZoneIdParams, body PostFulfillmentSetsIdServiceZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	rsp, err := c.PostFulfillmentSetsIdServiceZonesZoneId(ctx, id, zoneId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentSetsIdServiceZonesZoneIdResponse(rsp)
}

// PostFulfillmentsWithBodyWithResponse request with arbitrary body returning *PostFulfillmentsResponse
func (c *ClientWithResponses) PostFulfillmentsWithBodyWithResponse(ctx context.Context, params *PostFulfillmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentsResponse, error) {
	rsp, err := c.PostFulfillmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentsResponse(rsp)
}

func (c *ClientWithResponses) PostFulfillmentsWithResponse(ctx context.Context, params *PostFulfillmentsParams, body PostFulfillmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentsResponse, error) {
	rsp, err := c.PostFulfillments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentsResponse(rsp)
}

// PostFulfillmentsIdCancelWithBodyWithResponse request with arbitrary body returning *PostFulfillmentsIdCancelResponse
func (c *ClientWithResponses) PostFulfillmentsIdCancelWithBodyWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdCancelResponse, error) {
	rsp, err := c.PostFulfillmentsIdCancelWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentsIdCancelResponse(rsp)
}

func (c *ClientWithResponses) PostFulfillmentsIdCancelWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdCancelParams, body PostFulfillmentsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdCancelResponse, error) {
	rsp, err := c.PostFulfillmentsIdCancel(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentsIdCancelResponse(rsp)
}

// PostFulfillmentsIdShipmentWithBodyWithResponse request with arbitrary body returning *PostFulfillmentsIdShipmentResponse
func (c *ClientWithResponses) PostFulfillmentsIdShipmentWithBodyWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdShipmentResponse, error) {
	rsp, err := c.PostFulfillmentsIdShipmentWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentsIdShipmentResponse(rsp)
}

func (c *ClientWithResponses) PostFulfillmentsIdShipmentWithResponse(ctx context.Context, id string, params *PostFulfillmentsIdShipmentParams, body PostFulfillmentsIdShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulfillmentsIdShipmentResponse, error) {
	rsp, err := c.PostFulfillmentsIdShipment(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulfillmentsIdShipmentResponse(rsp)
}

// GetInventoryItemsWithBodyWithResponse request with arbitrary body returning *GetInventoryItemsResponse
func (c *ClientWithResponses) GetInventoryItemsWithBodyWithResponse(ctx context.Context, params *GetInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInventoryItemsResponse, error) {
	rsp, err := c.GetInventoryItemsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryItemsResponse(rsp)
}

func (c *ClientWithResponses) GetInventoryItemsWithResponse(ctx context.Context, params *GetInventoryItemsParams, body GetInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInventoryItemsResponse, error) {
	rsp, err := c.GetInventoryItems(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryItemsResponse(rsp)
}

// PostInventoryItemsWithBodyWithResponse request with arbitrary body returning *PostInventoryItemsResponse
func (c *ClientWithResponses) PostInventoryItemsWithBodyWithResponse(ctx context.Context, params *PostInventoryItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsResponse, error) {
	rsp, err := c.PostInventoryItemsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryItemsWithResponse(ctx context.Context, params *PostInventoryItemsParams, body PostInventoryItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsResponse, error) {
	rsp, err := c.PostInventoryItems(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsResponse(rsp)
}

// DeleteInventoryItemsIdWithBodyWithResponse request with arbitrary body returning *DeleteInventoryItemsIdResponse
func (c *ClientWithResponses) DeleteInventoryItemsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdResponse, error) {
	rsp, err := c.DeleteInventoryItemsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInventoryItemsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteInventoryItemsIdWithResponse(ctx context.Context, id string, params *DeleteInventoryItemsIdParams, body DeleteInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdResponse, error) {
	rsp, err := c.DeleteInventoryItemsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInventoryItemsIdResponse(rsp)
}

// GetInventoryItemsIdWithBodyWithResponse request with arbitrary body returning *GetInventoryItemsIdResponse
func (c *ClientWithResponses) GetInventoryItemsIdWithBodyWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdResponse, error) {
	rsp, err := c.GetInventoryItemsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryItemsIdResponse(rsp)
}

func (c *ClientWithResponses) GetInventoryItemsIdWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdParams, body GetInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdResponse, error) {
	rsp, err := c.GetInventoryItemsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryItemsIdResponse(rsp)
}

// PostInventoryItemsIdWithBodyWithResponse request with arbitrary body returning *PostInventoryItemsIdResponse
func (c *ClientWithResponses) PostInventoryItemsIdWithBodyWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdResponse, error) {
	rsp, err := c.PostInventoryItemsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryItemsIdWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdParams, body PostInventoryItemsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdResponse, error) {
	rsp, err := c.PostInventoryItemsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdResponse(rsp)
}

// GetInventoryItemsIdLocationLevelsWithBodyWithResponse request with arbitrary body returning *GetInventoryItemsIdLocationLevelsResponse
func (c *ClientWithResponses) GetInventoryItemsIdLocationLevelsWithBodyWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdLocationLevelsResponse, error) {
	rsp, err := c.GetInventoryItemsIdLocationLevelsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryItemsIdLocationLevelsResponse(rsp)
}

func (c *ClientWithResponses) GetInventoryItemsIdLocationLevelsWithResponse(ctx context.Context, id string, params *GetInventoryItemsIdLocationLevelsParams, body GetInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInventoryItemsIdLocationLevelsResponse, error) {
	rsp, err := c.GetInventoryItemsIdLocationLevels(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryItemsIdLocationLevelsResponse(rsp)
}

// PostInventoryItemsIdLocationLevelsWithBodyWithResponse request with arbitrary body returning *PostInventoryItemsIdLocationLevelsResponse
func (c *ClientWithResponses) PostInventoryItemsIdLocationLevelsWithBodyWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsResponse, error) {
	rsp, err := c.PostInventoryItemsIdLocationLevelsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdLocationLevelsResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryItemsIdLocationLevelsWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsParams, body PostInventoryItemsIdLocationLevelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsResponse, error) {
	rsp, err := c.PostInventoryItemsIdLocationLevels(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdLocationLevelsResponse(rsp)
}

// PostInventoryItemsIdLocationLevelsBatchWithBodyWithResponse request with arbitrary body returning *PostInventoryItemsIdLocationLevelsBatchResponse
func (c *ClientWithResponses) PostInventoryItemsIdLocationLevelsBatchWithBodyWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsBatchResponse, error) {
	rsp, err := c.PostInventoryItemsIdLocationLevelsBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdLocationLevelsBatchResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryItemsIdLocationLevelsBatchWithResponse(ctx context.Context, id string, params *PostInventoryItemsIdLocationLevelsBatchParams, body PostInventoryItemsIdLocationLevelsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsBatchResponse, error) {
	rsp, err := c.PostInventoryItemsIdLocationLevelsBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdLocationLevelsBatchResponse(rsp)
}

// DeleteInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse request with arbitrary body returning *DeleteInventoryItemsIdLocationLevelsLocationIdResponse
func (c *ClientWithResponses) DeleteInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdLocationLevelsLocationIdResponse, error) {
	rsp, err := c.DeleteInventoryItemsIdLocationLevelsLocationIdWithBody(ctx, id, locationId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInventoryItemsIdLocationLevelsLocationIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteInventoryItemsIdLocationLevelsLocationIdWithResponse(ctx context.Context, id string, locationId string, params *DeleteInventoryItemsIdLocationLevelsLocationIdParams, body DeleteInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInventoryItemsIdLocationLevelsLocationIdResponse, error) {
	rsp, err := c.DeleteInventoryItemsIdLocationLevelsLocationId(ctx, id, locationId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInventoryItemsIdLocationLevelsLocationIdResponse(rsp)
}

// PostInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse request with arbitrary body returning *PostInventoryItemsIdLocationLevelsLocationIdResponse
func (c *ClientWithResponses) PostInventoryItemsIdLocationLevelsLocationIdWithBodyWithResponse(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsLocationIdResponse, error) {
	rsp, err := c.PostInventoryItemsIdLocationLevelsLocationIdWithBody(ctx, id, locationId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdLocationLevelsLocationIdResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryItemsIdLocationLevelsLocationIdWithResponse(ctx context.Context, id string, locationId string, params *PostInventoryItemsIdLocationLevelsLocationIdParams, body PostInventoryItemsIdLocationLevelsLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryItemsIdLocationLevelsLocationIdResponse, error) {
	rsp, err := c.PostInventoryItemsIdLocationLevelsLocationId(ctx, id, locationId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryItemsIdLocationLevelsLocationIdResponse(rsp)
}

// GetInvitesWithBodyWithResponse request with arbitrary body returning *GetInvitesResponse
func (c *ClientWithResponses) GetInvitesWithBodyWithResponse(ctx context.Context, params *GetInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInvitesResponse, error) {
	rsp, err := c.GetInvitesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitesResponse(rsp)
}

func (c *ClientWithResponses) GetInvitesWithResponse(ctx context.Context, params *GetInvitesParams, body GetInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInvitesResponse, error) {
	rsp, err := c.GetInvites(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitesResponse(rsp)
}

// PostInvitesWithBodyWithResponse request with arbitrary body returning *PostInvitesResponse
func (c *ClientWithResponses) PostInvitesWithBodyWithResponse(ctx context.Context, params *PostInvitesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitesResponse, error) {
	rsp, err := c.PostInvitesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitesResponse(rsp)
}

func (c *ClientWithResponses) PostInvitesWithResponse(ctx context.Context, params *PostInvitesParams, body PostInvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitesResponse, error) {
	rsp, err := c.PostInvites(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitesResponse(rsp)
}

// PostInvitesAcceptWithBodyWithResponse request with arbitrary body returning *PostInvitesAcceptResponse
func (c *ClientWithResponses) PostInvitesAcceptWithBodyWithResponse(ctx context.Context, params *PostInvitesAcceptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitesAcceptResponse, error) {
	rsp, err := c.PostInvitesAcceptWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitesAcceptResponse(rsp)
}

func (c *ClientWithResponses) PostInvitesAcceptWithResponse(ctx context.Context, params *PostInvitesAcceptParams, body PostInvitesAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitesAcceptResponse, error) {
	rsp, err := c.PostInvitesAccept(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitesAcceptResponse(rsp)
}

// DeleteInvitesIdWithBodyWithResponse request with arbitrary body returning *DeleteInvitesIdResponse
func (c *ClientWithResponses) DeleteInvitesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteInvitesIdResponse, error) {
	rsp, err := c.DeleteInvitesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvitesIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteInvitesIdWithResponse(ctx context.Context, id string, params *DeleteInvitesIdParams, body DeleteInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteInvitesIdResponse, error) {
	rsp, err := c.DeleteInvitesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvitesIdResponse(rsp)
}

// GetInvitesIdWithBodyWithResponse request with arbitrary body returning *GetInvitesIdResponse
func (c *ClientWithResponses) GetInvitesIdWithBodyWithResponse(ctx context.Context, id string, params *GetInvitesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInvitesIdResponse, error) {
	rsp, err := c.GetInvitesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitesIdResponse(rsp)
}

func (c *ClientWithResponses) GetInvitesIdWithResponse(ctx context.Context, id string, params *GetInvitesIdParams, body GetInvitesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInvitesIdResponse, error) {
	rsp, err := c.GetInvitesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitesIdResponse(rsp)
}

// PostInvitesIdResendWithBodyWithResponse request with arbitrary body returning *PostInvitesIdResendResponse
func (c *ClientWithResponses) PostInvitesIdResendWithBodyWithResponse(ctx context.Context, id string, params *PostInvitesIdResendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitesIdResendResponse, error) {
	rsp, err := c.PostInvitesIdResendWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitesIdResendResponse(rsp)
}

func (c *ClientWithResponses) PostInvitesIdResendWithResponse(ctx context.Context, id string, params *PostInvitesIdResendParams, body PostInvitesIdResendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitesIdResendResponse, error) {
	rsp, err := c.PostInvitesIdResend(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitesIdResendResponse(rsp)
}

// GetOrdersWithBodyWithResponse request with arbitrary body returning *GetOrdersResponse
func (c *ClientWithResponses) GetOrdersWithBodyWithResponse(ctx context.Context, params *GetOrdersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error) {
	rsp, err := c.GetOrdersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersResponse(rsp)
}

func (c *ClientWithResponses) GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams, body GetOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error) {
	rsp, err := c.GetOrders(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersResponse(rsp)
}

// GetOrdersIdWithBodyWithResponse request with arbitrary body returning *GetOrdersIdResponse
func (c *ClientWithResponses) GetOrdersIdWithBodyWithResponse(ctx context.Context, id string, params *GetOrdersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrdersIdResponse, error) {
	rsp, err := c.GetOrdersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersIdResponse(rsp)
}

func (c *ClientWithResponses) GetOrdersIdWithResponse(ctx context.Context, id string, params *GetOrdersIdParams, body GetOrdersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrdersIdResponse, error) {
	rsp, err := c.GetOrdersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersIdResponse(rsp)
}

// GetPaymentsWithBodyWithResponse request with arbitrary body returning *GetPaymentsResponse
func (c *ClientWithResponses) GetPaymentsWithBodyWithResponse(ctx context.Context, params *GetPaymentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPaymentsResponse, error) {
	rsp, err := c.GetPaymentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsResponse(rsp)
}

func (c *ClientWithResponses) GetPaymentsWithResponse(ctx context.Context, params *GetPaymentsParams, body GetPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPaymentsResponse, error) {
	rsp, err := c.GetPayments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsResponse(rsp)
}

// GetPaymentsPaymentProvidersWithBodyWithResponse request with arbitrary body returning *GetPaymentsPaymentProvidersResponse
func (c *ClientWithResponses) GetPaymentsPaymentProvidersWithBodyWithResponse(ctx context.Context, params *GetPaymentsPaymentProvidersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPaymentsPaymentProvidersResponse, error) {
	rsp, err := c.GetPaymentsPaymentProvidersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsPaymentProvidersResponse(rsp)
}

func (c *ClientWithResponses) GetPaymentsPaymentProvidersWithResponse(ctx context.Context, params *GetPaymentsPaymentProvidersParams, body GetPaymentsPaymentProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPaymentsPaymentProvidersResponse, error) {
	rsp, err := c.GetPaymentsPaymentProviders(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsPaymentProvidersResponse(rsp)
}

// GetPaymentsIdWithBodyWithResponse request with arbitrary body returning *GetPaymentsIdResponse
func (c *ClientWithResponses) GetPaymentsIdWithBodyWithResponse(ctx context.Context, id string, params *GetPaymentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPaymentsIdResponse, error) {
	rsp, err := c.GetPaymentsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsIdResponse(rsp)
}

func (c *ClientWithResponses) GetPaymentsIdWithResponse(ctx context.Context, id string, params *GetPaymentsIdParams, body GetPaymentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPaymentsIdResponse, error) {
	rsp, err := c.GetPaymentsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsIdResponse(rsp)
}

// PostPaymentsIdCaptureWithBodyWithResponse request with arbitrary body returning *PostPaymentsIdCaptureResponse
func (c *ClientWithResponses) PostPaymentsIdCaptureWithBodyWithResponse(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsIdCaptureResponse, error) {
	rsp, err := c.PostPaymentsIdCaptureWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsIdCaptureResponse(rsp)
}

func (c *ClientWithResponses) PostPaymentsIdCaptureWithResponse(ctx context.Context, id string, params *PostPaymentsIdCaptureParams, body PostPaymentsIdCaptureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsIdCaptureResponse, error) {
	rsp, err := c.PostPaymentsIdCapture(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsIdCaptureResponse(rsp)
}

// PostPaymentsIdRefundWithBodyWithResponse request with arbitrary body returning *PostPaymentsIdRefundResponse
func (c *ClientWithResponses) PostPaymentsIdRefundWithBodyWithResponse(ctx context.Context, id string, params *PostPaymentsIdRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsIdRefundResponse, error) {
	rsp, err := c.PostPaymentsIdRefundWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsIdRefundResponse(rsp)
}

func (c *ClientWithResponses) PostPaymentsIdRefundWithResponse(ctx context.Context, id string, params *PostPaymentsIdRefundParams, body PostPaymentsIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsIdRefundResponse, error) {
	rsp, err := c.PostPaymentsIdRefund(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsIdRefundResponse(rsp)
}

// GetPriceListsWithBodyWithResponse request with arbitrary body returning *GetPriceListsResponse
func (c *ClientWithResponses) GetPriceListsWithBodyWithResponse(ctx context.Context, params *GetPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPriceListsResponse, error) {
	rsp, err := c.GetPriceListsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPriceListsResponse(rsp)
}

func (c *ClientWithResponses) GetPriceListsWithResponse(ctx context.Context, params *GetPriceListsParams, body GetPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPriceListsResponse, error) {
	rsp, err := c.GetPriceLists(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPriceListsResponse(rsp)
}

// PostPriceListsWithBodyWithResponse request with arbitrary body returning *PostPriceListsResponse
func (c *ClientWithResponses) PostPriceListsWithBodyWithResponse(ctx context.Context, params *PostPriceListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsResponse, error) {
	rsp, err := c.PostPriceListsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsResponse(rsp)
}

func (c *ClientWithResponses) PostPriceListsWithResponse(ctx context.Context, params *PostPriceListsParams, body PostPriceListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsResponse, error) {
	rsp, err := c.PostPriceLists(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsResponse(rsp)
}

// DeletePriceListsIdWithBodyWithResponse request with arbitrary body returning *DeletePriceListsIdResponse
func (c *ClientWithResponses) DeletePriceListsIdWithBodyWithResponse(ctx context.Context, id string, params *DeletePriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePriceListsIdResponse, error) {
	rsp, err := c.DeletePriceListsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePriceListsIdResponse(rsp)
}

func (c *ClientWithResponses) DeletePriceListsIdWithResponse(ctx context.Context, id string, params *DeletePriceListsIdParams, body DeletePriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePriceListsIdResponse, error) {
	rsp, err := c.DeletePriceListsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePriceListsIdResponse(rsp)
}

// GetPriceListsIdWithBodyWithResponse request with arbitrary body returning *GetPriceListsIdResponse
func (c *ClientWithResponses) GetPriceListsIdWithBodyWithResponse(ctx context.Context, id string, params *GetPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPriceListsIdResponse, error) {
	rsp, err := c.GetPriceListsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPriceListsIdResponse(rsp)
}

func (c *ClientWithResponses) GetPriceListsIdWithResponse(ctx context.Context, id string, params *GetPriceListsIdParams, body GetPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPriceListsIdResponse, error) {
	rsp, err := c.GetPriceListsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPriceListsIdResponse(rsp)
}

// PostPriceListsIdWithBodyWithResponse request with arbitrary body returning *PostPriceListsIdResponse
func (c *ClientWithResponses) PostPriceListsIdWithBodyWithResponse(ctx context.Context, id string, params *PostPriceListsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsIdResponse, error) {
	rsp, err := c.PostPriceListsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsIdResponse(rsp)
}

func (c *ClientWithResponses) PostPriceListsIdWithResponse(ctx context.Context, id string, params *PostPriceListsIdParams, body PostPriceListsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsIdResponse, error) {
	rsp, err := c.PostPriceListsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsIdResponse(rsp)
}

// PostPriceListsIdPricesBatchWithBodyWithResponse request with arbitrary body returning *PostPriceListsIdPricesBatchResponse
func (c *ClientWithResponses) PostPriceListsIdPricesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsIdPricesBatchResponse, error) {
	rsp, err := c.PostPriceListsIdPricesBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsIdPricesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostPriceListsIdPricesBatchWithResponse(ctx context.Context, id string, params *PostPriceListsIdPricesBatchParams, body PostPriceListsIdPricesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsIdPricesBatchResponse, error) {
	rsp, err := c.PostPriceListsIdPricesBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsIdPricesBatchResponse(rsp)
}

// PostPriceListsIdProductsWithBodyWithResponse request with arbitrary body returning *PostPriceListsIdProductsResponse
func (c *ClientWithResponses) PostPriceListsIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostPriceListsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPriceListsIdProductsResponse, error) {
	rsp, err := c.PostPriceListsIdProductsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsIdProductsResponse(rsp)
}

func (c *ClientWithResponses) PostPriceListsIdProductsWithResponse(ctx context.Context, id string, params *PostPriceListsIdProductsParams, body PostPriceListsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPriceListsIdProductsResponse, error) {
	rsp, err := c.PostPriceListsIdProducts(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPriceListsIdProductsResponse(rsp)
}

// GetPricingRuleTypesWithBodyWithResponse request with arbitrary body returning *GetPricingRuleTypesResponse
func (c *ClientWithResponses) GetPricingRuleTypesWithBodyWithResponse(ctx context.Context, params *GetPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesResponse, error) {
	rsp, err := c.GetPricingRuleTypesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingRuleTypesResponse(rsp)
}

func (c *ClientWithResponses) GetPricingRuleTypesWithResponse(ctx context.Context, params *GetPricingRuleTypesParams, body GetPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesResponse, error) {
	rsp, err := c.GetPricingRuleTypes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingRuleTypesResponse(rsp)
}

// PostPricingRuleTypesWithBodyWithResponse request with arbitrary body returning *PostPricingRuleTypesResponse
func (c *ClientWithResponses) PostPricingRuleTypesWithBodyWithResponse(ctx context.Context, params *PostPricingRuleTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesResponse, error) {
	rsp, err := c.PostPricingRuleTypesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPricingRuleTypesResponse(rsp)
}

func (c *ClientWithResponses) PostPricingRuleTypesWithResponse(ctx context.Context, params *PostPricingRuleTypesParams, body PostPricingRuleTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesResponse, error) {
	rsp, err := c.PostPricingRuleTypes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPricingRuleTypesResponse(rsp)
}

// DeletePricingRuleTypesIdWithBodyWithResponse request with arbitrary body returning *DeletePricingRuleTypesIdResponse
func (c *ClientWithResponses) DeletePricingRuleTypesIdWithBodyWithResponse(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePricingRuleTypesIdResponse, error) {
	rsp, err := c.DeletePricingRuleTypesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePricingRuleTypesIdResponse(rsp)
}

func (c *ClientWithResponses) DeletePricingRuleTypesIdWithResponse(ctx context.Context, id string, params *DeletePricingRuleTypesIdParams, body DeletePricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePricingRuleTypesIdResponse, error) {
	rsp, err := c.DeletePricingRuleTypesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePricingRuleTypesIdResponse(rsp)
}

// GetPricingRuleTypesIdWithBodyWithResponse request with arbitrary body returning *GetPricingRuleTypesIdResponse
func (c *ClientWithResponses) GetPricingRuleTypesIdWithBodyWithResponse(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesIdResponse, error) {
	rsp, err := c.GetPricingRuleTypesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingRuleTypesIdResponse(rsp)
}

func (c *ClientWithResponses) GetPricingRuleTypesIdWithResponse(ctx context.Context, id string, params *GetPricingRuleTypesIdParams, body GetPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPricingRuleTypesIdResponse, error) {
	rsp, err := c.GetPricingRuleTypesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingRuleTypesIdResponse(rsp)
}

// PostPricingRuleTypesIdWithBodyWithResponse request with arbitrary body returning *PostPricingRuleTypesIdResponse
func (c *ClientWithResponses) PostPricingRuleTypesIdWithBodyWithResponse(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesIdResponse, error) {
	rsp, err := c.PostPricingRuleTypesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPricingRuleTypesIdResponse(rsp)
}

func (c *ClientWithResponses) PostPricingRuleTypesIdWithResponse(ctx context.Context, id string, params *PostPricingRuleTypesIdParams, body PostPricingRuleTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPricingRuleTypesIdResponse, error) {
	rsp, err := c.PostPricingRuleTypesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPricingRuleTypesIdResponse(rsp)
}

// GetProductCategoriesWithBodyWithResponse request with arbitrary body returning *GetProductCategoriesResponse
func (c *ClientWithResponses) GetProductCategoriesWithBodyWithResponse(ctx context.Context, params *GetProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductCategoriesResponse, error) {
	rsp, err := c.GetProductCategoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductCategoriesResponse(rsp)
}

func (c *ClientWithResponses) GetProductCategoriesWithResponse(ctx context.Context, params *GetProductCategoriesParams, body GetProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductCategoriesResponse, error) {
	rsp, err := c.GetProductCategories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductCategoriesResponse(rsp)
}

// PostProductCategoriesWithBodyWithResponse request with arbitrary body returning *PostProductCategoriesResponse
func (c *ClientWithResponses) PostProductCategoriesWithBodyWithResponse(ctx context.Context, params *PostProductCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductCategoriesResponse, error) {
	rsp, err := c.PostProductCategoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostProductCategoriesWithResponse(ctx context.Context, params *PostProductCategoriesParams, body PostProductCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductCategoriesResponse, error) {
	rsp, err := c.PostProductCategories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductCategoriesResponse(rsp)
}

// GetProductCategoriesIdWithBodyWithResponse request with arbitrary body returning *GetProductCategoriesIdResponse
func (c *ClientWithResponses) GetProductCategoriesIdWithBodyWithResponse(ctx context.Context, id string, params *GetProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductCategoriesIdResponse, error) {
	rsp, err := c.GetProductCategoriesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductCategoriesIdResponse(rsp)
}

func (c *ClientWithResponses) GetProductCategoriesIdWithResponse(ctx context.Context, id string, params *GetProductCategoriesIdParams, body GetProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductCategoriesIdResponse, error) {
	rsp, err := c.GetProductCategoriesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductCategoriesIdResponse(rsp)
}

// PostProductCategoriesIdWithBodyWithResponse request with arbitrary body returning *PostProductCategoriesIdResponse
func (c *ClientWithResponses) PostProductCategoriesIdWithBodyWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdResponse, error) {
	rsp, err := c.PostProductCategoriesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductCategoriesIdResponse(rsp)
}

func (c *ClientWithResponses) PostProductCategoriesIdWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdParams, body PostProductCategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdResponse, error) {
	rsp, err := c.PostProductCategoriesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductCategoriesIdResponse(rsp)
}

// PostProductCategoriesIdProductsWithBodyWithResponse request with arbitrary body returning *PostProductCategoriesIdProductsResponse
func (c *ClientWithResponses) PostProductCategoriesIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdProductsResponse, error) {
	rsp, err := c.PostProductCategoriesIdProductsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductCategoriesIdProductsResponse(rsp)
}

func (c *ClientWithResponses) PostProductCategoriesIdProductsWithResponse(ctx context.Context, id string, params *PostProductCategoriesIdProductsParams, body PostProductCategoriesIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductCategoriesIdProductsResponse, error) {
	rsp, err := c.PostProductCategoriesIdProducts(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductCategoriesIdProductsResponse(rsp)
}

// GetProductTypesWithBodyWithResponse request with arbitrary body returning *GetProductTypesResponse
func (c *ClientWithResponses) GetProductTypesWithBodyWithResponse(ctx context.Context, params *GetProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductTypesResponse, error) {
	rsp, err := c.GetProductTypesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductTypesResponse(rsp)
}

func (c *ClientWithResponses) GetProductTypesWithResponse(ctx context.Context, params *GetProductTypesParams, body GetProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductTypesResponse, error) {
	rsp, err := c.GetProductTypes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductTypesResponse(rsp)
}

// PostProductTypesWithBodyWithResponse request with arbitrary body returning *PostProductTypesResponse
func (c *ClientWithResponses) PostProductTypesWithBodyWithResponse(ctx context.Context, params *PostProductTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductTypesResponse, error) {
	rsp, err := c.PostProductTypesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductTypesResponse(rsp)
}

func (c *ClientWithResponses) PostProductTypesWithResponse(ctx context.Context, params *PostProductTypesParams, body PostProductTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductTypesResponse, error) {
	rsp, err := c.PostProductTypes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductTypesResponse(rsp)
}

// DeleteProductTypesIdWithBodyWithResponse request with arbitrary body returning *DeleteProductTypesIdResponse
func (c *ClientWithResponses) DeleteProductTypesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductTypesIdResponse, error) {
	rsp, err := c.DeleteProductTypesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductTypesIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductTypesIdWithResponse(ctx context.Context, id string, params *DeleteProductTypesIdParams, body DeleteProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductTypesIdResponse, error) {
	rsp, err := c.DeleteProductTypesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductTypesIdResponse(rsp)
}

// GetProductTypesIdWithBodyWithResponse request with arbitrary body returning *GetProductTypesIdResponse
func (c *ClientWithResponses) GetProductTypesIdWithBodyWithResponse(ctx context.Context, id string, params *GetProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductTypesIdResponse, error) {
	rsp, err := c.GetProductTypesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductTypesIdResponse(rsp)
}

func (c *ClientWithResponses) GetProductTypesIdWithResponse(ctx context.Context, id string, params *GetProductTypesIdParams, body GetProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductTypesIdResponse, error) {
	rsp, err := c.GetProductTypesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductTypesIdResponse(rsp)
}

// PostProductTypesIdWithBodyWithResponse request with arbitrary body returning *PostProductTypesIdResponse
func (c *ClientWithResponses) PostProductTypesIdWithBodyWithResponse(ctx context.Context, id string, params *PostProductTypesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductTypesIdResponse, error) {
	rsp, err := c.PostProductTypesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductTypesIdResponse(rsp)
}

func (c *ClientWithResponses) PostProductTypesIdWithResponse(ctx context.Context, id string, params *PostProductTypesIdParams, body PostProductTypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductTypesIdResponse, error) {
	rsp, err := c.PostProductTypesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductTypesIdResponse(rsp)
}

// GetProductsWithBodyWithResponse request with arbitrary body returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithBodyWithResponse(ctx context.Context, params *GetProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProductsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// PostProductsWithBodyWithResponse request with arbitrary body returning *PostProductsResponse
func (c *ClientWithResponses) PostProductsWithBodyWithResponse(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProductsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

func (c *ClientWithResponses) PostProductsWithResponse(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProducts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

// PostProductsBatchWithBodyWithResponse request with arbitrary body returning *PostProductsBatchResponse
func (c *ClientWithResponses) PostProductsBatchWithBodyWithResponse(ctx context.Context, params *PostProductsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsBatchResponse, error) {
	rsp, err := c.PostProductsBatchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsBatchResponse(rsp)
}

func (c *ClientWithResponses) PostProductsBatchWithResponse(ctx context.Context, params *PostProductsBatchParams, body PostProductsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsBatchResponse, error) {
	rsp, err := c.PostProductsBatch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsBatchResponse(rsp)
}

// DeleteProductsIdWithBodyWithResponse request with arbitrary body returning *DeleteProductsIdResponse
func (c *ClientWithResponses) DeleteProductsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsIdResponse, error) {
	rsp, err := c.DeleteProductsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductsIdWithResponse(ctx context.Context, id string, params *DeleteProductsIdParams, body DeleteProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsIdResponse, error) {
	rsp, err := c.DeleteProductsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsIdResponse(rsp)
}

// GetProductsIdWithBodyWithResponse request with arbitrary body returning *GetProductsIdResponse
func (c *ClientWithResponses) GetProductsIdWithBodyWithResponse(ctx context.Context, id string, params *GetProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error) {
	rsp, err := c.GetProductsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdResponse(rsp)
}

func (c *ClientWithResponses) GetProductsIdWithResponse(ctx context.Context, id string, params *GetProductsIdParams, body GetProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error) {
	rsp, err := c.GetProductsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdResponse(rsp)
}

// PostProductsIdWithBodyWithResponse request with arbitrary body returning *PostProductsIdResponse
func (c *ClientWithResponses) PostProductsIdWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdResponse, error) {
	rsp, err := c.PostProductsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdResponse(rsp)
}

func (c *ClientWithResponses) PostProductsIdWithResponse(ctx context.Context, id string, params *PostProductsIdParams, body PostProductsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdResponse, error) {
	rsp, err := c.PostProductsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdResponse(rsp)
}

// GetProductsIdOptionsWithBodyWithResponse request with arbitrary body returning *GetProductsIdOptionsResponse
func (c *ClientWithResponses) GetProductsIdOptionsWithBodyWithResponse(ctx context.Context, id string, params *GetProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsResponse, error) {
	rsp, err := c.GetProductsIdOptionsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdOptionsResponse(rsp)
}

func (c *ClientWithResponses) GetProductsIdOptionsWithResponse(ctx context.Context, id string, params *GetProductsIdOptionsParams, body GetProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsResponse, error) {
	rsp, err := c.GetProductsIdOptions(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdOptionsResponse(rsp)
}

// PostProductsIdOptionsWithBodyWithResponse request with arbitrary body returning *PostProductsIdOptionsResponse
func (c *ClientWithResponses) PostProductsIdOptionsWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsResponse, error) {
	rsp, err := c.PostProductsIdOptionsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdOptionsResponse(rsp)
}

func (c *ClientWithResponses) PostProductsIdOptionsWithResponse(ctx context.Context, id string, params *PostProductsIdOptionsParams, body PostProductsIdOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsResponse, error) {
	rsp, err := c.PostProductsIdOptions(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdOptionsResponse(rsp)
}

// DeleteProductsIdOptionsOptionIdWithBodyWithResponse request with arbitrary body returning *DeleteProductsIdOptionsOptionIdResponse
func (c *ClientWithResponses) DeleteProductsIdOptionsOptionIdWithBodyWithResponse(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsIdOptionsOptionIdResponse, error) {
	rsp, err := c.DeleteProductsIdOptionsOptionIdWithBody(ctx, id, optionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsIdOptionsOptionIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductsIdOptionsOptionIdWithResponse(ctx context.Context, id string, optionId string, params *DeleteProductsIdOptionsOptionIdParams, body DeleteProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsIdOptionsOptionIdResponse, error) {
	rsp, err := c.DeleteProductsIdOptionsOptionId(ctx, id, optionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsIdOptionsOptionIdResponse(rsp)
}

// GetProductsIdOptionsOptionIdWithBodyWithResponse request with arbitrary body returning *GetProductsIdOptionsOptionIdResponse
func (c *ClientWithResponses) GetProductsIdOptionsOptionIdWithBodyWithResponse(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsOptionIdResponse, error) {
	rsp, err := c.GetProductsIdOptionsOptionIdWithBody(ctx, id, optionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdOptionsOptionIdResponse(rsp)
}

func (c *ClientWithResponses) GetProductsIdOptionsOptionIdWithResponse(ctx context.Context, id string, optionId string, params *GetProductsIdOptionsOptionIdParams, body GetProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdOptionsOptionIdResponse, error) {
	rsp, err := c.GetProductsIdOptionsOptionId(ctx, id, optionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdOptionsOptionIdResponse(rsp)
}

// PostProductsIdOptionsOptionIdWithBodyWithResponse request with arbitrary body returning *PostProductsIdOptionsOptionIdResponse
func (c *ClientWithResponses) PostProductsIdOptionsOptionIdWithBodyWithResponse(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsOptionIdResponse, error) {
	rsp, err := c.PostProductsIdOptionsOptionIdWithBody(ctx, id, optionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdOptionsOptionIdResponse(rsp)
}

func (c *ClientWithResponses) PostProductsIdOptionsOptionIdWithResponse(ctx context.Context, id string, optionId string, params *PostProductsIdOptionsOptionIdParams, body PostProductsIdOptionsOptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdOptionsOptionIdResponse, error) {
	rsp, err := c.PostProductsIdOptionsOptionId(ctx, id, optionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdOptionsOptionIdResponse(rsp)
}

// GetProductsIdVariantsWithBodyWithResponse request with arbitrary body returning *GetProductsIdVariantsResponse
func (c *ClientWithResponses) GetProductsIdVariantsWithBodyWithResponse(ctx context.Context, id string, params *GetProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsResponse, error) {
	rsp, err := c.GetProductsIdVariantsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdVariantsResponse(rsp)
}

func (c *ClientWithResponses) GetProductsIdVariantsWithResponse(ctx context.Context, id string, params *GetProductsIdVariantsParams, body GetProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsResponse, error) {
	rsp, err := c.GetProductsIdVariants(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdVariantsResponse(rsp)
}

// PostProductsIdVariantsWithBodyWithResponse request with arbitrary body returning *PostProductsIdVariantsResponse
func (c *ClientWithResponses) PostProductsIdVariantsWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsResponse, error) {
	rsp, err := c.PostProductsIdVariantsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdVariantsResponse(rsp)
}

func (c *ClientWithResponses) PostProductsIdVariantsWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsParams, body PostProductsIdVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsResponse, error) {
	rsp, err := c.PostProductsIdVariants(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdVariantsResponse(rsp)
}

// PostProductsIdVariantsBatchWithBodyWithResponse request with arbitrary body returning *PostProductsIdVariantsBatchResponse
func (c *ClientWithResponses) PostProductsIdVariantsBatchWithBodyWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsBatchResponse, error) {
	rsp, err := c.PostProductsIdVariantsBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdVariantsBatchResponse(rsp)
}

func (c *ClientWithResponses) PostProductsIdVariantsBatchWithResponse(ctx context.Context, id string, params *PostProductsIdVariantsBatchParams, body PostProductsIdVariantsBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsBatchResponse, error) {
	rsp, err := c.PostProductsIdVariantsBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdVariantsBatchResponse(rsp)
}

// DeleteProductsIdVariantsVariantIdWithBodyWithResponse request with arbitrary body returning *DeleteProductsIdVariantsVariantIdResponse
func (c *ClientWithResponses) DeleteProductsIdVariantsVariantIdWithBodyWithResponse(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsIdVariantsVariantIdResponse, error) {
	rsp, err := c.DeleteProductsIdVariantsVariantIdWithBody(ctx, id, variantId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsIdVariantsVariantIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductsIdVariantsVariantIdWithResponse(ctx context.Context, id string, variantId string, params *DeleteProductsIdVariantsVariantIdParams, body DeleteProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsIdVariantsVariantIdResponse, error) {
	rsp, err := c.DeleteProductsIdVariantsVariantId(ctx, id, variantId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsIdVariantsVariantIdResponse(rsp)
}

// GetProductsIdVariantsVariantIdWithBodyWithResponse request with arbitrary body returning *GetProductsIdVariantsVariantIdResponse
func (c *ClientWithResponses) GetProductsIdVariantsVariantIdWithBodyWithResponse(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsVariantIdResponse, error) {
	rsp, err := c.GetProductsIdVariantsVariantIdWithBody(ctx, id, variantId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdVariantsVariantIdResponse(rsp)
}

func (c *ClientWithResponses) GetProductsIdVariantsVariantIdWithResponse(ctx context.Context, id string, variantId string, params *GetProductsIdVariantsVariantIdParams, body GetProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsIdVariantsVariantIdResponse, error) {
	rsp, err := c.GetProductsIdVariantsVariantId(ctx, id, variantId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdVariantsVariantIdResponse(rsp)
}

// PostProductsIdVariantsVariantIdWithBodyWithResponse request with arbitrary body returning *PostProductsIdVariantsVariantIdResponse
func (c *ClientWithResponses) PostProductsIdVariantsVariantIdWithBodyWithResponse(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsVariantIdResponse, error) {
	rsp, err := c.PostProductsIdVariantsVariantIdWithBody(ctx, id, variantId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdVariantsVariantIdResponse(rsp)
}

func (c *ClientWithResponses) PostProductsIdVariantsVariantIdWithResponse(ctx context.Context, id string, variantId string, params *PostProductsIdVariantsVariantIdParams, body PostProductsIdVariantsVariantIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsIdVariantsVariantIdResponse, error) {
	rsp, err := c.PostProductsIdVariantsVariantId(ctx, id, variantId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsIdVariantsVariantIdResponse(rsp)
}

// GetPromotionsWithBodyWithResponse request with arbitrary body returning *GetPromotionsResponse
func (c *ClientWithResponses) GetPromotionsWithBodyWithResponse(ctx context.Context, params *GetPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsResponse, error) {
	rsp, err := c.GetPromotionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsResponse(rsp)
}

func (c *ClientWithResponses) GetPromotionsWithResponse(ctx context.Context, params *GetPromotionsParams, body GetPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsResponse, error) {
	rsp, err := c.GetPromotions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsResponse(rsp)
}

// PostPromotionsWithBodyWithResponse request with arbitrary body returning *PostPromotionsResponse
func (c *ClientWithResponses) PostPromotionsWithBodyWithResponse(ctx context.Context, params *PostPromotionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsResponse, error) {
	rsp, err := c.PostPromotionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsResponse(rsp)
}

func (c *ClientWithResponses) PostPromotionsWithResponse(ctx context.Context, params *PostPromotionsParams, body PostPromotionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsResponse, error) {
	rsp, err := c.PostPromotions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsResponse(rsp)
}

// GetPromotionsRuleAttributeOptionsRuleTypeWithBodyWithResponse request with arbitrary body returning *GetPromotionsRuleAttributeOptionsRuleTypeResponse
func (c *ClientWithResponses) GetPromotionsRuleAttributeOptionsRuleTypeWithBodyWithResponse(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsRuleAttributeOptionsRuleTypeResponse, error) {
	rsp, err := c.GetPromotionsRuleAttributeOptionsRuleTypeWithBody(ctx, ruleType, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsRuleAttributeOptionsRuleTypeResponse(rsp)
}

func (c *ClientWithResponses) GetPromotionsRuleAttributeOptionsRuleTypeWithResponse(ctx context.Context, ruleType string, params *GetPromotionsRuleAttributeOptionsRuleTypeParams, body GetPromotionsRuleAttributeOptionsRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsRuleAttributeOptionsRuleTypeResponse, error) {
	rsp, err := c.GetPromotionsRuleAttributeOptionsRuleType(ctx, ruleType, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsRuleAttributeOptionsRuleTypeResponse(rsp)
}

// GetPromotionsRuleOperatorOptionsWithBodyWithResponse request with arbitrary body returning *GetPromotionsRuleOperatorOptionsResponse
func (c *ClientWithResponses) GetPromotionsRuleOperatorOptionsWithBodyWithResponse(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsRuleOperatorOptionsResponse, error) {
	rsp, err := c.GetPromotionsRuleOperatorOptionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsRuleOperatorOptionsResponse(rsp)
}

func (c *ClientWithResponses) GetPromotionsRuleOperatorOptionsWithResponse(ctx context.Context, params *GetPromotionsRuleOperatorOptionsParams, body GetPromotionsRuleOperatorOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsRuleOperatorOptionsResponse, error) {
	rsp, err := c.GetPromotionsRuleOperatorOptions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsRuleOperatorOptionsResponse(rsp)
}

// GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBodyWithResponse request with arbitrary body returning *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse
func (c *ClientWithResponses) GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBodyWithResponse(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse, error) {
	rsp, err := c.GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithBody(ctx, ruleType, ruleAttributeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse(rsp)
}

func (c *ClientWithResponses) GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithResponse(ctx context.Context, ruleType string, ruleAttributeId string, params *GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdParams, body GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse, error) {
	rsp, err := c.GetPromotionsRuleValueOptionsRuleTypeRuleAttributeId(ctx, ruleType, ruleAttributeId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse(rsp)
}

// DeletePromotionsIdWithBodyWithResponse request with arbitrary body returning *DeletePromotionsIdResponse
func (c *ClientWithResponses) DeletePromotionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeletePromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePromotionsIdResponse, error) {
	rsp, err := c.DeletePromotionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePromotionsIdResponse(rsp)
}

func (c *ClientWithResponses) DeletePromotionsIdWithResponse(ctx context.Context, id string, params *DeletePromotionsIdParams, body DeletePromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePromotionsIdResponse, error) {
	rsp, err := c.DeletePromotionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePromotionsIdResponse(rsp)
}

// GetPromotionsIdWithBodyWithResponse request with arbitrary body returning *GetPromotionsIdResponse
func (c *ClientWithResponses) GetPromotionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsIdResponse, error) {
	rsp, err := c.GetPromotionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsIdResponse(rsp)
}

func (c *ClientWithResponses) GetPromotionsIdWithResponse(ctx context.Context, id string, params *GetPromotionsIdParams, body GetPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsIdResponse, error) {
	rsp, err := c.GetPromotionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsIdResponse(rsp)
}

// PostPromotionsIdWithBodyWithResponse request with arbitrary body returning *PostPromotionsIdResponse
func (c *ClientWithResponses) PostPromotionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdResponse, error) {
	rsp, err := c.PostPromotionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdResponse(rsp)
}

func (c *ClientWithResponses) PostPromotionsIdWithResponse(ctx context.Context, id string, params *PostPromotionsIdParams, body PostPromotionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdResponse, error) {
	rsp, err := c.PostPromotionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdResponse(rsp)
}

// PostPromotionsIdBuyRulesBatchWithBodyWithResponse request with arbitrary body returning *PostPromotionsIdBuyRulesBatchResponse
func (c *ClientWithResponses) PostPromotionsIdBuyRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdBuyRulesBatchResponse, error) {
	rsp, err := c.PostPromotionsIdBuyRulesBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdBuyRulesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostPromotionsIdBuyRulesBatchWithResponse(ctx context.Context, id string, params *PostPromotionsIdBuyRulesBatchParams, body PostPromotionsIdBuyRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdBuyRulesBatchResponse, error) {
	rsp, err := c.PostPromotionsIdBuyRulesBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdBuyRulesBatchResponse(rsp)
}

// PostPromotionsIdRulesBatchWithBodyWithResponse request with arbitrary body returning *PostPromotionsIdRulesBatchResponse
func (c *ClientWithResponses) PostPromotionsIdRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdRulesBatchResponse, error) {
	rsp, err := c.PostPromotionsIdRulesBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdRulesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostPromotionsIdRulesBatchWithResponse(ctx context.Context, id string, params *PostPromotionsIdRulesBatchParams, body PostPromotionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdRulesBatchResponse, error) {
	rsp, err := c.PostPromotionsIdRulesBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdRulesBatchResponse(rsp)
}

// PostPromotionsIdTargetRulesBatchWithBodyWithResponse request with arbitrary body returning *PostPromotionsIdTargetRulesBatchResponse
func (c *ClientWithResponses) PostPromotionsIdTargetRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromotionsIdTargetRulesBatchResponse, error) {
	rsp, err := c.PostPromotionsIdTargetRulesBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdTargetRulesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostPromotionsIdTargetRulesBatchWithResponse(ctx context.Context, id string, params *PostPromotionsIdTargetRulesBatchParams, body PostPromotionsIdTargetRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromotionsIdTargetRulesBatchResponse, error) {
	rsp, err := c.PostPromotionsIdTargetRulesBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromotionsIdTargetRulesBatchResponse(rsp)
}

// GetPromotionsIdRuleTypeWithBodyWithResponse request with arbitrary body returning *GetPromotionsIdRuleTypeResponse
func (c *ClientWithResponses) GetPromotionsIdRuleTypeWithBodyWithResponse(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPromotionsIdRuleTypeResponse, error) {
	rsp, err := c.GetPromotionsIdRuleTypeWithBody(ctx, id, ruleType, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsIdRuleTypeResponse(rsp)
}

func (c *ClientWithResponses) GetPromotionsIdRuleTypeWithResponse(ctx context.Context, id string, ruleType string, params *GetPromotionsIdRuleTypeParams, body GetPromotionsIdRuleTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPromotionsIdRuleTypeResponse, error) {
	rsp, err := c.GetPromotionsIdRuleType(ctx, id, ruleType, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionsIdRuleTypeResponse(rsp)
}

// GetRegionsWithBodyWithResponse request with arbitrary body returning *GetRegionsResponse
func (c *ClientWithResponses) GetRegionsWithBodyWithResponse(ctx context.Context, params *GetRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRegionsResponse, error) {
	rsp, err := c.GetRegionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegionsResponse(rsp)
}

func (c *ClientWithResponses) GetRegionsWithResponse(ctx context.Context, params *GetRegionsParams, body GetRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRegionsResponse, error) {
	rsp, err := c.GetRegions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegionsResponse(rsp)
}

// PostRegionsWithBodyWithResponse request with arbitrary body returning *PostRegionsResponse
func (c *ClientWithResponses) PostRegionsWithBodyWithResponse(ctx context.Context, params *PostRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error) {
	rsp, err := c.PostRegionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegionsResponse(rsp)
}

func (c *ClientWithResponses) PostRegionsWithResponse(ctx context.Context, params *PostRegionsParams, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error) {
	rsp, err := c.PostRegions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegionsResponse(rsp)
}

// DeleteRegionsIdWithBodyWithResponse request with arbitrary body returning *DeleteRegionsIdResponse
func (c *ClientWithResponses) DeleteRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRegionsIdResponse, error) {
	rsp, err := c.DeleteRegionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegionsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteRegionsIdWithResponse(ctx context.Context, id string, params *DeleteRegionsIdParams, body DeleteRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRegionsIdResponse, error) {
	rsp, err := c.DeleteRegionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegionsIdResponse(rsp)
}

// GetRegionsIdWithBodyWithResponse request with arbitrary body returning *GetRegionsIdResponse
func (c *ClientWithResponses) GetRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRegionsIdResponse, error) {
	rsp, err := c.GetRegionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegionsIdResponse(rsp)
}

func (c *ClientWithResponses) GetRegionsIdWithResponse(ctx context.Context, id string, params *GetRegionsIdParams, body GetRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRegionsIdResponse, error) {
	rsp, err := c.GetRegionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegionsIdResponse(rsp)
}

// PostRegionsIdWithBodyWithResponse request with arbitrary body returning *PostRegionsIdResponse
func (c *ClientWithResponses) PostRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegionsIdResponse, error) {
	rsp, err := c.PostRegionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegionsIdResponse(rsp)
}

func (c *ClientWithResponses) PostRegionsIdWithResponse(ctx context.Context, id string, params *PostRegionsIdParams, body PostRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegionsIdResponse, error) {
	rsp, err := c.PostRegionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegionsIdResponse(rsp)
}

// GetReservationsWithBodyWithResponse request with arbitrary body returning *GetReservationsResponse
func (c *ClientWithResponses) GetReservationsWithBodyWithResponse(ctx context.Context, params *GetReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error) {
	rsp, err := c.GetReservationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsResponse(rsp)
}

func (c *ClientWithResponses) GetReservationsWithResponse(ctx context.Context, params *GetReservationsParams, body GetReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error) {
	rsp, err := c.GetReservations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsResponse(rsp)
}

// PostReservationsWithBodyWithResponse request with arbitrary body returning *PostReservationsResponse
func (c *ClientWithResponses) PostReservationsWithBodyWithResponse(ctx context.Context, params *PostReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error) {
	rsp, err := c.PostReservationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsResponse(rsp)
}

func (c *ClientWithResponses) PostReservationsWithResponse(ctx context.Context, params *PostReservationsParams, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error) {
	rsp, err := c.PostReservations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsResponse(rsp)
}

// DeleteReservationsIdWithBodyWithResponse request with arbitrary body returning *DeleteReservationsIdResponse
func (c *ClientWithResponses) DeleteReservationsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteReservationsIdResponse, error) {
	rsp, err := c.DeleteReservationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReservationsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteReservationsIdWithResponse(ctx context.Context, id string, params *DeleteReservationsIdParams, body DeleteReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteReservationsIdResponse, error) {
	rsp, err := c.DeleteReservationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReservationsIdResponse(rsp)
}

// GetReservationsIdWithBodyWithResponse request with arbitrary body returning *GetReservationsIdResponse
func (c *ClientWithResponses) GetReservationsIdWithBodyWithResponse(ctx context.Context, id string, params *GetReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error) {
	rsp, err := c.GetReservationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsIdResponse(rsp)
}

func (c *ClientWithResponses) GetReservationsIdWithResponse(ctx context.Context, id string, params *GetReservationsIdParams, body GetReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error) {
	rsp, err := c.GetReservationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsIdResponse(rsp)
}

// PostReservationsIdWithBodyWithResponse request with arbitrary body returning *PostReservationsIdResponse
func (c *ClientWithResponses) PostReservationsIdWithBodyWithResponse(ctx context.Context, id string, params *PostReservationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsIdResponse, error) {
	rsp, err := c.PostReservationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsIdResponse(rsp)
}

func (c *ClientWithResponses) PostReservationsIdWithResponse(ctx context.Context, id string, params *PostReservationsIdParams, body PostReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsIdResponse, error) {
	rsp, err := c.PostReservationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsIdResponse(rsp)
}

// GetSalesChannelsWithBodyWithResponse request with arbitrary body returning *GetSalesChannelsResponse
func (c *ClientWithResponses) GetSalesChannelsWithBodyWithResponse(ctx context.Context, params *GetSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSalesChannelsResponse, error) {
	rsp, err := c.GetSalesChannelsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesChannelsResponse(rsp)
}

func (c *ClientWithResponses) GetSalesChannelsWithResponse(ctx context.Context, params *GetSalesChannelsParams, body GetSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSalesChannelsResponse, error) {
	rsp, err := c.GetSalesChannels(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesChannelsResponse(rsp)
}

// PostSalesChannelsWithBodyWithResponse request with arbitrary body returning *PostSalesChannelsResponse
func (c *ClientWithResponses) PostSalesChannelsWithBodyWithResponse(ctx context.Context, params *PostSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesChannelsResponse, error) {
	rsp, err := c.PostSalesChannelsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesChannelsResponse(rsp)
}

func (c *ClientWithResponses) PostSalesChannelsWithResponse(ctx context.Context, params *PostSalesChannelsParams, body PostSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesChannelsResponse, error) {
	rsp, err := c.PostSalesChannels(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesChannelsResponse(rsp)
}

// DeleteSalesChannelsIdWithBodyWithResponse request with arbitrary body returning *DeleteSalesChannelsIdResponse
func (c *ClientWithResponses) DeleteSalesChannelsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSalesChannelsIdResponse, error) {
	rsp, err := c.DeleteSalesChannelsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSalesChannelsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteSalesChannelsIdWithResponse(ctx context.Context, id string, params *DeleteSalesChannelsIdParams, body DeleteSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSalesChannelsIdResponse, error) {
	rsp, err := c.DeleteSalesChannelsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSalesChannelsIdResponse(rsp)
}

// GetSalesChannelsIdWithBodyWithResponse request with arbitrary body returning *GetSalesChannelsIdResponse
func (c *ClientWithResponses) GetSalesChannelsIdWithBodyWithResponse(ctx context.Context, id string, params *GetSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSalesChannelsIdResponse, error) {
	rsp, err := c.GetSalesChannelsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesChannelsIdResponse(rsp)
}

func (c *ClientWithResponses) GetSalesChannelsIdWithResponse(ctx context.Context, id string, params *GetSalesChannelsIdParams, body GetSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSalesChannelsIdResponse, error) {
	rsp, err := c.GetSalesChannelsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesChannelsIdResponse(rsp)
}

// PostSalesChannelsIdWithBodyWithResponse request with arbitrary body returning *PostSalesChannelsIdResponse
func (c *ClientWithResponses) PostSalesChannelsIdWithBodyWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdResponse, error) {
	rsp, err := c.PostSalesChannelsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesChannelsIdResponse(rsp)
}

func (c *ClientWithResponses) PostSalesChannelsIdWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdParams, body PostSalesChannelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdResponse, error) {
	rsp, err := c.PostSalesChannelsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesChannelsIdResponse(rsp)
}

// PostSalesChannelsIdProductsWithBodyWithResponse request with arbitrary body returning *PostSalesChannelsIdProductsResponse
func (c *ClientWithResponses) PostSalesChannelsIdProductsWithBodyWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdProductsResponse, error) {
	rsp, err := c.PostSalesChannelsIdProductsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesChannelsIdProductsResponse(rsp)
}

func (c *ClientWithResponses) PostSalesChannelsIdProductsWithResponse(ctx context.Context, id string, params *PostSalesChannelsIdProductsParams, body PostSalesChannelsIdProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesChannelsIdProductsResponse, error) {
	rsp, err := c.PostSalesChannelsIdProducts(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesChannelsIdProductsResponse(rsp)
}

// GetShippingOptionsWithBodyWithResponse request with arbitrary body returning *GetShippingOptionsResponse
func (c *ClientWithResponses) GetShippingOptionsWithBodyWithResponse(ctx context.Context, params *GetShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetShippingOptionsResponse, error) {
	rsp, err := c.GetShippingOptionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingOptionsResponse(rsp)
}

func (c *ClientWithResponses) GetShippingOptionsWithResponse(ctx context.Context, params *GetShippingOptionsParams, body GetShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetShippingOptionsResponse, error) {
	rsp, err := c.GetShippingOptions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingOptionsResponse(rsp)
}

// PostShippingOptionsWithBodyWithResponse request with arbitrary body returning *PostShippingOptionsResponse
func (c *ClientWithResponses) PostShippingOptionsWithBodyWithResponse(ctx context.Context, params *PostShippingOptionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingOptionsResponse, error) {
	rsp, err := c.PostShippingOptionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingOptionsResponse(rsp)
}

func (c *ClientWithResponses) PostShippingOptionsWithResponse(ctx context.Context, params *PostShippingOptionsParams, body PostShippingOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingOptionsResponse, error) {
	rsp, err := c.PostShippingOptions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingOptionsResponse(rsp)
}

// DeleteShippingOptionsIdWithBodyWithResponse request with arbitrary body returning *DeleteShippingOptionsIdResponse
func (c *ClientWithResponses) DeleteShippingOptionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteShippingOptionsIdResponse, error) {
	rsp, err := c.DeleteShippingOptionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShippingOptionsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteShippingOptionsIdWithResponse(ctx context.Context, id string, params *DeleteShippingOptionsIdParams, body DeleteShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteShippingOptionsIdResponse, error) {
	rsp, err := c.DeleteShippingOptionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShippingOptionsIdResponse(rsp)
}

// PostShippingOptionsIdWithBodyWithResponse request with arbitrary body returning *PostShippingOptionsIdResponse
func (c *ClientWithResponses) PostShippingOptionsIdWithBodyWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdResponse, error) {
	rsp, err := c.PostShippingOptionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingOptionsIdResponse(rsp)
}

func (c *ClientWithResponses) PostShippingOptionsIdWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdParams, body PostShippingOptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdResponse, error) {
	rsp, err := c.PostShippingOptionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingOptionsIdResponse(rsp)
}

// PostShippingOptionsIdRulesBatchWithBodyWithResponse request with arbitrary body returning *PostShippingOptionsIdRulesBatchResponse
func (c *ClientWithResponses) PostShippingOptionsIdRulesBatchWithBodyWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdRulesBatchResponse, error) {
	rsp, err := c.PostShippingOptionsIdRulesBatchWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingOptionsIdRulesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostShippingOptionsIdRulesBatchWithResponse(ctx context.Context, id string, params *PostShippingOptionsIdRulesBatchParams, body PostShippingOptionsIdRulesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingOptionsIdRulesBatchResponse, error) {
	rsp, err := c.PostShippingOptionsIdRulesBatch(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingOptionsIdRulesBatchResponse(rsp)
}

// GetShippingProfilesWithBodyWithResponse request with arbitrary body returning *GetShippingProfilesResponse
func (c *ClientWithResponses) GetShippingProfilesWithBodyWithResponse(ctx context.Context, params *GetShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetShippingProfilesResponse, error) {
	rsp, err := c.GetShippingProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingProfilesResponse(rsp)
}

func (c *ClientWithResponses) GetShippingProfilesWithResponse(ctx context.Context, params *GetShippingProfilesParams, body GetShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetShippingProfilesResponse, error) {
	rsp, err := c.GetShippingProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingProfilesResponse(rsp)
}

// PostShippingProfilesWithBodyWithResponse request with arbitrary body returning *PostShippingProfilesResponse
func (c *ClientWithResponses) PostShippingProfilesWithBodyWithResponse(ctx context.Context, params *PostShippingProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShippingProfilesResponse, error) {
	rsp, err := c.PostShippingProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostShippingProfilesWithResponse(ctx context.Context, params *PostShippingProfilesParams, body PostShippingProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShippingProfilesResponse, error) {
	rsp, err := c.PostShippingProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShippingProfilesResponse(rsp)
}

// DeleteShippingProfilesIdWithBodyWithResponse request with arbitrary body returning *DeleteShippingProfilesIdResponse
func (c *ClientWithResponses) DeleteShippingProfilesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteShippingProfilesIdResponse, error) {
	rsp, err := c.DeleteShippingProfilesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShippingProfilesIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteShippingProfilesIdWithResponse(ctx context.Context, id string, params *DeleteShippingProfilesIdParams, body DeleteShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteShippingProfilesIdResponse, error) {
	rsp, err := c.DeleteShippingProfilesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShippingProfilesIdResponse(rsp)
}

// GetShippingProfilesIdWithBodyWithResponse request with arbitrary body returning *GetShippingProfilesIdResponse
func (c *ClientWithResponses) GetShippingProfilesIdWithBodyWithResponse(ctx context.Context, id string, params *GetShippingProfilesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetShippingProfilesIdResponse, error) {
	rsp, err := c.GetShippingProfilesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingProfilesIdResponse(rsp)
}

func (c *ClientWithResponses) GetShippingProfilesIdWithResponse(ctx context.Context, id string, params *GetShippingProfilesIdParams, body GetShippingProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetShippingProfilesIdResponse, error) {
	rsp, err := c.GetShippingProfilesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShippingProfilesIdResponse(rsp)
}

// GetStockLocationsWithBodyWithResponse request with arbitrary body returning *GetStockLocationsResponse
func (c *ClientWithResponses) GetStockLocationsWithBodyWithResponse(ctx context.Context, params *GetStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStockLocationsResponse, error) {
	rsp, err := c.GetStockLocationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStockLocationsResponse(rsp)
}

func (c *ClientWithResponses) GetStockLocationsWithResponse(ctx context.Context, params *GetStockLocationsParams, body GetStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStockLocationsResponse, error) {
	rsp, err := c.GetStockLocations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStockLocationsResponse(rsp)
}

// PostStockLocationsWithBodyWithResponse request with arbitrary body returning *PostStockLocationsResponse
func (c *ClientWithResponses) PostStockLocationsWithBodyWithResponse(ctx context.Context, params *PostStockLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsResponse, error) {
	rsp, err := c.PostStockLocationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostStockLocationsWithResponse(ctx context.Context, params *PostStockLocationsParams, body PostStockLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsResponse, error) {
	rsp, err := c.PostStockLocations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsResponse(rsp)
}

// DeleteStockLocationsIdWithBodyWithResponse request with arbitrary body returning *DeleteStockLocationsIdResponse
func (c *ClientWithResponses) DeleteStockLocationsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteStockLocationsIdResponse, error) {
	rsp, err := c.DeleteStockLocationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStockLocationsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteStockLocationsIdWithResponse(ctx context.Context, id string, params *DeleteStockLocationsIdParams, body DeleteStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteStockLocationsIdResponse, error) {
	rsp, err := c.DeleteStockLocationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStockLocationsIdResponse(rsp)
}

// GetStockLocationsIdWithBodyWithResponse request with arbitrary body returning *GetStockLocationsIdResponse
func (c *ClientWithResponses) GetStockLocationsIdWithBodyWithResponse(ctx context.Context, id string, params *GetStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStockLocationsIdResponse, error) {
	rsp, err := c.GetStockLocationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStockLocationsIdResponse(rsp)
}

func (c *ClientWithResponses) GetStockLocationsIdWithResponse(ctx context.Context, id string, params *GetStockLocationsIdParams, body GetStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStockLocationsIdResponse, error) {
	rsp, err := c.GetStockLocationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStockLocationsIdResponse(rsp)
}

// PostStockLocationsIdWithBodyWithResponse request with arbitrary body returning *PostStockLocationsIdResponse
func (c *ClientWithResponses) PostStockLocationsIdWithBodyWithResponse(ctx context.Context, id string, params *PostStockLocationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsIdResponse, error) {
	rsp, err := c.PostStockLocationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsIdResponse(rsp)
}

func (c *ClientWithResponses) PostStockLocationsIdWithResponse(ctx context.Context, id string, params *PostStockLocationsIdParams, body PostStockLocationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsIdResponse, error) {
	rsp, err := c.PostStockLocationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsIdResponse(rsp)
}

// PostStockLocationsIdFulfillmentSetsWithBodyWithResponse request with arbitrary body returning *PostStockLocationsIdFulfillmentSetsResponse
func (c *ClientWithResponses) PostStockLocationsIdFulfillmentSetsWithBodyWithResponse(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsIdFulfillmentSetsResponse, error) {
	rsp, err := c.PostStockLocationsIdFulfillmentSetsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsIdFulfillmentSetsResponse(rsp)
}

func (c *ClientWithResponses) PostStockLocationsIdFulfillmentSetsWithResponse(ctx context.Context, id string, params *PostStockLocationsIdFulfillmentSetsParams, body PostStockLocationsIdFulfillmentSetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsIdFulfillmentSetsResponse, error) {
	rsp, err := c.PostStockLocationsIdFulfillmentSets(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsIdFulfillmentSetsResponse(rsp)
}

// PostStockLocationsIdSalesChannelsWithBodyWithResponse request with arbitrary body returning *PostStockLocationsIdSalesChannelsResponse
func (c *ClientWithResponses) PostStockLocationsIdSalesChannelsWithBodyWithResponse(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStockLocationsIdSalesChannelsResponse, error) {
	rsp, err := c.PostStockLocationsIdSalesChannelsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsIdSalesChannelsResponse(rsp)
}

func (c *ClientWithResponses) PostStockLocationsIdSalesChannelsWithResponse(ctx context.Context, id string, params *PostStockLocationsIdSalesChannelsParams, body PostStockLocationsIdSalesChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStockLocationsIdSalesChannelsResponse, error) {
	rsp, err := c.PostStockLocationsIdSalesChannels(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStockLocationsIdSalesChannelsResponse(rsp)
}

// GetStoresWithBodyWithResponse request with arbitrary body returning *GetStoresResponse
func (c *ClientWithResponses) GetStoresWithBodyWithResponse(ctx context.Context, params *GetStoresParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStoresResponse, error) {
	rsp, err := c.GetStoresWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoresResponse(rsp)
}

func (c *ClientWithResponses) GetStoresWithResponse(ctx context.Context, params *GetStoresParams, body GetStoresJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStoresResponse, error) {
	rsp, err := c.GetStores(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoresResponse(rsp)
}

// GetStoresIdWithBodyWithResponse request with arbitrary body returning *GetStoresIdResponse
func (c *ClientWithResponses) GetStoresIdWithBodyWithResponse(ctx context.Context, id string, params *GetStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStoresIdResponse, error) {
	rsp, err := c.GetStoresIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoresIdResponse(rsp)
}

func (c *ClientWithResponses) GetStoresIdWithResponse(ctx context.Context, id string, params *GetStoresIdParams, body GetStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStoresIdResponse, error) {
	rsp, err := c.GetStoresId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoresIdResponse(rsp)
}

// PostStoresIdWithBodyWithResponse request with arbitrary body returning *PostStoresIdResponse
func (c *ClientWithResponses) PostStoresIdWithBodyWithResponse(ctx context.Context, id string, params *PostStoresIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoresIdResponse, error) {
	rsp, err := c.PostStoresIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoresIdResponse(rsp)
}

func (c *ClientWithResponses) PostStoresIdWithResponse(ctx context.Context, id string, params *PostStoresIdParams, body PostStoresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoresIdResponse, error) {
	rsp, err := c.PostStoresId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoresIdResponse(rsp)
}

// GetTaxRatesWithBodyWithResponse request with arbitrary body returning *GetTaxRatesResponse
func (c *ClientWithResponses) GetTaxRatesWithBodyWithResponse(ctx context.Context, params *GetTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error) {
	rsp, err := c.GetTaxRatesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesResponse(rsp)
}

func (c *ClientWithResponses) GetTaxRatesWithResponse(ctx context.Context, params *GetTaxRatesParams, body GetTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error) {
	rsp, err := c.GetTaxRates(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesResponse(rsp)
}

// PostTaxRatesWithBodyWithResponse request with arbitrary body returning *PostTaxRatesResponse
func (c *ClientWithResponses) PostTaxRatesWithBodyWithResponse(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error) {
	rsp, err := c.PostTaxRatesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesResponse(rsp)
}

func (c *ClientWithResponses) PostTaxRatesWithResponse(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error) {
	rsp, err := c.PostTaxRates(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesResponse(rsp)
}

// DeleteTaxRatesIdWithBodyWithResponse request with arbitrary body returning *DeleteTaxRatesIdResponse
func (c *ClientWithResponses) DeleteTaxRatesIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdResponse, error) {
	rsp, err := c.DeleteTaxRatesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRatesIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteTaxRatesIdWithResponse(ctx context.Context, id string, params *DeleteTaxRatesIdParams, body DeleteTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdResponse, error) {
	rsp, err := c.DeleteTaxRatesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRatesIdResponse(rsp)
}

// GetTaxRatesIdWithBodyWithResponse request with arbitrary body returning *GetTaxRatesIdResponse
func (c *ClientWithResponses) GetTaxRatesIdWithBodyWithResponse(ctx context.Context, id string, params *GetTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRatesIdResponse, error) {
	rsp, err := c.GetTaxRatesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesIdResponse(rsp)
}

func (c *ClientWithResponses) GetTaxRatesIdWithResponse(ctx context.Context, id string, params *GetTaxRatesIdParams, body GetTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRatesIdResponse, error) {
	rsp, err := c.GetTaxRatesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesIdResponse(rsp)
}

// PostTaxRatesIdWithBodyWithResponse request with arbitrary body returning *PostTaxRatesIdResponse
func (c *ClientWithResponses) PostTaxRatesIdWithBodyWithResponse(ctx context.Context, id string, params *PostTaxRatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesIdResponse, error) {
	rsp, err := c.PostTaxRatesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesIdResponse(rsp)
}

func (c *ClientWithResponses) PostTaxRatesIdWithResponse(ctx context.Context, id string, params *PostTaxRatesIdParams, body PostTaxRatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesIdResponse, error) {
	rsp, err := c.PostTaxRatesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesIdResponse(rsp)
}

// PostTaxRatesIdRulesWithBodyWithResponse request with arbitrary body returning *PostTaxRatesIdRulesResponse
func (c *ClientWithResponses) PostTaxRatesIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesIdRulesResponse, error) {
	rsp, err := c.PostTaxRatesIdRulesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PostTaxRatesIdRulesWithResponse(ctx context.Context, id string, params *PostTaxRatesIdRulesParams, body PostTaxRatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesIdRulesResponse, error) {
	rsp, err := c.PostTaxRatesIdRules(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesIdRulesResponse(rsp)
}

// DeleteTaxRatesIdRulesRuleIdWithBodyWithResponse request with arbitrary body returning *DeleteTaxRatesIdRulesRuleIdResponse
func (c *ClientWithResponses) DeleteTaxRatesIdRulesRuleIdWithBodyWithResponse(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdRulesRuleIdResponse, error) {
	rsp, err := c.DeleteTaxRatesIdRulesRuleIdWithBody(ctx, id, ruleId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRatesIdRulesRuleIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteTaxRatesIdRulesRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *DeleteTaxRatesIdRulesRuleIdParams, body DeleteTaxRatesIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTaxRatesIdRulesRuleIdResponse, error) {
	rsp, err := c.DeleteTaxRatesIdRulesRuleId(ctx, id, ruleId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRatesIdRulesRuleIdResponse(rsp)
}

// GetTaxRegionsWithBodyWithResponse request with arbitrary body returning *GetTaxRegionsResponse
func (c *ClientWithResponses) GetTaxRegionsWithBodyWithResponse(ctx context.Context, params *GetTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRegionsResponse, error) {
	rsp, err := c.GetTaxRegionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegionsResponse(rsp)
}

func (c *ClientWithResponses) GetTaxRegionsWithResponse(ctx context.Context, params *GetTaxRegionsParams, body GetTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRegionsResponse, error) {
	rsp, err := c.GetTaxRegions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegionsResponse(rsp)
}

// PostTaxRegionsWithBodyWithResponse request with arbitrary body returning *PostTaxRegionsResponse
func (c *ClientWithResponses) PostTaxRegionsWithBodyWithResponse(ctx context.Context, params *PostTaxRegionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRegionsResponse, error) {
	rsp, err := c.PostTaxRegionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRegionsResponse(rsp)
}

func (c *ClientWithResponses) PostTaxRegionsWithResponse(ctx context.Context, params *PostTaxRegionsParams, body PostTaxRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRegionsResponse, error) {
	rsp, err := c.PostTaxRegions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRegionsResponse(rsp)
}

// DeleteTaxRegionsIdWithBodyWithResponse request with arbitrary body returning *DeleteTaxRegionsIdResponse
func (c *ClientWithResponses) DeleteTaxRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTaxRegionsIdResponse, error) {
	rsp, err := c.DeleteTaxRegionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRegionsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteTaxRegionsIdWithResponse(ctx context.Context, id string, params *DeleteTaxRegionsIdParams, body DeleteTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTaxRegionsIdResponse, error) {
	rsp, err := c.DeleteTaxRegionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRegionsIdResponse(rsp)
}

// GetTaxRegionsIdWithBodyWithResponse request with arbitrary body returning *GetTaxRegionsIdResponse
func (c *ClientWithResponses) GetTaxRegionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetTaxRegionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTaxRegionsIdResponse, error) {
	rsp, err := c.GetTaxRegionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegionsIdResponse(rsp)
}

func (c *ClientWithResponses) GetTaxRegionsIdWithResponse(ctx context.Context, id string, params *GetTaxRegionsIdParams, body GetTaxRegionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTaxRegionsIdResponse, error) {
	rsp, err := c.GetTaxRegionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegionsIdResponse(rsp)
}

// PostUploadsWithBodyWithResponse request with arbitrary body returning *PostUploadsResponse
func (c *ClientWithResponses) PostUploadsWithBodyWithResponse(ctx context.Context, params *PostUploadsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadsResponse, error) {
	rsp, err := c.PostUploadsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadsResponse(rsp)
}

func (c *ClientWithResponses) PostUploadsWithResponse(ctx context.Context, params *PostUploadsParams, body PostUploadsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUploadsResponse, error) {
	rsp, err := c.PostUploads(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadsResponse(rsp)
}

// DeleteUploadsIdWithBodyWithResponse request with arbitrary body returning *DeleteUploadsIdResponse
func (c *ClientWithResponses) DeleteUploadsIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUploadsIdResponse, error) {
	rsp, err := c.DeleteUploadsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUploadsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteUploadsIdWithResponse(ctx context.Context, id string, params *DeleteUploadsIdParams, body DeleteUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUploadsIdResponse, error) {
	rsp, err := c.DeleteUploadsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUploadsIdResponse(rsp)
}

// GetUploadsIdWithBodyWithResponse request with arbitrary body returning *GetUploadsIdResponse
func (c *ClientWithResponses) GetUploadsIdWithBodyWithResponse(ctx context.Context, id string, params *GetUploadsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadsIdResponse, error) {
	rsp, err := c.GetUploadsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadsIdResponse(rsp)
}

func (c *ClientWithResponses) GetUploadsIdWithResponse(ctx context.Context, id string, params *GetUploadsIdParams, body GetUploadsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadsIdResponse, error) {
	rsp, err := c.GetUploadsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadsIdResponse(rsp)
}

// GetUsersWithBodyWithResponse request with arbitrary body returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithBodyWithResponse(ctx context.Context, params *GetUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, body GetUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, params *PostUsersParams, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// GetUsersMeWithBodyWithResponse request with arbitrary body returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithBodyWithResponse(ctx context.Context, params *GetUsersMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, params *GetUsersMeParams, body GetUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// DeleteUsersIdWithBodyWithResponse request with arbitrary body returning *DeleteUsersIdResponse
func (c *ClientWithResponses) DeleteUsersIdWithBodyWithResponse(ctx context.Context, id string, params *DeleteUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUsersIdResponse, error) {
	rsp, err := c.DeleteUsersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteUsersIdWithResponse(ctx context.Context, id string, params *DeleteUsersIdParams, body DeleteUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUsersIdResponse, error) {
	rsp, err := c.DeleteUsersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIdResponse(rsp)
}

// GetUsersIdWithBodyWithResponse request with arbitrary body returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithBodyWithResponse(ctx context.Context, id string, params *GetUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id string, params *GetUsersIdParams, body GetUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// PostUsersIdWithBodyWithResponse request with arbitrary body returning *PostUsersIdResponse
func (c *ClientWithResponses) PostUsersIdWithBodyWithResponse(ctx context.Context, id string, params *PostUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersIdResponse, error) {
	rsp, err := c.PostUsersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PostUsersIdWithResponse(ctx context.Context, id string, params *PostUsersIdParams, body PostUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersIdResponse, error) {
	rsp, err := c.PostUsersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersIdResponse(rsp)
}

// GetWorkflowsExecutionsWithBodyWithResponse request with arbitrary body returning *GetWorkflowsExecutionsResponse
func (c *ClientWithResponses) GetWorkflowsExecutionsWithBodyWithResponse(ctx context.Context, params *GetWorkflowsExecutionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsResponse(rsp)
}

func (c *ClientWithResponses) GetWorkflowsExecutionsWithResponse(ctx context.Context, params *GetWorkflowsExecutionsParams, body GetWorkflowsExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsResponse, error) {
	rsp, err := c.GetWorkflowsExecutions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsResponse(rsp)
}

// GetWorkflowsExecutionsIdWithBodyWithResponse request with arbitrary body returning *GetWorkflowsExecutionsIdResponse
func (c *ClientWithResponses) GetWorkflowsExecutionsIdWithBodyWithResponse(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsIdResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsIdResponse(rsp)
}

func (c *ClientWithResponses) GetWorkflowsExecutionsIdWithResponse(ctx context.Context, id string, params *GetWorkflowsExecutionsIdParams, body GetWorkflowsExecutionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsIdResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsIdResponse(rsp)
}

// PostWorkflowsExecutionsWorkflowIdRunWithBodyWithResponse request with arbitrary body returning *PostWorkflowsExecutionsWorkflowIdRunResponse
func (c *ClientWithResponses) PostWorkflowsExecutionsWorkflowIdRunWithBodyWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdRunResponse, error) {
	rsp, err := c.PostWorkflowsExecutionsWorkflowIdRunWithBody(ctx, workflowId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsExecutionsWorkflowIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsExecutionsWorkflowIdRunWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdRunParams, body PostWorkflowsExecutionsWorkflowIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdRunResponse, error) {
	rsp, err := c.PostWorkflowsExecutionsWorkflowIdRun(ctx, workflowId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsExecutionsWorkflowIdRunResponse(rsp)
}

// PostWorkflowsExecutionsWorkflowIdStepsFailureWithBodyWithResponse request with arbitrary body returning *PostWorkflowsExecutionsWorkflowIdStepsFailureResponse
func (c *ClientWithResponses) PostWorkflowsExecutionsWorkflowIdStepsFailureWithBodyWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsFailureResponse, error) {
	rsp, err := c.PostWorkflowsExecutionsWorkflowIdStepsFailureWithBody(ctx, workflowId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsExecutionsWorkflowIdStepsFailureResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsExecutionsWorkflowIdStepsFailureWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsFailureParams, body PostWorkflowsExecutionsWorkflowIdStepsFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsFailureResponse, error) {
	rsp, err := c.PostWorkflowsExecutionsWorkflowIdStepsFailure(ctx, workflowId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsExecutionsWorkflowIdStepsFailureResponse(rsp)
}

// PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBodyWithResponse request with arbitrary body returning *PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse
func (c *ClientWithResponses) PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBodyWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse, error) {
	rsp, err := c.PostWorkflowsExecutionsWorkflowIdStepsSuccessWithBody(ctx, workflowId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsExecutionsWorkflowIdStepsSuccessResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsExecutionsWorkflowIdStepsSuccessWithResponse(ctx context.Context, workflowId string, params *PostWorkflowsExecutionsWorkflowIdStepsSuccessParams, body PostWorkflowsExecutionsWorkflowIdStepsSuccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse, error) {
	rsp, err := c.PostWorkflowsExecutionsWorkflowIdStepsSuccess(ctx, workflowId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsExecutionsWorkflowIdStepsSuccessResponse(rsp)
}

// GetWorkflowsExecutionsWorkflowIdSubscribeWithBodyWithResponse request with arbitrary body returning *GetWorkflowsExecutionsWorkflowIdSubscribeResponse
func (c *ClientWithResponses) GetWorkflowsExecutionsWorkflowIdSubscribeWithBodyWithResponse(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdSubscribeResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWorkflowIdSubscribeWithBody(ctx, workflowId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsWorkflowIdSubscribeResponse(rsp)
}

func (c *ClientWithResponses) GetWorkflowsExecutionsWorkflowIdSubscribeWithResponse(ctx context.Context, workflowId string, params *GetWorkflowsExecutionsWorkflowIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdSubscribeResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWorkflowIdSubscribe(ctx, workflowId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsWorkflowIdSubscribeResponse(rsp)
}

// GetWorkflowsExecutionsWorkflowIdTransactionIdWithBodyWithResponse request with arbitrary body returning *GetWorkflowsExecutionsWorkflowIdTransactionIdResponse
func (c *ClientWithResponses) GetWorkflowsExecutionsWorkflowIdTransactionIdWithBodyWithResponse(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWorkflowIdTransactionIdWithBody(ctx, workflowId, transactionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsWorkflowIdTransactionIdResponse(rsp)
}

func (c *ClientWithResponses) GetWorkflowsExecutionsWorkflowIdTransactionIdWithResponse(ctx context.Context, workflowId string, transactionId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWorkflowIdTransactionId(ctx, workflowId, transactionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsWorkflowIdTransactionIdResponse(rsp)
}

// GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBodyWithResponse request with arbitrary body returning *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse
func (c *ClientWithResponses) GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBodyWithResponse(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithBody(ctx, workflowId, transactionId, stepId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse(rsp)
}

func (c *ClientWithResponses) GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithResponse(ctx context.Context, workflowId string, transactionId string, stepId string, params *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeParams, body GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse, error) {
	rsp, err := c.GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe(ctx, workflowId, transactionId, stepId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse(rsp)
}

// ParseGetApiKeysResponse parses an HTTP response from a GetApiKeysWithResponse call
func ParseGetApiKeysResponse(rsp *http.Response) (*GetApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiKeysResponse parses an HTTP response from a PostApiKeysWithResponse call
func ParsePostApiKeysResponse(rsp *http.Response) (*PostApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeysIdResponse parses an HTTP response from a DeleteApiKeysIdWithResponse call
func ParseDeleteApiKeysIdResponse(rsp *http.Response) (*DeleteApiKeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiKeysIdResponse parses an HTTP response from a GetApiKeysIdWithResponse call
func ParseGetApiKeysIdResponse(rsp *http.Response) (*GetApiKeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiKeysIdResponse parses an HTTP response from a PostApiKeysIdWithResponse call
func ParsePostApiKeysIdResponse(rsp *http.Response) (*PostApiKeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiKeysIdRevokeResponse parses an HTTP response from a PostApiKeysIdRevokeWithResponse call
func ParsePostApiKeysIdRevokeResponse(rsp *http.Response) (*PostApiKeysIdRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKeysIdRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiKeysIdSalesChannelsResponse parses an HTTP response from a PostApiKeysIdSalesChannelsWithResponse call
func ParsePostApiKeysIdSalesChannelsResponse(rsp *http.Response) (*PostApiKeysIdSalesChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKeysIdSalesChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignsResponse parses an HTTP response from a GetCampaignsWithResponse call
func ParseGetCampaignsResponse(rsp *http.Response) (*GetCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCampaignsResponse parses an HTTP response from a PostCampaignsWithResponse call
func ParsePostCampaignsResponse(rsp *http.Response) (*PostCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCampaignsIdResponse parses an HTTP response from a DeleteCampaignsIdWithResponse call
func ParseDeleteCampaignsIdResponse(rsp *http.Response) (*DeleteCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignsIdResponse parses an HTTP response from a GetCampaignsIdWithResponse call
func ParseGetCampaignsIdResponse(rsp *http.Response) (*GetCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCampaignsIdResponse parses an HTTP response from a PostCampaignsIdWithResponse call
func ParsePostCampaignsIdResponse(rsp *http.Response) (*PostCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCollectionsResponse parses an HTTP response from a GetCollectionsWithResponse call
func ParseGetCollectionsResponse(rsp *http.Response) (*GetCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsResponse parses an HTTP response from a PostCollectionsWithResponse call
func ParsePostCollectionsResponse(rsp *http.Response) (*PostCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCollectionsIdResponse parses an HTTP response from a DeleteCollectionsIdWithResponse call
func ParseDeleteCollectionsIdResponse(rsp *http.Response) (*DeleteCollectionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCollectionsIdResponse parses an HTTP response from a GetCollectionsIdWithResponse call
func ParseGetCollectionsIdResponse(rsp *http.Response) (*GetCollectionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsIdResponse parses an HTTP response from a PostCollectionsIdWithResponse call
func ParsePostCollectionsIdResponse(rsp *http.Response) (*PostCollectionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsIdProductsResponse parses an HTTP response from a PostCollectionsIdProductsWithResponse call
func ParsePostCollectionsIdProductsResponse(rsp *http.Response) (*PostCollectionsIdProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsIdProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCurrenciesResponse parses an HTTP response from a GetCurrenciesWithResponse call
func ParseGetCurrenciesResponse(rsp *http.Response) (*GetCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCurrenciesCodeResponse parses an HTTP response from a GetCurrenciesCodeWithResponse call
func ParseGetCurrenciesCodeResponse(rsp *http.Response) (*GetCurrenciesCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrenciesCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomerGroupsResponse parses an HTTP response from a GetCustomerGroupsWithResponse call
func ParseGetCustomerGroupsResponse(rsp *http.Response) (*GetCustomerGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomerGroupsResponse parses an HTTP response from a PostCustomerGroupsWithResponse call
func ParsePostCustomerGroupsResponse(rsp *http.Response) (*PostCustomerGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomerGroupsIdResponse parses an HTTP response from a DeleteCustomerGroupsIdWithResponse call
func ParseDeleteCustomerGroupsIdResponse(rsp *http.Response) (*DeleteCustomerGroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomerGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomerGroupsIdResponse parses an HTTP response from a GetCustomerGroupsIdWithResponse call
func ParseGetCustomerGroupsIdResponse(rsp *http.Response) (*GetCustomerGroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomerGroupsIdResponse parses an HTTP response from a PostCustomerGroupsIdWithResponse call
func ParsePostCustomerGroupsIdResponse(rsp *http.Response) (*PostCustomerGroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomerGroupsIdCustomersResponse parses an HTTP response from a PostCustomerGroupsIdCustomersWithResponse call
func ParsePostCustomerGroupsIdCustomersResponse(rsp *http.Response) (*PostCustomerGroupsIdCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerGroupsIdCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomersResponse parses an HTTP response from a GetCustomersWithResponse call
func ParseGetCustomersResponse(rsp *http.Response) (*GetCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminCustomerListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomersResponse parses an HTTP response from a PostCustomersWithResponse call
func ParsePostCustomersResponse(rsp *http.Response) (*PostCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomersIdResponse parses an HTTP response from a DeleteCustomersIdWithResponse call
func ParseDeleteCustomersIdResponse(rsp *http.Response) (*DeleteCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomersIdResponse parses an HTTP response from a GetCustomersIdWithResponse call
func ParseGetCustomersIdResponse(rsp *http.Response) (*GetCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomersIdResponse parses an HTTP response from a PostCustomersIdWithResponse call
func ParsePostCustomersIdResponse(rsp *http.Response) (*PostCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomersIdAddressesResponse parses an HTTP response from a GetCustomersIdAddressesWithResponse call
func ParseGetCustomersIdAddressesResponse(rsp *http.Response) (*GetCustomersIdAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomersIdAddressesResponse parses an HTTP response from a PostCustomersIdAddressesWithResponse call
func ParsePostCustomersIdAddressesResponse(rsp *http.Response) (*PostCustomersIdAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersIdAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomersIdAddressesAddressIdResponse parses an HTTP response from a DeleteCustomersIdAddressesAddressIdWithResponse call
func ParseDeleteCustomersIdAddressesAddressIdResponse(rsp *http.Response) (*DeleteCustomersIdAddressesAddressIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomersIdAddressesAddressIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomersIdAddressesAddressIdResponse parses an HTTP response from a GetCustomersIdAddressesAddressIdWithResponse call
func ParseGetCustomersIdAddressesAddressIdResponse(rsp *http.Response) (*GetCustomersIdAddressesAddressIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdAddressesAddressIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCustomersIdAddressesAddressIdResponse parses an HTTP response from a PostCustomersIdAddressesAddressIdWithResponse call
func ParsePostCustomersIdAddressesAddressIdResponse(rsp *http.Response) (*PostCustomersIdAddressesAddressIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersIdAddressesAddressIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDraftOrdersResponse parses an HTTP response from a GetDraftOrdersWithResponse call
func ParseGetDraftOrdersResponse(rsp *http.Response) (*GetDraftOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDraftOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostDraftOrdersResponse parses an HTTP response from a PostDraftOrdersWithResponse call
func ParsePostDraftOrdersResponse(rsp *http.Response) (*PostDraftOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDraftOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDraftOrdersIdResponse parses an HTTP response from a GetDraftOrdersIdWithResponse call
func ParseGetDraftOrdersIdResponse(rsp *http.Response) (*GetDraftOrdersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDraftOrdersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFulfillmentProvidersResponse parses an HTTP response from a GetFulfillmentProvidersWithResponse call
func ParseGetFulfillmentProvidersResponse(rsp *http.Response) (*GetFulfillmentProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFulfillmentProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFulfillmentSetsIdResponse parses an HTTP response from a DeleteFulfillmentSetsIdWithResponse call
func ParseDeleteFulfillmentSetsIdResponse(rsp *http.Response) (*DeleteFulfillmentSetsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFulfillmentSetsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminFulfillmentSetsDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFulfillmentSetsIdServiceZonesResponse parses an HTTP response from a PostFulfillmentSetsIdServiceZonesWithResponse call
func ParsePostFulfillmentSetsIdServiceZonesResponse(rsp *http.Response) (*PostFulfillmentSetsIdServiceZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFulfillmentSetsIdServiceZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFulfillmentSetsIdServiceZonesZoneIdResponse parses an HTTP response from a DeleteFulfillmentSetsIdServiceZonesZoneIdWithResponse call
func ParseDeleteFulfillmentSetsIdServiceZonesZoneIdResponse(rsp *http.Response) (*DeleteFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFulfillmentSetsIdServiceZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminServiceZoneDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFulfillmentSetsIdServiceZonesZoneIdResponse parses an HTTP response from a GetFulfillmentSetsIdServiceZonesZoneIdWithResponse call
func ParseGetFulfillmentSetsIdServiceZonesZoneIdResponse(rsp *http.Response) (*GetFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFulfillmentSetsIdServiceZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminServiceZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFulfillmentSetsIdServiceZonesZoneIdResponse parses an HTTP response from a PostFulfillmentSetsIdServiceZonesZoneIdWithResponse call
func ParsePostFulfillmentSetsIdServiceZonesZoneIdResponse(rsp *http.Response) (*PostFulfillmentSetsIdServiceZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFulfillmentSetsIdServiceZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminFulfillmentSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFulfillmentsResponse parses an HTTP response from a PostFulfillmentsWithResponse call
func ParsePostFulfillmentsResponse(rsp *http.Response) (*PostFulfillmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFulfillmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFulfillmentsIdCancelResponse parses an HTTP response from a PostFulfillmentsIdCancelWithResponse call
func ParsePostFulfillmentsIdCancelResponse(rsp *http.Response) (*PostFulfillmentsIdCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFulfillmentsIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFulfillmentsIdShipmentResponse parses an HTTP response from a PostFulfillmentsIdShipmentWithResponse call
func ParsePostFulfillmentsIdShipmentResponse(rsp *http.Response) (*PostFulfillmentsIdShipmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFulfillmentsIdShipmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInventoryItemsResponse parses an HTTP response from a GetInventoryItemsWithResponse call
func ParseGetInventoryItemsResponse(rsp *http.Response) (*GetInventoryItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInventoryItemsResponse parses an HTTP response from a PostInventoryItemsWithResponse call
func ParsePostInventoryItemsResponse(rsp *http.Response) (*PostInventoryItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInventoryItemsIdResponse parses an HTTP response from a DeleteInventoryItemsIdWithResponse call
func ParseDeleteInventoryItemsIdResponse(rsp *http.Response) (*DeleteInventoryItemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInventoryItemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInventoryItemsIdResponse parses an HTTP response from a GetInventoryItemsIdWithResponse call
func ParseGetInventoryItemsIdResponse(rsp *http.Response) (*GetInventoryItemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryItemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInventoryItemsIdResponse parses an HTTP response from a PostInventoryItemsIdWithResponse call
func ParsePostInventoryItemsIdResponse(rsp *http.Response) (*PostInventoryItemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryItemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInventoryItemsIdLocationLevelsResponse parses an HTTP response from a GetInventoryItemsIdLocationLevelsWithResponse call
func ParseGetInventoryItemsIdLocationLevelsResponse(rsp *http.Response) (*GetInventoryItemsIdLocationLevelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryItemsIdLocationLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInventoryItemsIdLocationLevelsResponse parses an HTTP response from a PostInventoryItemsIdLocationLevelsWithResponse call
func ParsePostInventoryItemsIdLocationLevelsResponse(rsp *http.Response) (*PostInventoryItemsIdLocationLevelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryItemsIdLocationLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInventoryItemsIdLocationLevelsBatchResponse parses an HTTP response from a PostInventoryItemsIdLocationLevelsBatchWithResponse call
func ParsePostInventoryItemsIdLocationLevelsBatchResponse(rsp *http.Response) (*PostInventoryItemsIdLocationLevelsBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryItemsIdLocationLevelsBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInventoryItemsIdLocationLevelsLocationIdResponse parses an HTTP response from a DeleteInventoryItemsIdLocationLevelsLocationIdWithResponse call
func ParseDeleteInventoryItemsIdLocationLevelsLocationIdResponse(rsp *http.Response) (*DeleteInventoryItemsIdLocationLevelsLocationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInventoryItemsIdLocationLevelsLocationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInventoryItemsIdLocationLevelsLocationIdResponse parses an HTTP response from a PostInventoryItemsIdLocationLevelsLocationIdWithResponse call
func ParsePostInventoryItemsIdLocationLevelsLocationIdResponse(rsp *http.Response) (*PostInventoryItemsIdLocationLevelsLocationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryItemsIdLocationLevelsLocationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInvitesResponse parses an HTTP response from a GetInvitesWithResponse call
func ParseGetInvitesResponse(rsp *http.Response) (*GetInvitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInvitesResponse parses an HTTP response from a PostInvitesWithResponse call
func ParsePostInvitesResponse(rsp *http.Response) (*PostInvitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInvitesAcceptResponse parses an HTTP response from a PostInvitesAcceptWithResponse call
func ParsePostInvitesAcceptResponse(rsp *http.Response) (*PostInvitesAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvitesAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInvitesIdResponse parses an HTTP response from a DeleteInvitesIdWithResponse call
func ParseDeleteInvitesIdResponse(rsp *http.Response) (*DeleteInvitesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvitesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInvitesIdResponse parses an HTTP response from a GetInvitesIdWithResponse call
func ParseGetInvitesIdResponse(rsp *http.Response) (*GetInvitesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvitesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostInvitesIdResendResponse parses an HTTP response from a PostInvitesIdResendWithResponse call
func ParsePostInvitesIdResendResponse(rsp *http.Response) (*PostInvitesIdResendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvitesIdResendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrdersResponse parses an HTTP response from a GetOrdersWithResponse call
func ParseGetOrdersResponse(rsp *http.Response) (*GetOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrdersIdResponse parses an HTTP response from a GetOrdersIdWithResponse call
func ParseGetOrdersIdResponse(rsp *http.Response) (*GetOrdersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPaymentsResponse parses an HTTP response from a GetPaymentsWithResponse call
func ParseGetPaymentsResponse(rsp *http.Response) (*GetPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPaymentsPaymentProvidersResponse parses an HTTP response from a GetPaymentsPaymentProvidersWithResponse call
func ParseGetPaymentsPaymentProvidersResponse(rsp *http.Response) (*GetPaymentsPaymentProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsPaymentProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPaymentsIdResponse parses an HTTP response from a GetPaymentsIdWithResponse call
func ParseGetPaymentsIdResponse(rsp *http.Response) (*GetPaymentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPaymentsIdCaptureResponse parses an HTTP response from a PostPaymentsIdCaptureWithResponse call
func ParsePostPaymentsIdCaptureResponse(rsp *http.Response) (*PostPaymentsIdCaptureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPaymentsIdCaptureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPaymentsIdRefundResponse parses an HTTP response from a PostPaymentsIdRefundWithResponse call
func ParsePostPaymentsIdRefundResponse(rsp *http.Response) (*PostPaymentsIdRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPaymentsIdRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPriceListsResponse parses an HTTP response from a GetPriceListsWithResponse call
func ParseGetPriceListsResponse(rsp *http.Response) (*GetPriceListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPriceListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPriceListsResponse parses an HTTP response from a PostPriceListsWithResponse call
func ParsePostPriceListsResponse(rsp *http.Response) (*PostPriceListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPriceListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePriceListsIdResponse parses an HTTP response from a DeletePriceListsIdWithResponse call
func ParseDeletePriceListsIdResponse(rsp *http.Response) (*DeletePriceListsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePriceListsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPriceListsIdResponse parses an HTTP response from a GetPriceListsIdWithResponse call
func ParseGetPriceListsIdResponse(rsp *http.Response) (*GetPriceListsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPriceListsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPriceListsIdResponse parses an HTTP response from a PostPriceListsIdWithResponse call
func ParsePostPriceListsIdResponse(rsp *http.Response) (*PostPriceListsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPriceListsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPriceListsIdPricesBatchResponse parses an HTTP response from a PostPriceListsIdPricesBatchWithResponse call
func ParsePostPriceListsIdPricesBatchResponse(rsp *http.Response) (*PostPriceListsIdPricesBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPriceListsIdPricesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPriceListsIdProductsResponse parses an HTTP response from a PostPriceListsIdProductsWithResponse call
func ParsePostPriceListsIdProductsResponse(rsp *http.Response) (*PostPriceListsIdProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPriceListsIdProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingRuleTypesResponse parses an HTTP response from a GetPricingRuleTypesWithResponse call
func ParseGetPricingRuleTypesResponse(rsp *http.Response) (*GetPricingRuleTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingRuleTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPricingRuleTypesResponse parses an HTTP response from a PostPricingRuleTypesWithResponse call
func ParsePostPricingRuleTypesResponse(rsp *http.Response) (*PostPricingRuleTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPricingRuleTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePricingRuleTypesIdResponse parses an HTTP response from a DeletePricingRuleTypesIdWithResponse call
func ParseDeletePricingRuleTypesIdResponse(rsp *http.Response) (*DeletePricingRuleTypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePricingRuleTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingRuleTypesIdResponse parses an HTTP response from a GetPricingRuleTypesIdWithResponse call
func ParseGetPricingRuleTypesIdResponse(rsp *http.Response) (*GetPricingRuleTypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingRuleTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPricingRuleTypesIdResponse parses an HTTP response from a PostPricingRuleTypesIdWithResponse call
func ParsePostPricingRuleTypesIdResponse(rsp *http.Response) (*PostPricingRuleTypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPricingRuleTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductCategoriesResponse parses an HTTP response from a GetProductCategoriesWithResponse call
func ParseGetProductCategoriesResponse(rsp *http.Response) (*GetProductCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminProductCategoryListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductCategoriesResponse parses an HTTP response from a PostProductCategoriesWithResponse call
func ParsePostProductCategoriesResponse(rsp *http.Response) (*PostProductCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminProductCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductCategoriesIdResponse parses an HTTP response from a GetProductCategoriesIdWithResponse call
func ParseGetProductCategoriesIdResponse(rsp *http.Response) (*GetProductCategoriesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductCategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminProductCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductCategoriesIdResponse parses an HTTP response from a PostProductCategoriesIdWithResponse call
func ParsePostProductCategoriesIdResponse(rsp *http.Response) (*PostProductCategoriesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductCategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminProductCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductCategoriesIdProductsResponse parses an HTTP response from a PostProductCategoriesIdProductsWithResponse call
func ParsePostProductCategoriesIdProductsResponse(rsp *http.Response) (*PostProductCategoriesIdProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductCategoriesIdProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminProductCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductTypesResponse parses an HTTP response from a GetProductTypesWithResponse call
func ParseGetProductTypesResponse(rsp *http.Response) (*GetProductTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductTypesResponse parses an HTTP response from a PostProductTypesWithResponse call
func ParsePostProductTypesResponse(rsp *http.Response) (*PostProductTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProductTypesIdResponse parses an HTTP response from a DeleteProductTypesIdWithResponse call
func ParseDeleteProductTypesIdResponse(rsp *http.Response) (*DeleteProductTypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductTypesIdResponse parses an HTTP response from a GetProductTypesIdWithResponse call
func ParseGetProductTypesIdResponse(rsp *http.Response) (*GetProductTypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductTypesIdResponse parses an HTTP response from a PostProductTypesIdWithResponse call
func ParsePostProductTypesIdResponse(rsp *http.Response) (*PostProductTypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsResponse parses an HTTP response from a PostProductsWithResponse call
func ParsePostProductsResponse(rsp *http.Response) (*PostProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsBatchResponse parses an HTTP response from a PostProductsBatchWithResponse call
func ParsePostProductsBatchResponse(rsp *http.Response) (*PostProductsBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProductsIdResponse parses an HTTP response from a DeleteProductsIdWithResponse call
func ParseDeleteProductsIdResponse(rsp *http.Response) (*DeleteProductsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsIdResponse parses an HTTP response from a GetProductsIdWithResponse call
func ParseGetProductsIdResponse(rsp *http.Response) (*GetProductsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsIdResponse parses an HTTP response from a PostProductsIdWithResponse call
func ParsePostProductsIdResponse(rsp *http.Response) (*PostProductsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsIdOptionsResponse parses an HTTP response from a GetProductsIdOptionsWithResponse call
func ParseGetProductsIdOptionsResponse(rsp *http.Response) (*GetProductsIdOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsIdOptionsResponse parses an HTTP response from a PostProductsIdOptionsWithResponse call
func ParsePostProductsIdOptionsResponse(rsp *http.Response) (*PostProductsIdOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsIdOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProductsIdOptionsOptionIdResponse parses an HTTP response from a DeleteProductsIdOptionsOptionIdWithResponse call
func ParseDeleteProductsIdOptionsOptionIdResponse(rsp *http.Response) (*DeleteProductsIdOptionsOptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductsIdOptionsOptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsIdOptionsOptionIdResponse parses an HTTP response from a GetProductsIdOptionsOptionIdWithResponse call
func ParseGetProductsIdOptionsOptionIdResponse(rsp *http.Response) (*GetProductsIdOptionsOptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdOptionsOptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsIdOptionsOptionIdResponse parses an HTTP response from a PostProductsIdOptionsOptionIdWithResponse call
func ParsePostProductsIdOptionsOptionIdResponse(rsp *http.Response) (*PostProductsIdOptionsOptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsIdOptionsOptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsIdVariantsResponse parses an HTTP response from a GetProductsIdVariantsWithResponse call
func ParseGetProductsIdVariantsResponse(rsp *http.Response) (*GetProductsIdVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsIdVariantsResponse parses an HTTP response from a PostProductsIdVariantsWithResponse call
func ParsePostProductsIdVariantsResponse(rsp *http.Response) (*PostProductsIdVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsIdVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsIdVariantsBatchResponse parses an HTTP response from a PostProductsIdVariantsBatchWithResponse call
func ParsePostProductsIdVariantsBatchResponse(rsp *http.Response) (*PostProductsIdVariantsBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsIdVariantsBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProductsIdVariantsVariantIdResponse parses an HTTP response from a DeleteProductsIdVariantsVariantIdWithResponse call
func ParseDeleteProductsIdVariantsVariantIdResponse(rsp *http.Response) (*DeleteProductsIdVariantsVariantIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductsIdVariantsVariantIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsIdVariantsVariantIdResponse parses an HTTP response from a GetProductsIdVariantsVariantIdWithResponse call
func ParseGetProductsIdVariantsVariantIdResponse(rsp *http.Response) (*GetProductsIdVariantsVariantIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdVariantsVariantIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsIdVariantsVariantIdResponse parses an HTTP response from a PostProductsIdVariantsVariantIdWithResponse call
func ParsePostProductsIdVariantsVariantIdResponse(rsp *http.Response) (*PostProductsIdVariantsVariantIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsIdVariantsVariantIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPromotionsResponse parses an HTTP response from a GetPromotionsWithResponse call
func ParseGetPromotionsResponse(rsp *http.Response) (*GetPromotionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPromotionsResponse parses an HTTP response from a PostPromotionsWithResponse call
func ParsePostPromotionsResponse(rsp *http.Response) (*PostPromotionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPromotionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPromotionsRuleAttributeOptionsRuleTypeResponse parses an HTTP response from a GetPromotionsRuleAttributeOptionsRuleTypeWithResponse call
func ParseGetPromotionsRuleAttributeOptionsRuleTypeResponse(rsp *http.Response) (*GetPromotionsRuleAttributeOptionsRuleTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionsRuleAttributeOptionsRuleTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPromotionsRuleOperatorOptionsResponse parses an HTTP response from a GetPromotionsRuleOperatorOptionsWithResponse call
func ParseGetPromotionsRuleOperatorOptionsResponse(rsp *http.Response) (*GetPromotionsRuleOperatorOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionsRuleOperatorOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse parses an HTTP response from a GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdWithResponse call
func ParseGetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse(rsp *http.Response) (*GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionsRuleValueOptionsRuleTypeRuleAttributeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePromotionsIdResponse parses an HTTP response from a DeletePromotionsIdWithResponse call
func ParseDeletePromotionsIdResponse(rsp *http.Response) (*DeletePromotionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePromotionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPromotionsIdResponse parses an HTTP response from a GetPromotionsIdWithResponse call
func ParseGetPromotionsIdResponse(rsp *http.Response) (*GetPromotionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPromotionsIdResponse parses an HTTP response from a PostPromotionsIdWithResponse call
func ParsePostPromotionsIdResponse(rsp *http.Response) (*PostPromotionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPromotionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPromotionsIdBuyRulesBatchResponse parses an HTTP response from a PostPromotionsIdBuyRulesBatchWithResponse call
func ParsePostPromotionsIdBuyRulesBatchResponse(rsp *http.Response) (*PostPromotionsIdBuyRulesBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPromotionsIdBuyRulesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPromotionsIdRulesBatchResponse parses an HTTP response from a PostPromotionsIdRulesBatchWithResponse call
func ParsePostPromotionsIdRulesBatchResponse(rsp *http.Response) (*PostPromotionsIdRulesBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPromotionsIdRulesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPromotionsIdTargetRulesBatchResponse parses an HTTP response from a PostPromotionsIdTargetRulesBatchWithResponse call
func ParsePostPromotionsIdTargetRulesBatchResponse(rsp *http.Response) (*PostPromotionsIdTargetRulesBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPromotionsIdTargetRulesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPromotionsIdRuleTypeResponse parses an HTTP response from a GetPromotionsIdRuleTypeWithResponse call
func ParseGetPromotionsIdRuleTypeResponse(rsp *http.Response) (*GetPromotionsIdRuleTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionsIdRuleTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRegionsResponse parses an HTTP response from a GetRegionsWithResponse call
func ParseGetRegionsResponse(rsp *http.Response) (*GetRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRegionsResponse parses an HTTP response from a PostRegionsWithResponse call
func ParsePostRegionsResponse(rsp *http.Response) (*PostRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRegionsIdResponse parses an HTTP response from a DeleteRegionsIdWithResponse call
func ParseDeleteRegionsIdResponse(rsp *http.Response) (*DeleteRegionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRegionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRegionsIdResponse parses an HTTP response from a GetRegionsIdWithResponse call
func ParseGetRegionsIdResponse(rsp *http.Response) (*GetRegionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRegionsIdResponse parses an HTTP response from a PostRegionsIdWithResponse call
func ParsePostRegionsIdResponse(rsp *http.Response) (*PostRegionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReservationsResponse parses an HTTP response from a GetReservationsWithResponse call
func ParseGetReservationsResponse(rsp *http.Response) (*GetReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostReservationsResponse parses an HTTP response from a PostReservationsWithResponse call
func ParsePostReservationsResponse(rsp *http.Response) (*PostReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteReservationsIdResponse parses an HTTP response from a DeleteReservationsIdWithResponse call
func ParseDeleteReservationsIdResponse(rsp *http.Response) (*DeleteReservationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReservationsIdResponse parses an HTTP response from a GetReservationsIdWithResponse call
func ParseGetReservationsIdResponse(rsp *http.Response) (*GetReservationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostReservationsIdResponse parses an HTTP response from a PostReservationsIdWithResponse call
func ParsePostReservationsIdResponse(rsp *http.Response) (*PostReservationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSalesChannelsResponse parses an HTTP response from a GetSalesChannelsWithResponse call
func ParseGetSalesChannelsResponse(rsp *http.Response) (*GetSalesChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSalesChannelsResponse parses an HTTP response from a PostSalesChannelsWithResponse call
func ParsePostSalesChannelsResponse(rsp *http.Response) (*PostSalesChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSalesChannelsIdResponse parses an HTTP response from a DeleteSalesChannelsIdWithResponse call
func ParseDeleteSalesChannelsIdResponse(rsp *http.Response) (*DeleteSalesChannelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSalesChannelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSalesChannelsIdResponse parses an HTTP response from a GetSalesChannelsIdWithResponse call
func ParseGetSalesChannelsIdResponse(rsp *http.Response) (*GetSalesChannelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesChannelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSalesChannelsIdResponse parses an HTTP response from a PostSalesChannelsIdWithResponse call
func ParsePostSalesChannelsIdResponse(rsp *http.Response) (*PostSalesChannelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesChannelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSalesChannelsIdProductsResponse parses an HTTP response from a PostSalesChannelsIdProductsWithResponse call
func ParsePostSalesChannelsIdProductsResponse(rsp *http.Response) (*PostSalesChannelsIdProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesChannelsIdProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShippingOptionsResponse parses an HTTP response from a GetShippingOptionsWithResponse call
func ParseGetShippingOptionsResponse(rsp *http.Response) (*GetShippingOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShippingOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingOptionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostShippingOptionsResponse parses an HTTP response from a PostShippingOptionsWithResponse call
func ParsePostShippingOptionsResponse(rsp *http.Response) (*PostShippingOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShippingOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingOptionRetrieveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteShippingOptionsIdResponse parses an HTTP response from a DeleteShippingOptionsIdWithResponse call
func ParseDeleteShippingOptionsIdResponse(rsp *http.Response) (*DeleteShippingOptionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShippingOptionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingOptionDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostShippingOptionsIdResponse parses an HTTP response from a PostShippingOptionsIdWithResponse call
func ParsePostShippingOptionsIdResponse(rsp *http.Response) (*PostShippingOptionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShippingOptionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingOptionRetrieveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostShippingOptionsIdRulesBatchResponse parses an HTTP response from a PostShippingOptionsIdRulesBatchWithResponse call
func ParsePostShippingOptionsIdRulesBatchResponse(rsp *http.Response) (*PostShippingOptionsIdRulesBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShippingOptionsIdRulesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShippingProfilesResponse parses an HTTP response from a GetShippingProfilesWithResponse call
func ParseGetShippingProfilesResponse(rsp *http.Response) (*GetShippingProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShippingProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostShippingProfilesResponse parses an HTTP response from a PostShippingProfilesWithResponse call
func ParsePostShippingProfilesResponse(rsp *http.Response) (*PostShippingProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShippingProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteShippingProfilesIdResponse parses an HTTP response from a DeleteShippingProfilesIdWithResponse call
func ParseDeleteShippingProfilesIdResponse(rsp *http.Response) (*DeleteShippingProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShippingProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingProfileDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetShippingProfilesIdResponse parses an HTTP response from a GetShippingProfilesIdWithResponse call
func ParseGetShippingProfilesIdResponse(rsp *http.Response) (*GetShippingProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShippingProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminShippingProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStockLocationsResponse parses an HTTP response from a GetStockLocationsWithResponse call
func ParseGetStockLocationsResponse(rsp *http.Response) (*GetStockLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStockLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostStockLocationsResponse parses an HTTP response from a PostStockLocationsWithResponse call
func ParsePostStockLocationsResponse(rsp *http.Response) (*PostStockLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStockLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteStockLocationsIdResponse parses an HTTP response from a DeleteStockLocationsIdWithResponse call
func ParseDeleteStockLocationsIdResponse(rsp *http.Response) (*DeleteStockLocationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStockLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStockLocationsIdResponse parses an HTTP response from a GetStockLocationsIdWithResponse call
func ParseGetStockLocationsIdResponse(rsp *http.Response) (*GetStockLocationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStockLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostStockLocationsIdResponse parses an HTTP response from a PostStockLocationsIdWithResponse call
func ParsePostStockLocationsIdResponse(rsp *http.Response) (*PostStockLocationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStockLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostStockLocationsIdFulfillmentSetsResponse parses an HTTP response from a PostStockLocationsIdFulfillmentSetsWithResponse call
func ParsePostStockLocationsIdFulfillmentSetsResponse(rsp *http.Response) (*PostStockLocationsIdFulfillmentSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStockLocationsIdFulfillmentSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostStockLocationsIdSalesChannelsResponse parses an HTTP response from a PostStockLocationsIdSalesChannelsWithResponse call
func ParsePostStockLocationsIdSalesChannelsResponse(rsp *http.Response) (*PostStockLocationsIdSalesChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStockLocationsIdSalesChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStoresResponse parses an HTTP response from a GetStoresWithResponse call
func ParseGetStoresResponse(rsp *http.Response) (*GetStoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStoresIdResponse parses an HTTP response from a GetStoresIdWithResponse call
func ParseGetStoresIdResponse(rsp *http.Response) (*GetStoresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostStoresIdResponse parses an HTTP response from a PostStoresIdWithResponse call
func ParsePostStoresIdResponse(rsp *http.Response) (*PostStoresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStoresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaxRatesResponse parses an HTTP response from a GetTaxRatesWithResponse call
func ParseGetTaxRatesResponse(rsp *http.Response) (*GetTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTaxRatesResponse parses an HTTP response from a PostTaxRatesWithResponse call
func ParsePostTaxRatesResponse(rsp *http.Response) (*PostTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTaxRatesIdResponse parses an HTTP response from a DeleteTaxRatesIdWithResponse call
func ParseDeleteTaxRatesIdResponse(rsp *http.Response) (*DeleteTaxRatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxRatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaxRatesIdResponse parses an HTTP response from a GetTaxRatesIdWithResponse call
func ParseGetTaxRatesIdResponse(rsp *http.Response) (*GetTaxRatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTaxRatesIdResponse parses an HTTP response from a PostTaxRatesIdWithResponse call
func ParsePostTaxRatesIdResponse(rsp *http.Response) (*PostTaxRatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTaxRatesIdRulesResponse parses an HTTP response from a PostTaxRatesIdRulesWithResponse call
func ParsePostTaxRatesIdRulesResponse(rsp *http.Response) (*PostTaxRatesIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRatesIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTaxRatesIdRulesRuleIdResponse parses an HTTP response from a DeleteTaxRatesIdRulesRuleIdWithResponse call
func ParseDeleteTaxRatesIdRulesRuleIdResponse(rsp *http.Response) (*DeleteTaxRatesIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxRatesIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaxRegionsResponse parses an HTTP response from a GetTaxRegionsWithResponse call
func ParseGetTaxRegionsResponse(rsp *http.Response) (*GetTaxRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTaxRegionsResponse parses an HTTP response from a PostTaxRegionsWithResponse call
func ParsePostTaxRegionsResponse(rsp *http.Response) (*PostTaxRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTaxRegionsIdResponse parses an HTTP response from a DeleteTaxRegionsIdWithResponse call
func ParseDeleteTaxRegionsIdResponse(rsp *http.Response) (*DeleteTaxRegionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxRegionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaxRegionsIdResponse parses an HTTP response from a GetTaxRegionsIdWithResponse call
func ParseGetTaxRegionsIdResponse(rsp *http.Response) (*GetTaxRegionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRegionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUploadsResponse parses an HTTP response from a PostUploadsWithResponse call
func ParsePostUploadsResponse(rsp *http.Response) (*PostUploadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUploadsIdResponse parses an HTTP response from a DeleteUploadsIdWithResponse call
func ParseDeleteUploadsIdResponse(rsp *http.Response) (*DeleteUploadsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUploadsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUploadsIdResponse parses an HTTP response from a GetUploadsIdWithResponse call
func ParseGetUploadsIdResponse(rsp *http.Response) (*GetUploadsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUploadsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUsersIdResponse parses an HTTP response from a DeleteUsersIdWithResponse call
func ParseDeleteUsersIdResponse(rsp *http.Response) (*DeleteUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUsersIdResponse parses an HTTP response from a PostUsersIdWithResponse call
func ParsePostUsersIdResponse(rsp *http.Response) (*PostUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsExecutionsResponse parses an HTTP response from a GetWorkflowsExecutionsWithResponse call
func ParseGetWorkflowsExecutionsResponse(rsp *http.Response) (*GetWorkflowsExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsExecutionsIdResponse parses an HTTP response from a GetWorkflowsExecutionsIdWithResponse call
func ParseGetWorkflowsExecutionsIdResponse(rsp *http.Response) (*GetWorkflowsExecutionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsExecutionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsExecutionsWorkflowIdRunResponse parses an HTTP response from a PostWorkflowsExecutionsWorkflowIdRunWithResponse call
func ParsePostWorkflowsExecutionsWorkflowIdRunResponse(rsp *http.Response) (*PostWorkflowsExecutionsWorkflowIdRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsExecutionsWorkflowIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsExecutionsWorkflowIdStepsFailureResponse parses an HTTP response from a PostWorkflowsExecutionsWorkflowIdStepsFailureWithResponse call
func ParsePostWorkflowsExecutionsWorkflowIdStepsFailureResponse(rsp *http.Response) (*PostWorkflowsExecutionsWorkflowIdStepsFailureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsExecutionsWorkflowIdStepsFailureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsExecutionsWorkflowIdStepsSuccessResponse parses an HTTP response from a PostWorkflowsExecutionsWorkflowIdStepsSuccessWithResponse call
func ParsePostWorkflowsExecutionsWorkflowIdStepsSuccessResponse(rsp *http.Response) (*PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsExecutionsWorkflowIdStepsSuccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsExecutionsWorkflowIdSubscribeResponse parses an HTTP response from a GetWorkflowsExecutionsWorkflowIdSubscribeWithResponse call
func ParseGetWorkflowsExecutionsWorkflowIdSubscribeResponse(rsp *http.Response) (*GetWorkflowsExecutionsWorkflowIdSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsExecutionsWorkflowIdSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsExecutionsWorkflowIdTransactionIdResponse parses an HTTP response from a GetWorkflowsExecutionsWorkflowIdTransactionIdWithResponse call
func ParseGetWorkflowsExecutionsWorkflowIdTransactionIdResponse(rsp *http.Response) (*GetWorkflowsExecutionsWorkflowIdTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsExecutionsWorkflowIdTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse parses an HTTP response from a GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeWithResponse call
func ParseGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse(rsp *http.Response) (*GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InvalidStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
